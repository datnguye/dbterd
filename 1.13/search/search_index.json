{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"dbterd","text":"<p>CLI to generate Diagram-as-a-code file (DBML, Mermaid, PlantUML, GraphViz, D2) from dbt artifact files</p> <p> </p> pip install dbterd --upgrade Successfully installed dbterd restart \u21bb <p>Verify installation:</p> <pre><code>dbterd --version\n</code></pre> <p>For <code>dbt-core</code> Users</p> <p>It's highly recommended to update <code>dbt-artifacts-parser</code> to the latest version in order to support the newer <code>dbt-core</code> version which would cause to have the new manifest / catalog json schema:</p> <pre><code>pip install dbt-artifacts-parser --upgrade\n</code></pre>"},{"location":"index.html#quick-examine-with-existing-samples","title":"Quick examine with existing samples","text":"<ul> <li>Play with CLIs:</li> </ul> Click me <pre><code># select all models in dbt_resto\ndbterd run -ad samples/dbtresto\n# select all models in dbt_resto, Select multiple dbt resources\ndbterd run -ad samples/dbtresto -rt model -rt source\n# select only models in dbt_resto excluding staging\ndbterd run -ad samples/dbtresto -s model.dbt_resto -ns model.dbt_resto.staging\n# select only models in schema name mart excluding staging\ndbterd run -ad samples/dbtresto -s schema:mart -ns model.dbt_resto.staging\n# select only models in schema full name dbt.mart excluding staging\ndbterd run -ad samples/dbtresto -s schema:dbt.mart -ns model.dbt_resto.staging\n\n# other samples\ndbterd run -ad samples/fivetranlog\ndbterd run -ad samples/fivetranlog -rt model -rt source\n\ndbterd run -ad samples/facebookad\ndbterd run -ad samples/facebookad -rt model -rt source\n\ndbterd run -ad samples/shopify -s wildcard:*shopify.shopify__*\ndbterd run -ad samples/shopify -rt model -rt source\n\ndbterd run -ad samples/dbt-constraints -a \"test_relationship:(name:foreign_key|c_from:fk_column_name|c_to:pk_column_name)\"\n\n# your own sample without commiting to repo\ndbterd run -ad samples/local -rt model -rt source\n</code></pre> <ul> <li> <p>Play with Python API (whole ERD):</p> <pre><code>from dbterd.api import DbtErd\n\nerd = DbtErd().get_erd()\nprint(\"erd (dbml):\", erd)\n\nerd = DbtErd(target=\"mermaid\").get_erd()\nprint(\"erd (mermaid):\", erd)\n</code></pre> </li> <li> <p>Play with Python API (1 model's ERD):</p> <pre><code>from dbterd.api import DbtErd\n\ndim_prize_erd = DbtErd(target=\"mermaid\").get_model_erd(\n    node_unique_id=\"model.dbt_resto.dim_prize\"\n)\nprint(\"erd of dim_prize (mermaid):\", dim_prize_erd)\n</code></pre> <p>Here is the output:</p> <pre><code>erDiagram\n  \"MODEL.DBT_RESTO.DIM_PRIZE\" {\n    varchar prize_key\n    nvarchar prize_name\n    int prize_order\n  }\n  \"MODEL.DBT_RESTO.FACT_RESULT\" {\n    varchar fact_result_key\n    varchar box_key\n    varchar prize_key\n    date date_key\n    int no_of_won\n    float prize_value\n    float prize_paid\n    int is_prize_taken\n  }\n  \"MODEL.DBT_RESTO.FACT_RESULT\" }|--|| \"MODEL.DBT_RESTO.DIM_PRIZE\": prize_key</code></pre> </li> </ul> <p>\ud83c\udfc3Check out the Quick Demo with DBML!</p>"},{"location":"index.html#contributing","title":"Contributing \u2728","text":"<p>If you've ever wanted to contribute to this tool, and a great cause, now is your chance!</p> <p>See the contributing docs CONTRIBUTING for more information.</p> <p>If you've found this tool to be very helpful, please consider giving the repository a star, sharing it on social media, or even writing a blog post about it \ud83d\udc8c</p> <p> </p> <p>Finally, super thanks to our Contributors:</p> <p> </p>"},{"location":"license.html","title":"License \ud83d\udd11","text":"<p>MIT License</p> <p>Copyright \u00a9 2022 Dat Nguyen</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"nav/development/contributing-guide.html","title":"Contributing to <code>dbterd</code>","text":"<p><code>dbterd</code> is open source software. It is what it is today because community members have opened issues, provided feedback, and contributed to the knowledge loop. Whether you are a seasoned open source contributor or a first-time committer, we welcome and encourage you to contribute code, documentation, ideas, or problem statements to this project.</p> <ul> <li>Contributing to <code>dbterd</code></li> <li>About this document</li> <li>Getting the code<ul> <li>Installing git</li> <li>External contributors</li> </ul> </li> <li>Setting up an environment<ul> <li>Tools</li> </ul> </li> <li>Testing</li> <li>Submitting a Pull Request</li> </ul>"},{"location":"nav/development/contributing-guide.html#about-this-document","title":"About this document","text":"<p>There are many ways to contribute to the ongoing development of <code>dbterd</code>, such as by participating in discussions and issues.</p> <p>The rest of this document serves as a more granular guide for contributing code changes to <code>dbterd</code> (this repository). It is not intended as a guide for using <code>dbterd</code>, and some pieces assume a level of familiarity with Python development with <code>poetry</code>. Specific code snippets in this guide assume you are using macOS or Linux and are comfortable with the command line.</p> <ul> <li>Branches: All pull requests from community contributors should target the <code>main</code> branch (default). If the change is needed as a patch for a minor version of dbt that has already been released (or is already a release candidate), a maintainer will backport the changes in your PR to the relevant \"latest\" release branch (<code>1.0.&lt;latest&gt;</code>, <code>1.1.&lt;latest&gt;</code>, ...). If an issue fix applies to a release branch, that fix should be first committed to the development branch and then to the release branch (rarely release-branch fixes may not apply to <code>main</code>).</li> <li>Releases: Before releasing a new minor version, we prepare a series of beta release candidates to allow users to test the new version in live environments. This is an important quality assurance step, as it exposes the new code to a wide variety of complicated deployments and can surface bugs before official release. Releases are accessible via pip.</li> </ul>"},{"location":"nav/development/contributing-guide.html#getting-the-code","title":"Getting the code","text":""},{"location":"nav/development/contributing-guide.html#installing-git","title":"Installing git","text":"<p>You will need <code>git</code> in order to download and modify the <code>dbterd</code> source code. On macOS, the best way to download git is to just install Xcode.</p>"},{"location":"nav/development/contributing-guide.html#external-contributors","title":"External contributors","text":"<p>You can contribute to <code>dbterd</code> by forking the <code>dbterd</code> repository. For a detailed overview on forking, check out the GitHub docs on forking. In short, you will need to:</p> <ol> <li>Fork the <code>dbterd</code> repository</li> <li>Clone your fork locally</li> <li>Check out a new branch for your proposed changes</li> <li>Push changes to your fork</li> <li>Open a pull request against <code>datnguye/dbterd</code> from your forked repository</li> </ol>"},{"location":"nav/development/contributing-guide.html#setting-up-an-environment","title":"Setting up an environment","text":"<p>There are some tools that will be helpful to you in developing locally. While this is the list relevant for <code>dbterd</code> development, many of these tools are used commonly across open-source python projects.</p>"},{"location":"nav/development/contributing-guide.html#tools","title":"Tools","text":"<p>We will buy <code>poetry</code> in <code>dbterd</code> development and testing.</p> <p>So first install poetry via the official installer</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>or via pip:</p> <pre><code>python3 -m pip install poetry --upgrade\n</code></pre> <p>then, start installing the local environment:</p> <pre><code>python3 -m poetry install\npython3 -m poetry shell\npoe git-hooks\npip install -e .\ndbterd -h\n</code></pre>"},{"location":"nav/development/contributing-guide.html#testing","title":"Testing","text":"<p>Once you're able to manually test that your code change is working as expected, it's important to run existing automated tests, as well as adding some new ones. These tests will ensure that:</p> <ul> <li>Your code changes do not unexpectedly break other established functionality</li> <li>Your code changes can handle all known edge cases</li> <li>The functionality you're adding will keep working in the future</li> </ul> <p>Use <code>pytest</code></p> <p>Finally, you can also run a specific test or group of tests using <code>pytest</code> directly. With a virtualenv active and dev dependencies installed you can do things like:</p> <pre><code>poe test\n</code></pre> <p>Run test with coverage report:</p> <pre><code>poe test-cov\n</code></pre> <p>See pytest usage docs for an overview of useful command-line options.</p>"},{"location":"nav/development/contributing-guide.html#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>Code can be merged into the current development branch <code>main</code> by opening a pull request. A <code>dbterd</code> maintainer will review your PR. They may suggest code revision for style or clarity, or request that you add unit or integration test(s). These are good things! We believe that, with a little bit of help, anyone can contribute high-quality code.</p> <p>Automated tests run via GitHub Actions. If you're a first-time contributor, all tests (including code checks and unit tests) will require a maintainer to approve. Changes in the <code>dbterd</code> repository trigger unit tests against multiple Python versions with the latest <code>dbterd</code> code changes.</p> <p>Once all tests are passing and your PR has been approved, a <code>dbterd</code> maintainer will merge your changes into the active development branch. And that's it! Happy developing </p>"},{"location":"nav/guide/cli-references.html","title":"CLI Reference (dbterd)","text":"<p>Run <code>dbterd --help</code> or <code>dbterd -h</code> to see the basic guideline for CLI Reference</p> dbterd -h Usage: dbterd [OPTIONS] COMMAND [ARGS]...  Tools for producing diagram-as-code  Options: --version   Show the version and exit. -h, --help  Show this message and exit.  Commands: debug  Inspect the hidden magics run    Run the convert"},{"location":"nav/guide/cli-references.html#dbterd-run","title":"dbterd run","text":"<p>Command to generate diagram-as-a-code file</p> <p>Examples:</p> CLI (within dbt project)--help (-h) <pre><code>dbt docs generate\ndbterd run [-t dbml or -t mermaid]\n</code></pre> <pre><code>Usage: dbterd run [OPTIONS]\n\nRun the convert\n\nOptions:\n    -ad, --artifacts-dir TEXT     Specified the full path to dbt artifacts path\n                                    which known as /target directory  [default:\n                                    C:\\Users\\DAT\\Documents\\Sources\\dbterd\\target]\n    -o, --output TEXT             Output the result file. Default to the same\n                                    target dir  [default:\n                                    C:\\Users\\DAT\\Documents\\Sources\\dbterd\\target]\n    -s, --select TEXT             Selecttion criteria\n    -ns, --exclude TEXT           Exclusion criteria\n    -t, --target TEXT             Target to the diagram-as-code platform\n                                    [default: dbml]\n    -a, --algo TEXT               Specified algorithm in the way to detect\n                                    diagram connectors  [default:\n                                    test_relationship]\n    -mv, --manifest-version TEXT  Specified dbt manifest.json version\n    -cv, --catalog-version TEXT   Specified dbt catalog.json version\n    -rt, --resource-type TEXT     Specified dbt resource type(seed, model,\n                                    source, snapshot),default:model, use examples,\n                                    -rt model -rt source\n    --omit-columns                Flag to omit columns in diagram. Currently\n                                    only mermaid is supported\n    -h, --help                    Show this message and exit.\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-select-s","title":"dbterd run --select (-s)","text":"<p>Selection criteria.</p> <p>Select all dbt models if not specified, supports mulitple options</p> <p>Rules:</p> <ul> <li>By <code>name</code>: model name starts with input string</li> <li>By <code>exact</code>: exact model name, formed as <code>exact:model.package.name</code></li> <li>By <code>schema</code>: schema name starts with an input string, formed as <code>schema:&lt;your_schema_name&gt;</code></li> <li>By <code>wildcard</code>: model name matches to a wildcard pattern, formed as <code>wildcard:&lt;your_wildcard&gt;</code></li> <li>By <code>exposure</code>: exposure name, exact match</li> </ul> <p>Examples:</p> CLI (by name)CLI (by exact name)CLI (by schema)CLI (by wildcard)CLI (by exposure) <pre><code>dbterd run -s \"model.package.partital_name\"\n</code></pre> <pre><code>dbterd run -s \"exact:model.package.name\"\n</code></pre> <pre><code>dbterd run -s \"schema:my_schema_name\"\n</code></pre> <pre><code>dbterd run -s \"wildcard:*xyz\"\n</code></pre> <pre><code>dbterd run -s \"exposure:my_exposure_name\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#and-and-or-logic","title":"<code>AND</code> and <code>OR</code> logic","text":"<ul> <li><code>AND</code> logic is applied to a single selection splitted by comma (,)</li> <li><code>OR</code> logic is applied to 2+ selection</li> </ul> <p>Examples:</p> ANDOR <pre><code># All models belong to 'abc' schema AND also need to match the pattern of '*xyz.*'\ndbterd run -s schema:abc,wildcard:*xyz.*\n</code></pre> <pre><code># All models belong to 'abc' schema, OR match to the pattern of '*xyz.*'\ndbterd run -s schema:abc -s wildcard:*xyz.*\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-exclude-ns","title":"dbterd run --exclude (-ns)","text":"<p>Exclusion criteria. Rules are the same as Selection Criteria.</p> <p>Do not exclude any dbt models if not specified, supports mulitple options</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ns 'model.package_name.table'\n</code></pre> <pre><code>dbterd run --exclude 'model.package_name.table'\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-artifacts-dir-ad","title":"dbterd run --artifacts-dir (-ad)","text":"<p>Configure the path to directory containing dbt artifact files.</p> <p>It will take the the nested <code>/target</code> directory of <code>--dbt-project-dir</code> if not specified.</p> <p>Default to the current directory's <code>/target</code> if both this option and <code>--dbt-project-dir</code> option are not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ad \"./target\"\n</code></pre> <pre><code>dbterd run --artifacts-dir \"./target\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-output-o","title":"dbterd run --output (-o)","text":"<p>Configure the path to directory containing the output diagram file.</p> <p>Default to <code>./target</code></p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -o \"./target\"\n</code></pre> <pre><code>dbterd run --output \"./target\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-output-file-name-ofn","title":"dbterd run --output-file-name (-ofn)","text":"<p>Configure the output file name</p> <p>Default to <code>output.{modulename}</code> which is defined in the target module</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ofn \"erd.dbml\"\n</code></pre> <pre><code>dbterd run --output-file-name \"erd.dbml\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-target-t","title":"dbterd run --target (-t)","text":"<p>Default to <code>dbml</code></p> <p>Supported target, please visit Generate the Targets</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -t dbml\n</code></pre> <pre><code>dbterd run --target dbml\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-algo-a","title":"dbterd run --algo (-a)","text":"<p>Specified algorithm in the way to detect diagram connectors</p> <p>Default to <code>test_relationship</code></p> <p>In the advanced use case, the test name can be configurable by following syntax:</p> <p><code>{algorithm_name}:(name:{contains_test_name}|c_from:{referencing_column_name}|c_to:{referenced_column_name})</code></p> <p>In the above:</p> <ul> <li><code>algorithm_name</code>: <code>test_relationship</code> (only supported value now)</li> <li><code>contains_test_name</code>: Configure the test name (detected with <code>contains</code> logic). Default to <code>relationship</code></li> <li><code>c_from</code>: Configure the test metadata attribute (1) for the foreign key column name(s). If (1)'s value is multiple columns, it will concat them all   with <code>_and</code> wording       &gt; NOTE: It always looking at the <code>column_name</code> attribute firstly</li> <li><code>c_to</code>: Configure the test metadata attribute (2) for the referenced column name(s). If (2)'s value is multiple columns, it will concat them all with <code>_and</code> wording. Default to <code>field</code></li> </ul> <p>For example, if you would use <code>dbt-constraints</code> package</p> <p>The dbt-constraints package is using different name of test which is close to the contraint names, in this case, you would need to customize the input string here:</p> <pre><code>dbterd run \\\n--algo \"test_relationship:(name:foreign_key|c_from:fk_column_name|c_to:pk_column_name)\"\n</code></pre> <p>Examples:</p> CLICLI (long style)Use <code>foreign_key</code> test <pre><code>dbterd run -a test_relationship\n</code></pre> <pre><code>dbterd run --algo test_relationship\n</code></pre> <pre><code>dbterd run --algo \"test_relationship:(name:foreign_key|c_from:fk_column_name|c_to:pk_column_name)\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-omit-columns","title":"dbterd run --omit-columns","text":"<p>Flag to omit columns in diagram. Currently only mermaid is supported</p> <p>Default to <code>False</code></p> <p>Examples:</p> CLI <pre><code>dbterd run --target mermaid --omit-columns\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-manifest-version-mv","title":"dbterd run --manifest-version (-mv)","text":"<p>Specified dbt manifest.json version</p> <p>Auto detect if not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run --manifest-version 7\n</code></pre> <pre><code>dbterd run -mv 7\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-catalog-version-cv","title":"dbterd run --catalog-version (-cv)","text":"<p>Specified dbt catalog.json version</p> <p>Auto detect if not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run --catalog-version 7\n</code></pre> <pre><code>dbterd run -cv 7\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-resource-type-rt","title":"dbterd run --resource-type (-rt)","text":"<p>Specified dbt resource type(seed, model, source, snapshot).</p> <p>Default to <code>[\"model\"]</code>, supports mulitple options</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -rt model -rt source\n</code></pre> <pre><code>dbterd run --resource-type model\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt","title":"dbterd run --dbt","text":"<p>Flag to indicate the Selecton to follow dbt's one leveraging Programmatic Invocation</p> <p>Default to <code>False</code></p> <p>Examples:</p> CLI (use dbt selection)CLI (use dbterd selection) <pre><code>dbterd run -s +something --dbt\n# select 'something' and the upstream\n</code></pre> <pre><code>dbterd run -s something\n# select starts with 'something'\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-dbt-auto-artifact","title":"dbterd run --dbt --dbt-auto-artifact","text":"<p>Flag to indicate force running <code>dbt docs generate</code> to the targetted project in order to produce the dbt artifact files.</p> <p>This option have to be enabled together with <code>--dbt</code> option, and will override the value of <code>--artifacts-dir</code> to be using the <code>/target</code> dir of the value of <code>--dbt-project-dir</code>.</p> <p>Default to <code>False</code></p> <p>Examples:</p> CLI <pre><code>dbterd run -s +something --dbt --dbt-auto-artifacts\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-project-dir-dpd","title":"dbterd run --dbt-project-dir (-dpd)","text":"<p>Specified dbt project directory path</p> <p>You should specified this option if your CWD is not the dbt project dir, and normally used with <code>--dbt</code> enabled. It will take the value of <code>--artifacts-dir</code> if not specified.</p> <p>Default to the current directory if both this option and <code>--artifacts-dir</code> option are not specified</p> <p>Examples:</p> CLI <pre><code>dbterd run -s +something --dbt-project-dir /path/to/dbt/project --dbt\n# select 'something' and the upstream of the dbt project located at /path/to/dbt/project\n# the artifacts dir will probably be assumed as: /path/to/dbt/project/target\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-target-dt","title":"dbterd run --dbt-target (-dt)","text":"<p>Specified dbt target name</p> <p>Probably used with <code>--dbt</code> enabled.</p> <p>Default to the dbt's profile configuration</p> <p>Examples:</p> CLI <pre><code>dbterd run -s +something --dbt-project-dir /path/to/dbt/project --dbt --dbt-target prod\n# select 'something' and the upstream of the dbt project located at /path/to/dbt/project using target name 'prod'\n# the artifacts dir will probably be assumed as: /path/to/dbt/project/target\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-entity-name-format-enf","title":"dbterd run --entity-name-format (-enf)","text":"<p>Decide how the table name is generated on the ERD.</p> <p>By default, the table name is the dbt node name (<code>resource_type.package_name.model_name</code>).</p> <p>Currently, it supports the following keys in the format:</p> <ul> <li><code>resource.package.model</code> (by default)</li> <li><code>database.schema.table</code></li> <li>Or any other partial forms e.g. <code>schema.table</code>, <code>resource.model</code></li> </ul> <p>Examples:</p> CLI <pre><code>dbterd run --entity-name-format resource.package.model # by default\ndbterd run --entity-name-format database.schema.table # with fqn of the physical tables\ndbterd run --entity-name-format schema.table # with schema.table only\ndbterd run --entity-name-format table # with table name only\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-cloud","title":"dbterd run --dbt-cloud","text":"<p>Decide to download artifact files from dbt Cloud Job Run instead of compiling locally.</p> <p>Check Download artifacts from a Job Run for more details.</p> <p>Examples:</p> CLI <pre><code>dbterd run --dbt-cloud\ndbterd run --dbt-cloud --select wildcard:*transaction*\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-metadata","title":"dbterd run-metadata","text":"<p>Command to generate diagram-as-a-code file by connecting to dbt Cloud Discovery API using GraphQL connection.</p> <p>Check this guideline for more details.</p> <p>Examples:</p> CLI <pre><code>dbterd run-metadata [-t dbml or -t mermaid]\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-debug","title":"dbterd debug","text":"<p>Shows hidden configured values, which will help us to see what configs are passed into and how they are evaluated to be used.</p> <p>Examples:</p> Output <pre><code>2023-09-08 16:43:45,066 - dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\n2023-09-08 16:43:45,071 - dbterd - INFO - **Arguments used** (main.py:63)\n2023-09-08 16:43:45,073 - dbterd - DEBUG - {\n    \"artifacts_dir\": \"\",\n    \"output\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"select\": [],\n    \"exclude\": [],\n    \"target\": \"dbml\",\n    \"algo\": \"test_relationship\",\n    \"manifest_version\": null,\n    \"catalog_version\": null,\n    \"resource_type\": [\n        \"model\"\n    ],\n    \"dbt\": false,\n    \"dbt_project_dir\": \"\",\n    \"dbt_target\": null\n} (main.py:64)\n2023-09-08 16:43:45,079 - dbterd - INFO - **Arguments evaluated** (main.py:65)\n2023-09-08 16:43:45,081 - dbterd - INFO - Using dbt artifact dir at: C:\\Users\\DAT\\Documents\\Sources\\dbterd\\target (base.py:41)\n2023-09-08 16:43:45,082 - dbterd - INFO - Using dbt project  dir at: C:\\Users\\DAT\\Documents\\Sources\\dbterd (base.py:42)\n2023-09-08 16:43:45,084 - dbterd - DEBUG - {\n    \"artifacts_dir\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"output\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"select\": [],\n    \"exclude\": [],\n    \"target\": \"dbml\",\n    \"algo\": \"test_relationship\",\n    \"manifest_version\": null,\n    \"catalog_version\": null,\n    \"resource_type\": [\n        \"model\"\n    ],\n    \"dbt\": false,\n    \"dbt_project_dir\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\",\n    \"dbt_target\": null\n} (main.py:66)\n</code></pre>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job-run.html","title":"Download artifacts from a Job Run","text":"<p>This is a guideline on how to download <code>manifest.json</code> and <code>catalog.json</code> from a Job Run by using dbt CLoud Administrative API, under the Retrieve Run Artifact endpoint. Therefore, we don't need to run <code>dbt docs generate</code> locally anymore.</p> <p>In order to support dbt Cloud users, <code>dbterd</code> is now having multiple CLI options starting with <code>--dbt-cloud</code> to let us configure the connection to the complete dbt Cloud Job Run.</p> <p>Prerequisites</p> <ul> <li>You have a dbt Cloud account with Team and Enterprise plans \ud83d\udcb0</li> <li> <p>You have a job or go create a new job with a single step \ud83c\udfc3</p> <pre><code>dbt docs generate\n</code></pre> </li> <li> <p>Make sure that you have at least 1 successful run \u2705</p> </li> </ul>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job-run.html#1-prepare-the-environment-variables","title":"1. Prepare the environment variables","text":"<p>Behind the scene, the API Endpoint will look like:</p> <pre><code>https://{host_url}/api/{api_version}/accounts/{account_id}/runs/{run_id}/artifacts/{path}\n</code></pre> <p>And the dbt Cloud's Job Rub will have the URL constructed as:</p> <pre><code>https://&lt;host_url&gt;/deploy/&lt;account_id&gt;/projects/irrelevant/runs/&lt;run_id&gt;\n</code></pre> <p>In the above:</p> URL Part Environment Variable CLI Option Description <code>host_url</code> <code>DBTERD_DBT_CLOUD_HOST_URL</code> <code>--dbt-cloud-host-url</code> Host URL, also known as Access URL (Default to <code>cloud.getdbt.com</code>) <code>account_id</code> <code>DBTERD_DBT_CLOUD_ACCOUNT_ID</code> <code>--dbt-cloud-account-id</code> dbt Cloud Account ID <code>run_id</code> <code>DBTERD_DBT_CLOUD_RUN_ID</code> <code>--dbt-cloud-run-id</code> dbt Cloud successful job run ID <code>api_version</code> <code>DBTERD_DBT_CLOUD_API_VERSION</code> <code>--dbt-cloud-api-version</code> dbt Cloud API version (Default to <code>v2</code>) <code>path</code> <code>N/A</code> <code>N/A</code> Artifact relative file path. You don't need to care about this part as <code>dbterd</code> managed it already <p>Besides, we need another one which is very important, the service token:</p> <ul> <li>Go to Account settings / Service tokens. Click + New token</li> <li>Enter Service token name e.g. \"ST_dbterd\"</li> <li>Click Add and select <code>Job Admin</code> permission. Optionally, select the right project or all by default</li> <li>Click Save</li> <li>Copy token &amp; Pass it to the Environment Variable (<code>DBTERD_DBT_CLOUD_SERVICE_TOKEN</code>) or the CLI Option (<code>--dbt-cloud-service-token</code>)</li> </ul> <p>Finally, fill in <code>your_value</code> and execute the (Linux or Macos) command below:</p> <pre><code>export DBTERD_DBT_CLOUD_SERVICE_TOKEN=your_value\nexport DBTERD_DBT_CLOUD_ACCOUNT_ID=your_value\nexport DBTERD_DBT_CLOUD_RUN_ID=your_value\nexport DBTERD_DBT_CLOUD_HOST_URL=your_value # optional, default = cloud.getdbt.com\nexport DBTERD_DBT_CLOUD_API_VERSION=your_value # optional, default = v2\n</code></pre> <p>Or in Powershell:</p> <pre><code>$env:DBTERD_DBT_CLOUD_SERVICE_TOKEN=\"your_value\"\n$env:DBTERD_DBT_CLOUD_ACCOUNT_ID=\"your_value\"\n$env:DBTERD_DBT_CLOUD_RUN_ID=\"your_value\"\n$env:DBTERD_DBT_CLOUD_HOST_URL=\"your_value\" # optional, default = cloud.getdbt.com\n$env:DBTERD_DBT_CLOUD_API_VERSION=\"your_value\" # optional, default = v2\n</code></pre>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job-run.html#2-genrate-erd-file","title":"2. Genrate ERD file","text":"<p>We're going to use <code>--dbt-cloud</code> option to tell <code>dbterd</code> to use dbt Cloud API with all above variables.</p> <p>The command will be looks like:</p> <pre><code>dbterd run --dbt-cloud [-s &lt;dbterd selection&gt;]\n</code></pre> <p>Note</p> <p>You can not use <code>--dbt</code> option together with <code>--dbt-cloud</code></p> <p>and then, here is the sample console log:</p> <pre><code>dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\ndbterd - INFO - Using dbt project dir at: C:\\Sources\\dbterd (base.py:46)\ndbterd - INFO - Dowloading...[URL: https://hidden/api/v2/accounts/hidden/runs/hidden/artifacts/manifest.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Dowloading...[URL: https://hidden/api/v2/accounts/hidden/runs/hidden/artifacts/catalog.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Using dbt artifact dir at: hidden (base.py:73)\ndbterd - INFO - Collected 4 table(s) and 3 relationship(s) (test_relationship.py:59)\ndbterd - INFO - C:\\Sources\\dbterd\\target/output.dbml (base.py:170)\n</code></pre> <p>Voila! Happy ERD \ud83c\udf89!</p>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job.html","title":"Download the latest artifacts from a Job","text":"<p>Better than looking at the Run ID which is not static all the time, we're able to implicitly tell <code>dbterd</code> to retrieve the latest artifacts from a Job (latest run) by using the Retrieve Job Artifact endpoint.</p> <p>The Prerequisites and Steps will be pretty similar to Download artifacts from a Job Run, mostly everything is the same but we will specify JOB ID instead of the JOB RUN ID.</p> <p>Note</p> <p>JOB RUN ID takes precedence to JOB ID if specified</p> <p>Our dbt Cloud's Job will have the URL constructed as:</p> <pre><code>https://&lt;host_url&gt;/deploy/&lt;account_id&gt;/projects/irrelevant/jobs/&lt;job_id&gt;\n</code></pre> <p>In the above:</p> URL Part Environment Variable CLI Option Description <code>job_id</code> <code>DBTERD_DBT_CLOUD_JOB_ID</code> <code>--dbt-cloud-job-id</code> dbt Cloud job ID <ul> <li>Fill <code>your_value</code> and set the environment variable as below:</li> </ul> <pre><code>export DBTERD_DBT_CLOUD_SERVICE_TOKEN=your_value\nexport DBTERD_DBT_CLOUD_ACCOUNT_ID=your_value\nexport DBTERD_DBT_CLOUD_JOB_ID=your_value\nexport DBTERD_DBT_CLOUD_HOST_URL=your_value # optional, default = cloud.getdbt.com\nexport DBTERD_DBT_CLOUD_API_VERSION=your_value # optional, default = v2\n</code></pre> <ul> <li>Generate ERD:</li> </ul> <pre><code>dbterd run --dbt-cloud [-s &lt;dbterd selection&gt;]\n</code></pre> <p>And the sample logs:</p> <pre><code>dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\ndbterd - INFO - Using dbt project dir at: C:\\Sources\\dbterd (base.py:46)\ndbterd - INFO - Dowloading...[URL: https://hidden/api/v2/accounts/hidden/jobs/hidden/artifacts/manifest.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Dowloading...[URL: https://hidden/api/v2/accounts/hidden/jobs/hidden/artifacts/catalog.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Using dbt artifact dir at: hidden (base.py:73)\ndbterd - INFO - Collected 4 table(s) and 3 relationship(s) (test_relationship.py:59)\ndbterd - INFO - C:\\Sources\\dbterd\\target/output.dbml (base.py:170)\n</code></pre>"},{"location":"nav/guide/dbt-cloud/read-artifact-from-an-environment.html","title":"Read the latest artifacts from an environment","text":"<p>This is a guideline on how to query the dbt cloud metadata given an environment by using dbt CLoud Discovery API. It's neither not requiring <code>JOB ID</code> nor <code>JOB RUN ID</code>, this is the dbt Cloud's <code>ENVIRONMENT ID</code>. Especially, with this method, <code>dbterd</code> doesn't require to download files before hands anymore, the ERD will be generated on fly \ud83d\ude80.</p> <p><code>dbterd</code> is now understanding GraphQL connection which is exposed by dbt CLoud Discovery API endpoint:</p> <pre><code>https://metadata.YOUR_ACCESS_URL/graphql\n</code></pre> <p>Replace <code>{YOUR_ACCESS_URL}</code> with the appropriate Access URL for your region and plan</p> <p>Prerequisites</p> <ul> <li>dbt Cloud multi-tenant or single tenant account \u2601\ufe0f</li> <li>You must be on a Team or Enterprise plan \ud83d\udcb0</li> <li>Your projects must be on dbt version 1.0 or later \ud83c\udfc3</li> </ul> <p>The assumption is that you've already get the dbt Cloud project ready and is having at least 1 environment, and 1 job run successfully in this environment.</p>"},{"location":"nav/guide/dbt-cloud/read-artifact-from-an-environment.html#1-prepare-the-environment-variables","title":"1. Prepare the environment variables","text":"<p>As mentioned above, the API Endpoint will look like:</p> <pre><code>https://metadata.YOUR_ACCESS_URL/graphql\n</code></pre> <p>For example, if your multi-tenant region is North America, your endpoint is <code>https://metadata.cloud.getdbt.com/graphql</code>. If your multi-tenant region is EMEA, your endpoint is <code>https://metadata.emea.dbt.com/graphql</code>.</p> <p>And the dbt Cloud's Environment will have the URL constructed as:</p> <pre><code>https://&lt;host_url&gt;/deploy/irrelevant/projects/irrelevant/environments/&lt;environment_id&gt;\n</code></pre> <p>In the above:</p> URL Part Environment Variable CLI Option Description <code>host_url</code> <code>DBTERD_DBT_CLOUD_HOST_URL</code> <code>--dbt-cloud-host-url</code> Host URL (also known as Access URL) with prefix of <code>metadata.</code> <code>environment_id</code> <code>DBTERD_DBT_CLOUD_ENVIRONMENT_ID</code> <code>--dbt-cloud-environment-id</code> dbt Cloud environment ID <p>Besides, we need another one which is very important, the service token:</p> <ul> <li>Go to Account settings / Service tokens. Click + New token</li> <li>Enter Service token name e.g. \"ST_dbterd_metadata\"</li> <li>Click Add and select <code>Metadata Only</code> permission. Optionally, select the right project or all by default</li> <li>Click Save</li> <li>Copy token &amp; Pass it to the Environment Variable (<code>DBTERD_DBT_CLOUD_SERVICE_TOKEN</code>) or the CLI Option (<code>--dbt-cloud-service-token</code>)</li> </ul> <p>Finally, fill in <code>your_value</code> and execute the (Linux or Macos) command below:</p> <pre><code>export DBTERD_DBT_CLOUD_HOST_URL=your_value e.g. metadata.cloud.getdbt.com\nexport DBTERD_DBT_CLOUD_SERVICE_TOKEN=your_value\nexport DBTERD_DBT_CLOUD_ENVIRONMENT_ID=your_value\n</code></pre> <p>Or in Powershell:</p> <pre><code>$env:DBTERD_DBT_CLOUD_HOST_URL=\"your_value\"\n$env:DBTERD_DBT_CLOUD_SERVICE_TOKEN=\"your_value\"\n$env:DBTERD_DBT_CLOUD_ENVIRONMENT_ID=\"your_value\"\n</code></pre>"},{"location":"nav/guide/dbt-cloud/read-artifact-from-an-environment.html#2-genrate-erd-file","title":"2. Genrate ERD file","text":"<p>We're going to use a new command as <code>dbterd run-metadata</code> to tell <code>dbterd</code> to use dbt Cloud Discovery API with all above variables.</p> <p>The command will be looks like:</p> <pre><code>dbterd run-metadata [-s &lt;dbterd selection&gt;]\n</code></pre> <p>Behind the scenes, it will try use to the ERD GraphQL query buit-in at include/erd_query.gql</p> <p>and then, here is the sample console log:</p> <pre><code>2024-02-03 19:57:57,514 - dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\n2024-02-03 19:57:57,515 - dbterd - INFO - Looking for the query in: (hidden)/dbterd/adapters/dbt_cloud/include/erd_query.gql (query.py:25)\n2024-02-03 19:57:57,516 - dbterd - DEBUG - Getting erd data...[URL: https://metadata.cloud.getdbt.com/graphql/, VARS: {'environment_id': '(hidden)', 'model_first': 500, 'source_first': 500, 'exposure_first': 500, 'test_first': 500}] (graphql.py:40)\n2024-02-03 19:57:58,865 - dbterd - DEBUG - Completed [status: 200] (graphql.py:48)\n2024-02-03 19:57:58,868 - dbterd - INFO - Metadata result: 5 model(s), 2 source(s), 1 exposure(s), 21 test(s) (discovery.py:169)\n2024-02-03 19:57:58,880 - dbterd - INFO - Collected 5 table(s) and 1 relationship(s) (test_relationship.py:44)\n2024-02-03 19:57:58,881 - dbterd - INFO - (hidden)\\target (base.py:179)\n</code></pre> <p>Voila! Happy ERD with dbt Cloud Metadata \ud83c\udf89!</p>"},{"location":"nav/guide/targets/generate-d2.html","title":"Generate D2 ERD","text":""},{"location":"nav/guide/targets/generate-d2.html#1-install-d2-cli","title":"1. Install D2 CLI","text":"<pre><code># With --dry-run the install script will print the commands it will use\n# to install without actually installing so you know what it's going to do.\ncurl -fsSL https://d2lang.com/install.sh | sh -s -- --dry-run\n# If things look good, install for real.\ncurl -fsSL https://d2lang.com/install.sh | sh -s --\n</code></pre> <p>Check installations for more details</p>"},{"location":"nav/guide/targets/generate-d2.html#2-generate-d2-erd-content","title":"2. Generate D2 ERD content","text":"dbterd run -t d2 -ad \"samples/dbtresto\" -o \"target\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.d2 (base.py:75)"},{"location":"nav/guide/targets/generate-d2.html#2-export-to-svg","title":"2. Export to SVG","text":"d2 -w ./target/output.d2 ./target/output.svg"},{"location":"nav/guide/targets/generate-d2.html#3-embeded-into-markdown","title":"3. Embeded into Markdown","text":"<pre><code># Sample D2 ERD\n\n![d2](./target/output.svg)\n</code></pre> <p>Sample Output:</p> <p></p>"},{"location":"nav/guide/targets/generate-dbml.html","title":"Generate DBML","text":""},{"location":"nav/guide/targets/generate-dbml.html#1-produce-your-manifest-json","title":"1. Produce your manifest json","text":"<p>In your dbt project (I am using dbt-resto/integration_tests for demo purpose), try to build the docs:</p> dbt docs generate 01:40:58  Running with dbt=1.3.4 01:40:58  Partial parse save file not found. Starting full parse. 01:41:00  Found 0 models, 0 tests, 0 snapshots, 0 analyses, 356 macros, 1 operation, 0 seed files, 0 sources, 0 exposures, 0 metrics 01:41:00   01:41:00  Concurrency: 4 threads (target='postgres') 01:41:00   01:41:00  Done. 01:41:00  Building catalog 01:41:00  Catalog written to .\\target\\catalog.json"},{"location":"nav/guide/targets/generate-dbml.html#2-generate-dbml","title":"2. Generate DBML","text":"<p>Copy <code>manifest.json</code> and <code>catalog.json</code> into a specific folder OR do nothing and let's assume we're using <code>dbt/target</code> directory, and run</p> <p>Sample Usage</p> <p><code>dbterd run -ad \"/path/to/dbt/target\" -o \"/path/to/output\"</code></p> dbterd run -ad \"samples/dbtresto\" -s model.dbt_resto 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.dbml (base.py:75) <p>File <code>./target/output.dbml</code> will be generated as the result</p>"},{"location":"nav/guide/targets/generate-dbml.html#3-build-database-docs-site-optional","title":"3. Build database docs site (Optional)","text":"<p>Assuming you're already familiar with dbdocs</p> <p>Sample Usage</p> <p><code>dbdocs build \"/path/to/output/output.dbml\"</code></p> dbdocs build \"./target/output.dbml\" \u221a Parsing file content ? Project name:  poc \u203c Password is not set for 'poc' \u221a Done. Visit: https://dbdocs.io/datnguye/poc <p>The site will be looks like:</p> <p></p> <p>Result after applied Model Selection: </p>"},{"location":"nav/guide/targets/generate-graphviz.html","title":"Generate GraphViz ERD","text":""},{"location":"nav/guide/targets/generate-graphviz.html#1-install-graphviz-cli","title":"1. Install GraphViz CLI","text":"<pre><code>sudo apt install graphviz\n</code></pre> <p>Check installations for more details</p>"},{"location":"nav/guide/targets/generate-graphviz.html#2-generate-graphviz-erd-content","title":"2. Generate GraphViz ERD content","text":"dbterd run -t graphviz -ad \"samples/dbtresto\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.graphviz (base.py:75)"},{"location":"nav/guide/targets/generate-graphviz.html#2-export-to-png","title":"2. Export to PNG","text":"dot -Tpng ./target/output.d2 &gt; ./target/output.png"},{"location":"nav/guide/targets/generate-graphviz.html#3-embeded-into-markdown","title":"3. Embeded into Markdown","text":"<pre><code># Sample GraphViz ERD\n\n![graphviz](./target/output.png)\n</code></pre> <p>Sample Output:</p> <p></p>"},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html","title":"Generate Markdown with Mermaid ERD inclusive","text":""},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html#1-generate-mermaid-erd-content","title":"1. Generate mermaid ERD content","text":"dbterd run -t mermaid -ad \"samples/dbtresto\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.md (base.py:75)"},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html#2-copy-mermaid-to-erdmd","title":"2. Copy mermaid to ERD.md","text":"<p>Linux/MacOs</p> <p>We'll use <code>echo</code> and <code>cat</code> to copy content over into the target Markdown file.</p> echo \\`\\`\\`mermaid          &gt;  ./samples/dbtresto/ERD.md echo ---                    &gt;&gt; ./samples/dbtresto/ERD.md echo title: Sample ERD      &gt;&gt; ./samples/dbtresto/ERD.md echo ---                    &gt;&gt; ./samples/dbtresto/ERD.md cat ./target/output.md      &gt;&gt; ./samples/dbtresto/ERD.md echo \\`\\`\\`                 &gt;&gt; ./samples/dbtresto/ERD.md"},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html#3-commit-it-and-check-it-on-github","title":"3. Commit it and check it on Github","text":"<p>Check out the sample output:</p> <p></p>"},{"location":"nav/guide/targets/generate-plantuml.html","title":"Generate PlantUML","text":""},{"location":"nav/guide/targets/generate-plantuml.html#1-generate-plantuml-erd-content","title":"1. Generate PlantUML ERD content","text":"dbterd run -t plantuml -ad \"samples/dbtresto\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.plantuml (base.py:75)"},{"location":"nav/guide/targets/generate-plantuml.html#2-wrapping-uml-up-to-the-web-server","title":"2. Wrapping UML up to the web server","text":"<ul> <li>Go to PlantUML Web Server</li> <li>Paste the PlantUML content generated as above</li> <li>Wait for a second and get the URL</li> </ul>"},{"location":"nav/guide/targets/generate-plantuml.html#3-embeded-the-plantuml-url-into-markdown","title":"3. Embeded the PlantUML URL into Markdown","text":"<pre><code>![](https://www.plantuml.com/plantuml/dpng/{your-hash})\n</code></pre>"},{"location":"nav/guide/targets/generate-plantuml.html#known-limitation","title":"Known Limitation\ud83d\udca1","text":"<ul> <li>Plant UML connectors seem not to support to indicate the columns which are related to the Relationship</li> <li>Left the question \"How to automate the markdown image URL generated?\" opened</li> </ul>"},{"location":"nav/metadata/ignore_in_erd.html","title":"Ignore Tests","text":""},{"location":"nav/metadata/ignore_in_erd.html#decide-to-exclude-relationship-tests-from-erd-generated","title":"Decide to exclude Relationship Tests from ERD generated","text":"<p>Add <code>ignore_in_erd</code> attribute into your test's meta: <pre><code>version: 2\n\nmodels:\n  - name: your_model\n    columns:\n      - name: your_column\n        tests:\n          - relationships_test:\n              to: ref('your_other_model')\n              field: your_other_column\n              meta:\n                ignore_in_erd: 1\n</code></pre></p> <p>Default value: <code>0</code> if the meta config is not specified</p>"},{"location":"nav/metadata/relationship_type.html","title":"Relationship Types","text":""},{"location":"nav/metadata/relationship_type.html#decide-to-enforce-relationship-type","title":"Decide to enforce Relationship Type","text":"<p>Add <code>relationship_type</code> attribute into your test's meta:</p> <pre><code>version: 2\n\nmodels:\n  - name: your_model\n    columns:\n      - name: your_column\n        tests:\n          - relationships:\n              to: ref('your_other_model')\n              field: your_other_column\n              meta:\n                relationship_type: many-to-one\n</code></pre> <p>Default value: <code>many-to-one</code> if the meta config is not specified</p> <p>List of accepted values:</p> Relationship Type Programatic Symbol one-to-many 1n zero-to-many 0n many-to-many nn one-to-one 11 many-to-one n1 Not specified/Invalid value n1 <p>NOTE: Known as we could configure multiple relationship types but in the best practice we should always have <code>many-to-one</code></p>"}]}