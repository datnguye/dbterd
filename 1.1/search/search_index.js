var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Index","text":"<p>../README.md</p>"},{"location":"license.html","title":"License","text":"<p>../LICENSE</p>"},{"location":"nav/development/CHANGELOG.html","title":"Change Log","text":"<p>Check the Github Releases out!</p>"},{"location":"nav/development/contributing-guide.html","title":"Contributing guide","text":"<p>../../../CONTRIBUTING.md</p>"},{"location":"nav/guide/cli-references.html","title":"CLI Reference (dbterd)","text":"<p>Run <code>dbterd --help</code> or <code>dbterd -h</code> to see the basic guideline for CLI Reference</p> Terminal <pre><code>Usage: dbterd [OPTIONS] COMMAND [ARGS]...\n\nTools for producing diagram-as-code\n\nOptions:\n--version   Show the version and exit.\n-h, --help  Show this message and exit.\n\nCommands:\ndebug  Inspect the hidden magics\nrun    Run the convert\n</code></pre>"},{"location":"nav/guide/cli-references.html#run","title":"run","text":"<p>Generate diagram-as-a-code file</p> <p>Supports:</p> <ul> <li>DBML</li> <li>Mermaid</li> </ul> <p>Examples:</p> CLI (within dbt project)--help (-h) <pre><code>dbt docs generate\ndbterd run [-t dbml or -t mermaid]\n</code></pre> <pre><code>Usage: dbterd run [OPTIONS]\n\nRun the convert\n\nOptions:\n    -ad, --artifacts-dir TEXT     Specified the full path to dbt artifacts path\n                                    which known as /target directory  [default:\n                                    C:\\Users\\DAT\\Documents\\Sources\\dbterd\\target]\n    -o, --output TEXT             Output the result file. Default to the same\n                                    target dir  [default:\n                                    C:\\Users\\DAT\\Documents\\Sources\\dbterd\\target]\n    -s, --select TEXT             Selecttion criteria\n    -ns, --exclude TEXT           Exclusion criteria\n    -t, --target TEXT             Target to the diagram-as-code platform\n                                    [default: dbml]\n    -a, --algo TEXT               Specified algorithm in the way to detect\n                                    diagram connectors  [default:\n                                    test_relationship]\n    -mv, --manifest-version TEXT  Specified dbt manifest.json version\n    -rt, --resource-type TEXT     Specified dbt resource type(seed, model,\n                                    source, snapshot),default:model, use examples,\n                                    -rt model -rt source\n    -h, --help                    Show this message and exit.\n</code></pre>"},{"location":"nav/guide/cli-references.html#-artifacts-dir-ad","title":"--artifacts-dir (-ad)","text":"<p>Configure the path to directory containing dbt artifact files.</p> <p>Default to <code>./target</code></p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ad \"./target\"\n</code></pre> <pre><code>dbterd run --artifacts-dir \"./target\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#-output-o","title":"--output (-o)","text":"<p>Configure the path to directory containing the output diagram file.</p> <p>Default to <code>./target</code></p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -o \"./target\"\n</code></pre> <pre><code>dbterd run --output \"./target\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#-select-s","title":"--select (-s)","text":"<p>Selection criteria.</p> <p>Select all dbt models if not specified, supports mulitple options</p> <p>Rules:</p> <ul> <li>By <code>name</code>: model name starts with input string</li> <li>By <code>schema</code>: schema name starts with an input string, formed as <code>schema:&lt;your_schema_name&gt;</code></li> <li>By <code>wildcard</code>: model name matches to a wildcard pattern, formed as <code>wildcard:&lt;your_wildcard&gt;</code></li> </ul> <p>Examples:</p> CLI (by name)CLI (by schema)CLI (by wildcard) <pre><code>dbterd run -s \"model.package_name.model_partital_name\"\n</code></pre> <pre><code>dbterd run -s \"schema:my_schema_name\"\n</code></pre> <pre><code>dbterd run --select \"*xyz\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#and-and-or-logic","title":"<code>AND</code> and <code>OR</code> logic","text":"<ul> <li><code>AND</code> logic is applied to a single selection splitted by comma (,)</li> <li><code>OR</code> logic is applied to 2+ selection</li> </ul> <p>Examples:</p> ANDOR <pre><code># All models belong to 'abc' schema AND also need to match the pattern of '*xyz.*'\ndbterd run -s schema:abc,wildcard:*xyz.*\n</code></pre> <pre><code># All models belong to 'abc' schema, OR match to the pattern of '*xyz.*'\ndbterd run -s schema:abc -s wildcard:*xyz.*\n</code></pre>"},{"location":"nav/guide/cli-references.html#-exclude-ns","title":"--exclude (-ns)","text":"<p>Exclusion criteria. Rules are the same as Selection Criteria.</p> <p>Do not exclude any dbt models if not specified, supports mulitple options</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ns 'model.package_name.table'\n</code></pre> <pre><code>dbterd run --exclude 'model.package_name.table'\n</code></pre>"},{"location":"nav/guide/cli-references.html#-target-t","title":"--target (-t)","text":"<p>Target to the diagram-as-code platform</p> <p>Default to <code>dbml</code></p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -t dbml\n</code></pre> <pre><code>dbterd run --target dbml\n</code></pre>"},{"location":"nav/guide/cli-references.html#-algo-a","title":"--algo (-a)","text":"<p>Specified algorithm in the way to detect diagram connectors</p> <p>Default to <code>test_relationship</code>, currently only supported option</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -a test_relationship\n</code></pre> <pre><code>dbterd run --algo test_relationship\n</code></pre>"},{"location":"nav/guide/cli-references.html#-manifest-version-mv","title":"--manifest-version (-mv)","text":"<p>Specified dbt manifest.json version</p> <p>Auto detect if not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run --manifest-version 7\n</code></pre> <pre><code>dbterd run -mv 7\n</code></pre>"},{"location":"nav/guide/cli-references.html#-resource-type-rt","title":"--resource-type (-rt)","text":"<p>Specified dbt resource type(seed, model, source, snapshot).</p> <p>Default to <code>[\"model\"]</code>, supports mulitple options</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -rt model -rt source\n</code></pre> <pre><code>dbterd run --resource-type model\n</code></pre>"},{"location":"nav/guide/cli-references.html#deprecated-warning","title":"\u26a0 DEPRECATED WARNING","text":""},{"location":"nav/guide/cli-references.html#-manifest-path-mp-deprecated-in-v11","title":"--manifest-path (-mp) (Deprecated in v1.1)","text":"<p>Configure the path to directory containing dbt <code>manifest.json</code> file.</p> <p>Default to <code>./target</code></p>"},{"location":"nav/guide/cli-references.html#debug","title":"debug","text":"<p>Shows hidden configured values</p> <p>Examples:</p> Output <pre><code>2023-04-08 10:15:03,611 - dbterd - INFO - Run with dbterd==0.2.0 (main.py:43)\n2023-04-08 10:15:03,612 - dbterd - INFO - **Arguments used** (main.py:52)\n2023-04-08 10:15:03,613 - dbterd - DEBUG - {\n    \"artifacts_dir\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"manifest_path\": null,\n    \"output\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"select\": null,\n    \"exclude\": null,\n    \"target\": \"dbml\",\n    \"algo\": \"test_relationship\",\n    \"manifest_version\": null,\n    \"resource_type\": [\n        \"model\"\n    ]\n} (main.py:53)\n2023-04-08 10:15:03,614 - dbterd - INFO - **Context used** (main.py:54)\n2023-04-08 10:15:03,614 - dbterd - DEBUG - {} (main.py:55)\n</code></pre>"},{"location":"nav/guide/generate-markdown-mermaid-erd.html","title":"Generate markdown with mermaid ERD inclusive","text":""},{"location":"nav/guide/generate-markdown-mermaid-erd.html#1-generate-mermaid-erd-content","title":"1. Generate mermaid ERD content","text":"<pre><code>dbterd run -t mermaid -ad \"samples/dbtresto\" -o \"target\" -s schema:dbt.mart -ns model.dbt_resto.staging\n# Expected: ./target/output.md\n</code></pre>"},{"location":"nav/guide/generate-markdown-mermaid-erd.html#2-copy-mermaid-to-erdmd","title":"2. Copy mermaid to ERD.md","text":"<pre><code>echo \\`\\`\\`mermaid          &gt;  ./samples/dbtresto/ERD.md\necho ---                    &gt;&gt; ./samples/dbtresto/ERD.md\necho title: Sample ERD      &gt;&gt; ./samples/dbtresto/ERD.md\necho ---                    &gt;&gt; ./samples/dbtresto/ERD.md\ncat ./target/output.md      &gt;&gt; ./samples/dbtresto/ERD.md\necho \\`\\`\\`                 &gt;&gt; ./samples/dbtresto/ERD.md\n</code></pre>"},{"location":"nav/guide/generate-markdown-mermaid-erd.html#3-commit-it-and-check-it-on-github","title":"3. Commit it and check it on Github","text":"<p>Check out the sample output:</p> <p></p>"}]}