{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json",
        "dbt_version": "1.3.4",
        "generated_at": "2023-09-07T07:08:18.637104Z",
        "invocation_id": "a19b106f-7349-42f3-9c02-7ec430316b02",
        "env": {},
        "project_id": "7e5725226745b096b9d098e07314f8db",
        "user_id": null,
        "send_anonymous_usage_stats": false,
        "adapter_type": "sqlserver"
    },
    "nodes": {
        "model.integration_tests.verify_get_table_alias": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_table_alias"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": "\n  verify_get_table_alias\n",
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "config",
                "verify_get_table_alias"
            ],
            "unique_id": "model.integration_tests.verify_get_table_alias",
            "raw_code": "{{\r\n  config(alias=dbt_resto.get_table_alias(this))\r\n}}\r\n\r\nselect  '{{ this.table }}' as actual,\r\n        concat('verify_get_table_alias', '{{ var(\"table_suffix\") }}') as expected",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "config\\verify_get_table_alias.sql",
            "original_file_path": "models\\config\\verify_get_table_alias.sql",
            "name": "verify_get_table_alias",
            "alias": "verify_get_table_alias",
            "checksum": {
                "name": "sha256",
                "checksum": "6c914407b122e05647e1f9903a84b3959d474b9f4764e5365dd1a94364c7f82f"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\config\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\config\\verify_get_table_alias.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "alias": "\n  verify_get_table_alias\n"
            },
            "created_at": 1694070226.0080519,
            "compiled_code": "\n\nselect  'verify_get_table_alias' as actual,\n        concat('verify_get_table_alias', '') as expected",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_table_alias\""
        },
        "model.integration_tests.verify_if_column_value_to_match_regex": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "generic_test",
                "verify_if_column_value_to_match_regex"
            ],
            "unique_id": "model.integration_tests.verify_if_column_value_to_match_regex",
            "raw_code": "select  'this is only test' as text_only,\r\n        '09887216717' as number_only",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "generic_test\\verify_if_column_value_to_match_regex.sql",
            "original_file_path": "models\\generic_test\\verify_if_column_value_to_match_regex.sql",
            "name": "verify_if_column_value_to_match_regex",
            "alias": "verify_if_column_value_to_match_regex",
            "checksum": {
                "name": "sha256",
                "checksum": "9e75e0c3020de24223ee364c37dbd6cbf4d8ffa2bef0a77a13ee98a5a75c2035"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "text_only": {
                    "name": "text_only",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "number_only": {
                    "name": "number_only",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\generic_test\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\generic_test\\verify_if_column_value_to_match_regex.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.026106,
            "compiled_code": "select  'this is only test' as text_only,\r\n        '09887216717' as number_only",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_if_column_value_to_match_regex\""
        },
        "model.integration_tests.verify_materialized_view": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "materialized_view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "time_key",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "materialization",
                "model",
                "verify_materialized_view"
            ],
            "unique_id": "model.integration_tests.verify_materialized_view",
            "raw_code": "{{\r\n  config(\r\n    materialized = 'materialized_view',\r\n    unique_key = 'time_key',\r\n    enabled = (target.type != 'snowflake')\r\n  )\r\n}}\r\n\r\nselect  1 as time_key,\r\n        2 as time_value",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "materialization\\model\\verify_materialized_view.sql",
            "original_file_path": "models\\materialization\\model\\verify_materialized_view.sql",
            "name": "verify_materialized_view",
            "alias": "verify_materialized_view",
            "checksum": {
                "name": "sha256",
                "checksum": "e6a75a3f1ff391febea88fad95d160fd8380c52154393110b57d34cf60dc5a9f"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\materialization\\model\\verify_materialized_view.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "materialized": "materialized_view",
                "unique_key": "time_key",
                "enabled": true
            },
            "created_at": 1694070224.9650486,
            "compiled_code": "\n\nselect  1 as time_key,\n        2 as time_value",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_materialized_view\""
        },
        "model.integration_tests.verify_generate_schema_name": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.generate_schema_name"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "override_default",
                "verify_generate_schema_name"
            ],
            "unique_id": "model.integration_tests.verify_generate_schema_name",
            "raw_code": "select  '{{ dbt_resto.generate_schema_name(\"dat\", model) }}' as actual,\r\n        'dat' as expected\r\n\r\nunion all\r\n\r\nselect  '{{ dbt_resto.generate_schema_name(none, model) }}' as actual,\r\n        '{{ target.schema }}' as expected",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "override_default\\verify_generate_schema_name.sql",
            "original_file_path": "models\\override_default\\verify_generate_schema_name.sql",
            "name": "verify_generate_schema_name",
            "alias": "verify_generate_schema_name",
            "checksum": {
                "name": "sha256",
                "checksum": "bf360be8b8a670db1c23b5fa39cfb30d1a535b5c1c5c8ebf858c2ad54122dea1"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\override_default\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\override_default\\verify_generate_schema_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.0381076,
            "compiled_code": "select  'dat' as actual,\n        'dat' as expected\n\nunion all\n\nselect  'resto' as actual,\n        'resto' as expected",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_generate_schema_name\""
        },
        "model.integration_tests.verify_datepart": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_timestamp",
                    "macro.dbt_resto.datepart"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": [
                    {
                        "sql": "set datefirst 1",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_datepart"
            ],
            "unique_id": "model.integration_tests.verify_datepart",
            "raw_code": "{% if target.name == 'sqlserver' %}\r\n{{\r\n  config(\r\n    pre_hook='set datefirst 1',\r\n    materialized='table'\r\n  )\r\n}}\r\n{% endif %}\r\n\r\nwith data as (\r\n  select cast('2022-03-25 14:55:45' as {{ dbt_resto.type_timestamp() }}) as input\r\n)\r\nselect input, 'year' as date_part,          {{ dbt_resto.datepart('input', 'year') }} as actual,          2022 as expected from data union all\r\nselect input, 'month' as date_part,         {{ dbt_resto.datepart('input', 'month') }} as actual,         3 as expected from data union all\r\nselect input, 'day' as date_part,           {{ dbt_resto.datepart('input', 'day') }} as actual,           25 as expected from data union all\r\nselect input, 'dayofweek' as date_part,     {{ dbt_resto.datepart('input', 'dayofweek') }} as actual,     5 as expected from data union all\r\nselect input, 'dayofyear' as date_part,     {{ dbt_resto.datepart('input', 'dayofyear') }} as actual,     84 as expected from data union all\r\nselect input, 'week' as date_part,          {{ dbt_resto.datepart('input', 'week') }} as actual,          12 as expected from data union all\r\nselect input, 'quarter' as date_part,       {{ dbt_resto.datepart('input', 'quarter') }} as actual,       1 as expected from data union all\r\n\r\nselect input, 'hour' as date_part,          {{ dbt_resto.datepart('input', 'hour') }} as actual,          14 as expected from data union all\r\nselect input, 'minute' as date_part,        {{ dbt_resto.datepart('input', 'minute') }} as actual,        55 as expected from data union all\r\nselect input, 'second' as date_part,        {{ dbt_resto.datepart('input', 'second') }} as actual,        45 as expected from data",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_datepart.sql",
            "original_file_path": "models\\sql\\datetime\\verify_datepart.sql",
            "name": "verify_datepart",
            "alias": "verify_datepart",
            "checksum": {
                "name": "sha256",
                "checksum": "b8addc026406b1086ccefb17459beb4fc5dab6072f50af4768562f55e0702aa7"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_datepart.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "materialized": "table",
                "pre-hook": [
                    "set datefirst 1"
                ]
            },
            "created_at": 1694070226.0441043,
            "compiled_code": "\n\n\n\nwith data as (\n  select cast('2022-03-25 14:55:45' as datetime) as input\n)\nselect input, 'year' as date_part,          \n    datepart(year, input)\n\n\n as actual,          2022 as expected from data union all\nselect input, 'month' as date_part,         \n    datepart(month, input)\n\n\n as actual,         3 as expected from data union all\nselect input, 'day' as date_part,           \n    datepart(day, input)\n\n\n as actual,           25 as expected from data union all\nselect input, 'dayofweek' as date_part,     \n    datepart(weekday, input)\n\n\n as actual,     5 as expected from data union all\nselect input, 'dayofyear' as date_part,     \n    datepart(dayofyear, input)\n\n\n as actual,     84 as expected from data union all\nselect input, 'week' as date_part,          \n    datepart(iso_week, input)\n\n\n as actual,          12 as expected from data union all\nselect input, 'quarter' as date_part,       \n    datepart(quarter, input)\n\n\n as actual,       1 as expected from data union all\n\nselect input, 'hour' as date_part,          \n    datepart(hour, input)\n\n\n as actual,          14 as expected from data union all\nselect input, 'minute' as date_part,        \n    datepart(minute, input)\n\n\n as actual,        55 as expected from data union all\nselect input, 'second' as date_part,        \n    datepart(second, input)\n\n\n as actual,        45 as expected from data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_datepart\""
        },
        "model.integration_tests.verify_get_base_times_hour": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_base_times"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_base_times_hour"
            ],
            "unique_id": "model.integration_tests.verify_get_base_times_hour",
            "raw_code": "{{ dbt_resto.get_base_times() }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_base_times_hour.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_base_times_hour.sql",
            "name": "verify_get_base_times_hour",
            "alias": "verify_get_base_times_hour",
            "checksum": {
                "name": "sha256",
                "checksum": "a8581febde8b30179f0710224d04918577f1e25f928fed2982bc5f4c190dde74"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "time_value": {
                    "name": "time_value",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_base_times_hour.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.046112,
            "compiled_code": "\n    \n\n    \n      select dateadd(hour, 0, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 1, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 2, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 3, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 4, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 5, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 6, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 7, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 8, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 9, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 10, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 11, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 12, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 13, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 14, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 15, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 16, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 17, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 18, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 19, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 20, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 21, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 22, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 23, '1970-01-01') as time_value\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_base_times_hour\""
        },
        "model.integration_tests.verify_get_base_times_minute": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_base_times"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_base_times_minute"
            ],
            "unique_id": "model.integration_tests.verify_get_base_times_minute",
            "raw_code": "{{ dbt_resto.get_base_times(level='minute') }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_base_times_minute.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_base_times_minute.sql",
            "name": "verify_get_base_times_minute",
            "alias": "verify_get_base_times_minute",
            "checksum": {
                "name": "sha256",
                "checksum": "5974b3d15a155f77e587c49e42a1ece376ec58d6e9febab467ce805f394242e5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "time_value": {
                    "name": "time_value",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_base_times_minute.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.046112,
            "compiled_code": "\n    \n\n    \n      select dateadd(minute, 0, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 2, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 3, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 4, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 5, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 6, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 7, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 8, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 9, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 10, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 11, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 12, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 13, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 14, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 15, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 16, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 17, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 18, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 19, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 20, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 21, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 22, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 23, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 24, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 25, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 26, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 27, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 28, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 29, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 30, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 31, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 32, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 33, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 34, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 35, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 36, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 37, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 38, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 39, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 40, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 41, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 42, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 43, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 44, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 45, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 46, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 47, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 48, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 49, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 50, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 51, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 52, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 53, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 54, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 55, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 56, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 57, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 58, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 59, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 60, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 61, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 62, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 63, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 64, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 65, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 66, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 67, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 68, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 69, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 70, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 71, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 72, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 73, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 74, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 75, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 76, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 77, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 78, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 79, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 80, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 81, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 82, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 83, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 84, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 85, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 86, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 87, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 88, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 89, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 90, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 91, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 92, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 93, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 94, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 95, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 96, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 97, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 98, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 99, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 100, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 101, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 102, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 103, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 104, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 105, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 106, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 107, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 108, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 109, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 110, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 111, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 112, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 113, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 114, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 115, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 116, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 117, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 118, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 119, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 120, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 121, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 122, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 123, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 124, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 125, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 126, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 127, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 128, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 129, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 130, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 131, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 132, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 133, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 134, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 135, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 136, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 137, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 138, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 139, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 140, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 141, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 142, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 143, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 144, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 145, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 146, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 147, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 148, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 149, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 150, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 151, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 152, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 153, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 154, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 155, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 156, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 157, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 158, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 159, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 160, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 161, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 162, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 163, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 164, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 165, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 166, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 167, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 168, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 169, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 170, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 171, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 172, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 173, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 174, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 175, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 176, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 177, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 178, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 179, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 180, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 181, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 182, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 183, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 184, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 185, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 186, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 187, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 188, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 189, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 190, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 191, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 192, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 193, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 194, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 195, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 196, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 197, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 198, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 199, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 200, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 201, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 202, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 203, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 204, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 205, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 206, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 207, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 208, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 209, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 210, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 211, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 212, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 213, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 214, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 215, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 216, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 217, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 218, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 219, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 220, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 221, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 222, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 223, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 224, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 225, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 226, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 227, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 228, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 229, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 230, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 231, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 232, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 233, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 234, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 235, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 236, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 237, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 238, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 239, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 240, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 241, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 242, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 243, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 244, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 245, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 246, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 247, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 248, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 249, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 250, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 251, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 252, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 253, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 254, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 255, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 256, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 257, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 258, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 259, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 260, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 261, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 262, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 263, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 264, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 265, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 266, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 267, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 268, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 269, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 270, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 271, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 272, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 273, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 274, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 275, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 276, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 277, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 278, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 279, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 280, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 281, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 282, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 283, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 284, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 285, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 286, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 287, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 288, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 289, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 290, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 291, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 292, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 293, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 294, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 295, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 296, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 297, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 298, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 299, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 300, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 301, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 302, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 303, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 304, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 305, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 306, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 307, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 308, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 309, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 310, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 311, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 312, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 313, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 314, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 315, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 316, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 317, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 318, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 319, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 320, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 321, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 322, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 323, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 324, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 325, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 326, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 327, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 328, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 329, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 330, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 331, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 332, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 333, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 334, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 335, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 336, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 337, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 338, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 339, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 340, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 341, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 342, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 343, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 344, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 345, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 346, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 347, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 348, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 349, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 350, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 351, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 352, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 353, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 354, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 355, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 356, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 357, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 358, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 359, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 360, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 361, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 362, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 363, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 364, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 365, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 366, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 367, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 368, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 369, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 370, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 371, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 372, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 373, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 374, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 375, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 376, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 377, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 378, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 379, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 380, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 381, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 382, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 383, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 384, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 385, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 386, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 387, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 388, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 389, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 390, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 391, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 392, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 393, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 394, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 395, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 396, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 397, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 398, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 399, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 400, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 401, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 402, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 403, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 404, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 405, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 406, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 407, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 408, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 409, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 410, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 411, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 412, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 413, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 414, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 415, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 416, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 417, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 418, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 419, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 420, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 421, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 422, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 423, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 424, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 425, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 426, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 427, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 428, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 429, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 430, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 431, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 432, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 433, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 434, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 435, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 436, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 437, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 438, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 439, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 440, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 441, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 442, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 443, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 444, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 445, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 446, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 447, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 448, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 449, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 450, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 451, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 452, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 453, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 454, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 455, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 456, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 457, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 458, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 459, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 460, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 461, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 462, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 463, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 464, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 465, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 466, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 467, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 468, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 469, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 470, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 471, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 472, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 473, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 474, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 475, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 476, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 477, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 478, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 479, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 480, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 481, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 482, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 483, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 484, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 485, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 486, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 487, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 488, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 489, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 490, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 491, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 492, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 493, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 494, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 495, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 496, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 497, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 498, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 499, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 500, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 501, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 502, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 503, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 504, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 505, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 506, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 507, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 508, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 509, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 510, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 511, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 512, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 513, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 514, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 515, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 516, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 517, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 518, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 519, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 520, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 521, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 522, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 523, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 524, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 525, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 526, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 527, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 528, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 529, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 530, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 531, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 532, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 533, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 534, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 535, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 536, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 537, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 538, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 539, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 540, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 541, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 542, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 543, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 544, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 545, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 546, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 547, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 548, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 549, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 550, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 551, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 552, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 553, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 554, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 555, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 556, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 557, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 558, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 559, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 560, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 561, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 562, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 563, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 564, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 565, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 566, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 567, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 568, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 569, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 570, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 571, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 572, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 573, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 574, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 575, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 576, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 577, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 578, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 579, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 580, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 581, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 582, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 583, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 584, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 585, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 586, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 587, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 588, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 589, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 590, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 591, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 592, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 593, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 594, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 595, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 596, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 597, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 598, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 599, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 600, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 601, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 602, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 603, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 604, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 605, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 606, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 607, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 608, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 609, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 610, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 611, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 612, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 613, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 614, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 615, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 616, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 617, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 618, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 619, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 620, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 621, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 622, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 623, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 624, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 625, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 626, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 627, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 628, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 629, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 630, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 631, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 632, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 633, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 634, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 635, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 636, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 637, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 638, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 639, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 640, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 641, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 642, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 643, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 644, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 645, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 646, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 647, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 648, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 649, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 650, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 651, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 652, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 653, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 654, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 655, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 656, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 657, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 658, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 659, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 660, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 661, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 662, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 663, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 664, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 665, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 666, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 667, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 668, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 669, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 670, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 671, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 672, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 673, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 674, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 675, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 676, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 677, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 678, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 679, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 680, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 681, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 682, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 683, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 684, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 685, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 686, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 687, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 688, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 689, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 690, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 691, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 692, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 693, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 694, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 695, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 696, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 697, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 698, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 699, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 700, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 701, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 702, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 703, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 704, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 705, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 706, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 707, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 708, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 709, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 710, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 711, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 712, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 713, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 714, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 715, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 716, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 717, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 718, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 719, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 720, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 721, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 722, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 723, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 724, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 725, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 726, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 727, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 728, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 729, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 730, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 731, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 732, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 733, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 734, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 735, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 736, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 737, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 738, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 739, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 740, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 741, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 742, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 743, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 744, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 745, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 746, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 747, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 748, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 749, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 750, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 751, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 752, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 753, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 754, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 755, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 756, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 757, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 758, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 759, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 760, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 761, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 762, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 763, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 764, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 765, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 766, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 767, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 768, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 769, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 770, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 771, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 772, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 773, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 774, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 775, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 776, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 777, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 778, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 779, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 780, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 781, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 782, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 783, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 784, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 785, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 786, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 787, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 788, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 789, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 790, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 791, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 792, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 793, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 794, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 795, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 796, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 797, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 798, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 799, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 800, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 801, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 802, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 803, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 804, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 805, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 806, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 807, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 808, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 809, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 810, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 811, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 812, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 813, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 814, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 815, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 816, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 817, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 818, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 819, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 820, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 821, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 822, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 823, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 824, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 825, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 826, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 827, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 828, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 829, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 830, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 831, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 832, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 833, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 834, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 835, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 836, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 837, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 838, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 839, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 840, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 841, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 842, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 843, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 844, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 845, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 846, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 847, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 848, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 849, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 850, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 851, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 852, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 853, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 854, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 855, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 856, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 857, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 858, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 859, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 860, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 861, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 862, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 863, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 864, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 865, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 866, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 867, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 868, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 869, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 870, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 871, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 872, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 873, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 874, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 875, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 876, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 877, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 878, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 879, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 880, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 881, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 882, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 883, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 884, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 885, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 886, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 887, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 888, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 889, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 890, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 891, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 892, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 893, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 894, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 895, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 896, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 897, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 898, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 899, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 900, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 901, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 902, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 903, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 904, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 905, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 906, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 907, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 908, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 909, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 910, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 911, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 912, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 913, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 914, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 915, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 916, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 917, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 918, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 919, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 920, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 921, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 922, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 923, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 924, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 925, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 926, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 927, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 928, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 929, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 930, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 931, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 932, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 933, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 934, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 935, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 936, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 937, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 938, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 939, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 940, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 941, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 942, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 943, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 944, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 945, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 946, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 947, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 948, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 949, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 950, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 951, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 952, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 953, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 954, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 955, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 956, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 957, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 958, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 959, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 960, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 961, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 962, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 963, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 964, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 965, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 966, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 967, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 968, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 969, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 970, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 971, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 972, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 973, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 974, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 975, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 976, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 977, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 978, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 979, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 980, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 981, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 982, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 983, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 984, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 985, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 986, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 987, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 988, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 989, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 990, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 991, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 992, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 993, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 994, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 995, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 996, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 997, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 998, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 999, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1000, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1001, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1002, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1003, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1004, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1005, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1006, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1007, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1008, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1009, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1010, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1011, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1012, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1013, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1014, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1015, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1016, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1017, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1018, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1019, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1020, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1021, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1022, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1023, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1024, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1025, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1026, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1027, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1028, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1029, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1030, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1031, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1032, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1033, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1034, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1035, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1036, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1037, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1038, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1039, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1040, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1041, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1042, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1043, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1044, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1045, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1046, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1047, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1048, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1049, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1050, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1051, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1052, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1053, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1054, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1055, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1056, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1057, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1058, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1059, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1060, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1061, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1062, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1063, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1064, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1065, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1066, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1067, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1068, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1069, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1070, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1071, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1072, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1073, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1074, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1075, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1076, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1077, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1078, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1079, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1080, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1081, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1082, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1083, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1084, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1085, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1086, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1087, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1088, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1089, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1090, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1091, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1092, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1093, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1094, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1095, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1096, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1097, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1098, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1099, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1100, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1101, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1102, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1103, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1104, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1105, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1106, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1107, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1108, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1109, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1110, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1111, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1112, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1113, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1114, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1115, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1116, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1117, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1118, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1119, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1120, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1121, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1122, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1123, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1124, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1125, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1126, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1127, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1128, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1129, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1130, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1131, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1132, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1133, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1134, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1135, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1136, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1137, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1138, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1139, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1140, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1141, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1142, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1143, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1144, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1145, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1146, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1147, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1148, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1149, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1150, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1151, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1152, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1153, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1154, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1155, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1156, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1157, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1158, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1159, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1160, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1161, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1162, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1163, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1164, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1165, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1166, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1167, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1168, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1169, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1170, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1171, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1172, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1173, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1174, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1175, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1176, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1177, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1178, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1179, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1180, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1181, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1182, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1183, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1184, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1185, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1186, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1187, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1188, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1189, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1190, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1191, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1192, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1193, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1194, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1195, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1196, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1197, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1198, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1199, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1200, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1201, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1202, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1203, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1204, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1205, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1206, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1207, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1208, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1209, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1210, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1211, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1212, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1213, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1214, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1215, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1216, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1217, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1218, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1219, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1220, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1221, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1222, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1223, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1224, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1225, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1226, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1227, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1228, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1229, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1230, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1231, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1232, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1233, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1234, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1235, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1236, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1237, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1238, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1239, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1240, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1241, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1242, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1243, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1244, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1245, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1246, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1247, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1248, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1249, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1250, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1251, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1252, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1253, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1254, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1255, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1256, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1257, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1258, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1259, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1260, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1261, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1262, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1263, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1264, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1265, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1266, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1267, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1268, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1269, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1270, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1271, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1272, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1273, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1274, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1275, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1276, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1277, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1278, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1279, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1280, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1281, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1282, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1283, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1284, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1285, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1286, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1287, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1288, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1289, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1290, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1291, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1292, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1293, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1294, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1295, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1296, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1297, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1298, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1299, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1300, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1301, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1302, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1303, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1304, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1305, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1306, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1307, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1308, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1309, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1310, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1311, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1312, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1313, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1314, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1315, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1316, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1317, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1318, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1319, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1320, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1321, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1322, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1323, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1324, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1325, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1326, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1327, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1328, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1329, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1330, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1331, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1332, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1333, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1334, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1335, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1336, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1337, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1338, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1339, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1340, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1341, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1342, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1343, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1344, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1345, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1346, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1347, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1348, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1349, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1350, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1351, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1352, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1353, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1354, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1355, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1356, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1357, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1358, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1359, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1360, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1361, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1362, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1363, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1364, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1365, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1366, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1367, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1368, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1369, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1370, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1371, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1372, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1373, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1374, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1375, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1376, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1377, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1378, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1379, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1380, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1381, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1382, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1383, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1384, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1385, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1386, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1387, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1388, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1389, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1390, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1391, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1392, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1393, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1394, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1395, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1396, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1397, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1398, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1399, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1400, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1401, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1402, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1403, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1404, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1405, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1406, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1407, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1408, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1409, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1410, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1411, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1412, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1413, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1414, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1415, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1416, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1417, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1418, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1419, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1420, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1421, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1422, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1423, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1424, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1425, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1426, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1427, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1428, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1429, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1430, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1431, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1432, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1433, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1434, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1435, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1436, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1437, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1438, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1439, '1970-01-01') as time_value\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_base_times_minute\""
        },
        "model.integration_tests.verify_get_base_times_second": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_base_times"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_base_times_second"
            ],
            "unique_id": "model.integration_tests.verify_get_base_times_second",
            "raw_code": "{{\r\n  config(\r\n    enabled = target.type not in ['postgres'],\r\n  )\r\n}}\r\n\r\n{{ dbt_resto.get_base_times(level='second') }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_base_times_second.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_base_times_second.sql",
            "name": "verify_get_base_times_second",
            "alias": "verify_get_base_times_second",
            "checksum": {
                "name": "sha256",
                "checksum": "a879abd5070748e2c257b2b44e68a506cbf801a64a219dc63a05a2b4b2199895"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "time_value": {
                    "name": "time_value",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_base_times_second.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "enabled": true
            },
            "created_at": 1694070226.047114,
            "compiled_code": "\n\n\n    \n    \n    with E1(N) as\n    (\n      select 1 union all select 1 union all select 1 union all\n      select 1 union all select 1 union all select 1 union all\n      select 1 union all select 1 union all select 1 union all select 1\n    ) --10E+1 or 10 rows\n    ,E2(N) as\n    (\n      select 1 from E1 a, E1 b\n    ) --10E+2 or 100 rows\n    ,E3(N) as\n    (\n      select 1 from E2 a, E2 b\n    ) --10E+4 or 10,000 rows\n    ,E4(N) as\n    (\n      select 1 FROM E3 a, E3 b\n    ) --10E+8 or 100,000,000 rows\n    ,EALL as (\n      select   top 86400 \n              N,\n              row_number() over (order by N) as value\n      from    E4\n      order by 2\n      \n    )\n    select  dateadd(second, value, '1970-01-01') as time_value\n    from    EALL\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_base_times_second\""
        },
        "model.integration_tests.verify_get_time_dimension_hour": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_time_dimension"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_time_dimension_hour"
            ],
            "unique_id": "model.integration_tests.verify_get_time_dimension_hour",
            "raw_code": "{{ dbt_resto.get_time_dimension() }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_time_dimension_hour.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.sql",
            "name": "verify_get_time_dimension_hour",
            "alias": "verify_get_time_dimension_hour",
            "checksum": {
                "name": "sha256",
                "checksum": "c893c08b0fbefa05770b3494bab4aaae2670bde1c244f2ef169c73da7b1ba4f5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "time_key": {
                    "name": "time_key",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "time_value": {
                    "name": "time_value",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "time_string": {
                    "name": "time_string",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "time24_string": {
                    "name": "time24_string",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "hour_number": {
                    "name": "hour_number",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "hour_name": {
                    "name": "hour_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "hour24_number": {
                    "name": "hour24_number",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "hour24_name": {
                    "name": "hour24_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.103808,
            "compiled_code": "\n  \n\nwith base_times as (\n\n  \n    \n\n    \n      select dateadd(hour, 0, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 1, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 2, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 3, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 4, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 5, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 6, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 7, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 8, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 9, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 10, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 11, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 12, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 13, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 14, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 15, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 16, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 17, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 18, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 19, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 20, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 21, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 22, '1970-01-01') as time_value\n        union all\n      select dateadd(hour, 23, '1970-01-01') as time_value\n\n\n\n)\n\nselect    time_value,--string of HH:MM:SS\n          concat(\n            \n  format(time_value, 'hhmmss')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as time_string, --string of HH:MM:SS AM/PM\n          \n  format(time_value, 'HHmmss')\n\n\n as time24_string,--string of HH:MM:SS\n\n          case\n            when cast(\n    datepart(hour, time_value)\n\n\n as int) > 12\n              then  cast(\n    datepart(hour, time_value)\n\n\n as int) - 12\n            else    cast(\n    datepart(hour, time_value)\n\n\n as int)\n          end as hour_number,\n          concat(\n            \n  format(time_value, 'hh0000')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as hour_name, --string of HH:00:00 AM/PM\n          cast(\n    datepart(hour, time_value)\n\n\n as int) as hour24_number,\n          \n  format(time_value, 'HH0000')\n\n\n as hour24_name, --string of HH:00:00\n\n          cast(\n  format(time_value, 'HHmmss')\n\n\n as bigint) as time_key --number of HHMMSS\n\nfrom      base_times\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_time_dimension_hour\""
        },
        "model.integration_tests.verify_get_time_dimension_minute": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_time_dimension"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_time_dimension_minute"
            ],
            "unique_id": "model.integration_tests.verify_get_time_dimension_minute",
            "raw_code": "{{\r\n  config(\r\n    materialized = ('table' if target.type in ['postgres'] else 'view'),\r\n  )\r\n}}\r\n\r\n{{ dbt_resto.get_time_dimension(level='minute') }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_time_dimension_minute.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.sql",
            "name": "verify_get_time_dimension_minute",
            "alias": "verify_get_time_dimension_minute",
            "checksum": {
                "name": "sha256",
                "checksum": "857674b9a8caac24d4d2f041e14da3b2b254531e5cc5a4437f8eedbf45e6aa0a"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "time_key": {
                    "name": "time_key",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "minute_number": {
                    "name": "minute_number",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "hour_minute_name": {
                    "name": "hour_minute_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "hour24_minute_name": {
                    "name": "hour24_minute_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "materialized": "view"
            },
            "created_at": 1694070226.219361,
            "compiled_code": "\n\n\n  \n\nwith base_times as (\n\n  \n    \n\n    \n      select dateadd(minute, 0, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 2, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 3, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 4, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 5, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 6, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 7, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 8, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 9, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 10, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 11, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 12, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 13, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 14, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 15, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 16, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 17, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 18, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 19, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 20, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 21, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 22, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 23, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 24, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 25, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 26, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 27, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 28, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 29, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 30, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 31, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 32, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 33, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 34, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 35, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 36, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 37, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 38, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 39, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 40, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 41, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 42, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 43, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 44, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 45, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 46, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 47, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 48, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 49, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 50, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 51, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 52, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 53, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 54, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 55, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 56, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 57, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 58, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 59, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 60, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 61, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 62, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 63, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 64, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 65, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 66, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 67, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 68, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 69, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 70, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 71, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 72, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 73, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 74, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 75, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 76, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 77, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 78, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 79, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 80, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 81, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 82, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 83, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 84, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 85, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 86, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 87, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 88, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 89, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 90, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 91, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 92, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 93, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 94, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 95, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 96, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 97, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 98, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 99, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 100, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 101, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 102, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 103, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 104, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 105, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 106, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 107, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 108, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 109, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 110, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 111, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 112, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 113, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 114, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 115, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 116, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 117, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 118, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 119, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 120, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 121, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 122, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 123, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 124, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 125, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 126, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 127, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 128, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 129, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 130, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 131, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 132, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 133, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 134, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 135, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 136, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 137, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 138, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 139, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 140, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 141, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 142, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 143, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 144, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 145, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 146, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 147, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 148, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 149, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 150, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 151, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 152, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 153, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 154, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 155, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 156, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 157, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 158, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 159, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 160, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 161, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 162, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 163, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 164, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 165, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 166, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 167, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 168, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 169, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 170, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 171, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 172, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 173, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 174, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 175, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 176, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 177, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 178, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 179, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 180, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 181, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 182, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 183, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 184, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 185, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 186, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 187, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 188, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 189, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 190, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 191, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 192, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 193, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 194, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 195, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 196, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 197, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 198, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 199, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 200, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 201, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 202, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 203, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 204, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 205, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 206, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 207, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 208, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 209, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 210, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 211, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 212, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 213, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 214, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 215, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 216, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 217, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 218, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 219, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 220, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 221, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 222, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 223, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 224, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 225, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 226, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 227, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 228, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 229, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 230, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 231, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 232, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 233, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 234, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 235, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 236, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 237, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 238, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 239, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 240, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 241, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 242, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 243, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 244, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 245, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 246, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 247, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 248, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 249, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 250, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 251, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 252, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 253, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 254, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 255, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 256, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 257, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 258, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 259, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 260, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 261, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 262, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 263, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 264, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 265, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 266, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 267, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 268, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 269, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 270, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 271, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 272, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 273, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 274, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 275, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 276, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 277, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 278, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 279, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 280, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 281, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 282, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 283, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 284, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 285, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 286, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 287, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 288, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 289, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 290, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 291, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 292, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 293, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 294, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 295, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 296, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 297, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 298, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 299, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 300, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 301, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 302, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 303, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 304, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 305, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 306, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 307, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 308, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 309, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 310, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 311, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 312, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 313, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 314, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 315, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 316, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 317, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 318, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 319, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 320, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 321, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 322, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 323, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 324, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 325, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 326, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 327, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 328, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 329, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 330, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 331, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 332, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 333, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 334, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 335, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 336, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 337, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 338, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 339, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 340, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 341, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 342, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 343, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 344, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 345, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 346, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 347, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 348, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 349, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 350, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 351, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 352, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 353, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 354, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 355, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 356, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 357, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 358, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 359, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 360, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 361, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 362, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 363, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 364, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 365, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 366, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 367, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 368, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 369, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 370, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 371, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 372, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 373, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 374, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 375, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 376, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 377, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 378, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 379, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 380, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 381, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 382, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 383, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 384, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 385, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 386, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 387, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 388, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 389, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 390, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 391, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 392, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 393, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 394, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 395, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 396, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 397, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 398, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 399, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 400, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 401, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 402, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 403, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 404, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 405, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 406, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 407, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 408, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 409, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 410, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 411, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 412, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 413, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 414, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 415, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 416, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 417, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 418, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 419, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 420, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 421, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 422, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 423, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 424, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 425, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 426, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 427, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 428, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 429, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 430, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 431, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 432, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 433, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 434, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 435, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 436, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 437, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 438, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 439, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 440, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 441, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 442, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 443, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 444, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 445, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 446, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 447, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 448, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 449, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 450, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 451, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 452, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 453, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 454, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 455, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 456, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 457, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 458, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 459, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 460, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 461, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 462, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 463, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 464, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 465, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 466, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 467, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 468, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 469, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 470, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 471, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 472, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 473, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 474, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 475, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 476, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 477, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 478, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 479, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 480, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 481, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 482, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 483, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 484, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 485, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 486, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 487, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 488, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 489, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 490, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 491, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 492, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 493, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 494, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 495, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 496, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 497, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 498, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 499, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 500, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 501, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 502, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 503, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 504, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 505, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 506, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 507, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 508, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 509, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 510, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 511, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 512, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 513, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 514, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 515, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 516, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 517, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 518, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 519, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 520, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 521, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 522, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 523, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 524, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 525, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 526, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 527, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 528, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 529, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 530, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 531, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 532, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 533, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 534, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 535, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 536, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 537, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 538, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 539, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 540, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 541, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 542, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 543, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 544, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 545, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 546, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 547, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 548, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 549, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 550, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 551, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 552, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 553, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 554, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 555, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 556, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 557, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 558, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 559, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 560, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 561, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 562, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 563, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 564, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 565, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 566, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 567, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 568, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 569, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 570, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 571, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 572, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 573, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 574, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 575, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 576, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 577, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 578, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 579, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 580, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 581, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 582, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 583, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 584, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 585, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 586, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 587, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 588, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 589, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 590, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 591, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 592, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 593, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 594, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 595, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 596, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 597, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 598, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 599, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 600, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 601, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 602, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 603, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 604, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 605, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 606, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 607, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 608, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 609, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 610, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 611, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 612, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 613, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 614, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 615, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 616, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 617, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 618, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 619, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 620, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 621, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 622, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 623, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 624, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 625, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 626, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 627, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 628, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 629, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 630, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 631, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 632, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 633, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 634, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 635, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 636, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 637, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 638, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 639, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 640, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 641, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 642, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 643, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 644, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 645, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 646, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 647, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 648, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 649, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 650, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 651, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 652, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 653, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 654, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 655, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 656, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 657, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 658, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 659, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 660, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 661, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 662, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 663, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 664, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 665, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 666, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 667, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 668, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 669, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 670, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 671, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 672, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 673, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 674, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 675, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 676, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 677, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 678, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 679, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 680, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 681, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 682, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 683, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 684, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 685, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 686, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 687, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 688, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 689, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 690, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 691, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 692, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 693, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 694, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 695, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 696, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 697, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 698, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 699, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 700, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 701, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 702, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 703, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 704, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 705, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 706, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 707, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 708, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 709, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 710, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 711, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 712, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 713, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 714, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 715, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 716, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 717, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 718, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 719, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 720, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 721, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 722, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 723, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 724, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 725, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 726, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 727, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 728, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 729, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 730, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 731, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 732, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 733, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 734, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 735, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 736, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 737, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 738, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 739, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 740, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 741, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 742, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 743, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 744, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 745, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 746, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 747, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 748, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 749, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 750, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 751, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 752, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 753, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 754, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 755, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 756, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 757, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 758, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 759, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 760, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 761, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 762, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 763, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 764, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 765, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 766, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 767, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 768, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 769, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 770, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 771, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 772, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 773, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 774, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 775, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 776, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 777, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 778, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 779, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 780, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 781, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 782, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 783, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 784, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 785, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 786, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 787, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 788, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 789, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 790, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 791, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 792, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 793, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 794, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 795, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 796, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 797, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 798, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 799, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 800, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 801, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 802, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 803, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 804, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 805, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 806, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 807, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 808, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 809, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 810, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 811, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 812, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 813, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 814, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 815, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 816, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 817, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 818, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 819, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 820, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 821, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 822, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 823, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 824, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 825, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 826, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 827, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 828, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 829, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 830, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 831, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 832, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 833, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 834, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 835, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 836, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 837, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 838, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 839, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 840, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 841, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 842, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 843, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 844, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 845, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 846, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 847, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 848, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 849, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 850, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 851, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 852, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 853, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 854, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 855, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 856, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 857, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 858, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 859, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 860, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 861, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 862, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 863, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 864, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 865, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 866, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 867, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 868, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 869, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 870, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 871, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 872, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 873, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 874, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 875, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 876, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 877, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 878, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 879, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 880, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 881, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 882, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 883, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 884, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 885, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 886, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 887, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 888, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 889, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 890, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 891, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 892, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 893, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 894, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 895, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 896, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 897, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 898, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 899, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 900, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 901, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 902, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 903, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 904, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 905, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 906, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 907, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 908, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 909, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 910, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 911, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 912, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 913, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 914, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 915, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 916, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 917, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 918, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 919, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 920, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 921, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 922, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 923, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 924, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 925, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 926, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 927, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 928, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 929, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 930, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 931, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 932, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 933, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 934, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 935, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 936, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 937, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 938, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 939, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 940, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 941, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 942, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 943, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 944, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 945, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 946, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 947, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 948, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 949, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 950, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 951, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 952, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 953, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 954, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 955, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 956, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 957, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 958, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 959, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 960, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 961, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 962, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 963, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 964, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 965, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 966, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 967, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 968, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 969, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 970, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 971, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 972, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 973, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 974, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 975, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 976, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 977, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 978, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 979, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 980, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 981, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 982, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 983, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 984, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 985, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 986, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 987, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 988, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 989, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 990, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 991, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 992, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 993, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 994, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 995, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 996, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 997, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 998, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 999, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1000, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1001, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1002, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1003, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1004, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1005, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1006, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1007, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1008, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1009, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1010, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1011, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1012, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1013, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1014, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1015, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1016, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1017, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1018, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1019, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1020, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1021, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1022, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1023, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1024, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1025, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1026, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1027, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1028, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1029, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1030, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1031, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1032, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1033, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1034, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1035, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1036, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1037, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1038, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1039, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1040, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1041, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1042, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1043, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1044, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1045, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1046, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1047, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1048, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1049, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1050, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1051, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1052, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1053, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1054, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1055, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1056, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1057, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1058, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1059, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1060, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1061, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1062, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1063, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1064, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1065, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1066, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1067, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1068, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1069, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1070, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1071, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1072, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1073, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1074, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1075, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1076, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1077, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1078, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1079, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1080, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1081, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1082, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1083, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1084, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1085, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1086, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1087, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1088, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1089, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1090, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1091, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1092, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1093, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1094, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1095, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1096, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1097, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1098, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1099, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1100, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1101, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1102, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1103, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1104, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1105, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1106, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1107, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1108, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1109, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1110, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1111, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1112, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1113, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1114, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1115, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1116, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1117, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1118, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1119, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1120, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1121, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1122, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1123, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1124, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1125, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1126, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1127, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1128, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1129, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1130, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1131, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1132, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1133, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1134, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1135, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1136, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1137, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1138, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1139, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1140, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1141, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1142, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1143, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1144, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1145, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1146, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1147, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1148, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1149, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1150, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1151, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1152, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1153, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1154, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1155, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1156, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1157, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1158, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1159, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1160, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1161, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1162, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1163, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1164, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1165, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1166, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1167, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1168, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1169, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1170, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1171, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1172, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1173, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1174, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1175, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1176, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1177, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1178, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1179, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1180, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1181, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1182, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1183, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1184, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1185, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1186, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1187, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1188, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1189, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1190, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1191, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1192, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1193, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1194, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1195, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1196, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1197, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1198, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1199, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1200, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1201, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1202, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1203, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1204, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1205, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1206, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1207, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1208, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1209, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1210, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1211, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1212, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1213, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1214, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1215, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1216, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1217, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1218, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1219, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1220, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1221, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1222, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1223, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1224, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1225, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1226, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1227, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1228, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1229, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1230, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1231, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1232, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1233, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1234, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1235, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1236, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1237, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1238, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1239, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1240, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1241, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1242, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1243, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1244, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1245, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1246, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1247, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1248, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1249, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1250, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1251, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1252, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1253, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1254, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1255, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1256, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1257, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1258, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1259, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1260, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1261, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1262, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1263, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1264, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1265, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1266, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1267, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1268, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1269, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1270, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1271, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1272, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1273, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1274, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1275, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1276, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1277, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1278, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1279, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1280, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1281, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1282, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1283, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1284, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1285, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1286, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1287, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1288, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1289, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1290, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1291, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1292, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1293, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1294, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1295, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1296, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1297, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1298, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1299, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1300, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1301, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1302, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1303, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1304, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1305, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1306, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1307, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1308, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1309, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1310, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1311, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1312, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1313, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1314, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1315, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1316, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1317, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1318, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1319, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1320, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1321, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1322, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1323, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1324, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1325, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1326, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1327, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1328, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1329, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1330, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1331, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1332, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1333, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1334, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1335, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1336, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1337, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1338, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1339, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1340, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1341, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1342, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1343, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1344, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1345, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1346, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1347, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1348, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1349, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1350, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1351, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1352, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1353, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1354, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1355, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1356, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1357, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1358, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1359, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1360, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1361, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1362, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1363, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1364, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1365, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1366, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1367, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1368, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1369, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1370, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1371, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1372, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1373, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1374, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1375, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1376, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1377, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1378, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1379, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1380, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1381, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1382, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1383, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1384, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1385, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1386, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1387, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1388, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1389, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1390, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1391, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1392, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1393, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1394, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1395, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1396, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1397, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1398, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1399, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1400, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1401, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1402, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1403, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1404, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1405, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1406, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1407, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1408, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1409, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1410, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1411, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1412, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1413, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1414, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1415, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1416, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1417, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1418, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1419, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1420, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1421, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1422, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1423, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1424, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1425, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1426, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1427, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1428, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1429, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1430, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1431, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1432, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1433, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1434, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1435, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1436, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1437, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1438, '1970-01-01') as time_value\n        union all\n      select dateadd(minute, 1439, '1970-01-01') as time_value\n\n\n\n)\n\nselect    time_value,--string of HH:MM:SS\n          concat(\n            \n  format(time_value, 'hhmmss')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as time_string, --string of HH:MM:SS AM/PM\n          \n  format(time_value, 'HHmmss')\n\n\n as time24_string,--string of HH:MM:SS\n\n          case\n            when cast(\n    datepart(hour, time_value)\n\n\n as int) > 12\n              then  cast(\n    datepart(hour, time_value)\n\n\n as int) - 12\n            else    cast(\n    datepart(hour, time_value)\n\n\n as int)\n          end as hour_number,\n          concat(\n            \n  format(time_value, 'hh0000')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as hour_name, --string of HH:00:00 AM/PM\n          cast(\n    datepart(hour, time_value)\n\n\n as int) as hour24_number,\n          \n  format(time_value, 'HH0000')\n\n\n as hour24_name, --string of HH:00:00\n\n          cast(\n    datepart(minute, time_value)\n\n\n as int) as minute_number,\n          concat(\n            \n  format(time_value, 'hhmm00')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as hour_minute_name, --string of HH:MM:00 AM/PM\n          \n  format(time_value, 'HHmm00')\n\n\n as hour24_minute_name, --string of HH:MM:00\n\n          cast(\n  format(time_value, 'HHmmss')\n\n\n as bigint) as time_key --number of HHMMSS\n\nfrom      base_times\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_time_dimension_minute\""
        },
        "model.integration_tests.verify_get_time_dimension_second": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_time_dimension"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [
                    {
                        "sql": "drop table if exists base_table_verify_get_time_dimension_second",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "\n      drop table if exists base_table_verify_get_time_dimension_second;\n      with E1(N) as\n      (\n        select 1 union all select 1 union all select 1 union all\n        select 1 union all select 1 union all select 1 union all\n        select 1 union all select 1 union all select 1 union all select 1\n      ) --10E+1 or 10 rows\n      ,E2(N) as\n      (\n        select 1 from E1 a, E1 b\n      ) --10E+2 or 100 rows\n      ,E3(N) as\n      (\n        select 1 from E2 a, E2 b\n      ) --10E+4 or 10,000 rows\n      ,E4(N) as\n      (\n        select 1 FROM E3 a, E3 b\n      ) --10E+8 or 100,000,000 rows\n      ,EALL as (\n        select  top 86400\n                N,\n                row_number() over (order by N) as value\n        from    E4\n        order by 2\n      )\n      select  value\n      into    base_table_verify_get_time_dimension_second\n      from    EALL\n    ",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_time_dimension_second"
            ],
            "unique_id": "model.integration_tests.verify_get_time_dimension_second",
            "raw_code": "{% if target.type in ['sqlserver'] %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n    post_hook='drop table if exists base_table_verify_get_time_dimension_second',\r\n    pre_hook = \"\"\"\r\n      drop table if exists base_table_verify_get_time_dimension_second;\r\n      with E1(N) as\r\n      (\r\n        select 1 union all select 1 union all select 1 union all\r\n        select 1 union all select 1 union all select 1 union all\r\n        select 1 union all select 1 union all select 1 union all select 1\r\n      ) --10E+1 or 10 rows\r\n      ,E2(N) as\r\n      (\r\n        select 1 from E1 a, E1 b\r\n      ) --10E+2 or 100 rows\r\n      ,E3(N) as\r\n      (\r\n        select 1 from E2 a, E2 b\r\n      ) --10E+4 or 10,000 rows\r\n      ,E4(N) as\r\n      (\r\n        select 1 FROM E3 a, E3 b\r\n      ) --10E+8 or 100,000,000 rows\r\n      ,EALL as (\r\n        select  top 86400\r\n                N,\r\n                row_number() over (order by N) as value\r\n        from    E4\r\n        order by 2\r\n      )\r\n      select  value\r\n      into    base_table_verify_get_time_dimension_second\r\n      from    EALL\r\n    \"\"\"\r\n  )\r\n}}\r\n\r\n{{ dbt_resto.get_time_dimension(level='second', base_table='base_table_verify_get_time_dimension_second') }}\r\n\r\n{% else %}\r\n\r\n{{\r\n  config(\r\n    materialized = ('table' if target.type in ['postgres'] else 'view'),\r\n    enabled = target.type not in ['postgres'],\r\n  )\r\n}}\r\n\r\n{{ dbt_resto.get_time_dimension(level='second') }}\r\n\r\n{% endif %}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_time_dimension_second.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_second.sql",
            "name": "verify_get_time_dimension_second",
            "alias": "verify_get_time_dimension_second",
            "checksum": {
                "name": "sha256",
                "checksum": "2c8ed0a184d412ffa0f7fe558b09a4c0a5ff99fb0cb412290a248118b83439f5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "time_key": {
                    "name": "time_key",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "second_number": {
                    "name": "second_number",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\verify_get_time_dimension_second.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_second.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "materialized": "table",
                "pre-hook": [
                    "\n      drop table if exists base_table_verify_get_time_dimension_second;\n      with E1(N) as\n      (\n        select 1 union all select 1 union all select 1 union all\n        select 1 union all select 1 union all select 1 union all\n        select 1 union all select 1 union all select 1 union all select 1\n      ) --10E+1 or 10 rows\n      ,E2(N) as\n      (\n        select 1 from E1 a, E1 b\n      ) --10E+2 or 100 rows\n      ,E3(N) as\n      (\n        select 1 from E2 a, E2 b\n      ) --10E+4 or 10,000 rows\n      ,E4(N) as\n      (\n        select 1 FROM E3 a, E3 b\n      ) --10E+8 or 100,000,000 rows\n      ,EALL as (\n        select  top 86400\n                N,\n                row_number() over (order by N) as value\n        from    E4\n        order by 2\n      )\n      select  value\n      into    base_table_verify_get_time_dimension_second\n      from    EALL\n    "
                ],
                "post-hook": [
                    "drop table if exists base_table_verify_get_time_dimension_second"
                ]
            },
            "created_at": 1694070226.2853599,
            "compiled_code": "\n\n\n\n\n  \n\nwith base_times as (\n  select  dateadd(second, value, '') as time_value\n  from    base_table_verify_get_time_dimension_second\n)\n\nselect    time_value,--string of HH:MM:SS\n          concat(\n            \n  format(time_value, 'hhmmss')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as time_string, --string of HH:MM:SS AM/PM\n          \n  format(time_value, 'HHmmss')\n\n\n as time24_string,--string of HH:MM:SS\n\n          case\n            when cast(\n    datepart(hour, time_value)\n\n\n as int) > 12\n              then  cast(\n    datepart(hour, time_value)\n\n\n as int) - 12\n            else    cast(\n    datepart(hour, time_value)\n\n\n as int)\n          end as hour_number,\n          concat(\n            \n  format(time_value, 'hh0000')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as hour_name, --string of HH:00:00 AM/PM\n          cast(\n    datepart(hour, time_value)\n\n\n as int) as hour24_number,\n          \n  format(time_value, 'HH0000')\n\n\n as hour24_name, --string of HH:00:00\n\n          cast(\n    datepart(minute, time_value)\n\n\n as int) as minute_number,\n          concat(\n            \n  format(time_value, 'hhmm00')\n\n\n,\n            ' ',\n            case\n              when cast(\n    datepart(hour, time_value)\n\n\n as int) between 12 and 23\n                then  'PM'\n              else    'AM'\n            end\n          ) as hour_minute_name, --string of HH:MM:00 AM/PM\n          \n  format(time_value, 'HHmm00')\n\n\n as hour24_minute_name, --string of HH:MM:00\n\n          cast(\n    datepart(second, time_value)\n\n\n as int) as second_number,\n\n          cast(\n  format(time_value, 'HHmmss')\n\n\n as bigint) as time_key --number of HHMMSS\n\nfrom      base_times\n\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_time_dimension_second\""
        },
        "model.integration_tests.verify_get_time_key": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_timestamp",
                    "macro.dbt_resto.get_time_key"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_get_time_key"
            ],
            "unique_id": "model.integration_tests.verify_get_time_key",
            "raw_code": "with data as (\r\n  select cast('2022-03-25 14:55:45' as {{ dbt_resto.type_timestamp() }}) as input\r\n)\r\n\r\nselect  {{ dbt_resto.get_time_key('input') }} as actual,\r\n        '145545' as expected\r\nfrom    data\r\nunion all\r\nselect  {{ dbt_resto.get_time_key('input', h24=False) }} as actual,\r\n        '025545' as expected\r\nfrom    data\r\n\r\nunion all\r\n\r\nselect  {{ dbt_resto.get_time_key('input', parts=['hour','minute']) }} as actual,\r\n        '145500' as expected\r\nfrom    data\r\nunion all\r\nselect  {{ dbt_resto.get_time_key('input', parts=['hour','minute'], h24=False) }} as actual,\r\n        '025500' as expected\r\nfrom    data\r\n\r\nunion all\r\n\r\nselect  {{ dbt_resto.get_time_key('input', parts=['hour']) }} as actual,\r\n        '140000' as expected\r\nfrom    data\r\nunion all\r\nselect  {{ dbt_resto.get_time_key('input', parts=['hour'], h24=False) }} as actual,\r\n        '020000' as expected\r\nfrom    data",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_get_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_key.sql",
            "name": "verify_get_time_key",
            "alias": "verify_get_time_key",
            "checksum": {
                "name": "sha256",
                "checksum": "a2a7c9f122d5fe33d3ae80de653b9962776bf1188f2edc2ebfbd0ac0c7f5cebf"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.0441043,
            "compiled_code": "with data as (\n  select cast('2022-03-25 14:55:45' as datetime) as input\n)\n\nselect  \n  format(input, 'HHmmss')\n\n\n as actual,\n        '145545' as expected\nfrom    data\nunion all\nselect  \n  format(input, 'hhmmss')\n\n\n as actual,\n        '025545' as expected\nfrom    data\n\nunion all\n\nselect  \n  format(input, 'HHmm00')\n\n\n as actual,\n        '145500' as expected\nfrom    data\nunion all\nselect  \n  format(input, 'hhmm00')\n\n\n as actual,\n        '025500' as expected\nfrom    data\n\nunion all\n\nselect  \n  format(input, 'HH0000')\n\n\n as actual,\n        '140000' as expected\nfrom    data\nunion all\nselect  \n  format(input, 'hh0000')\n\n\n as actual,\n        '020000' as expected\nfrom    data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_get_time_key\""
        },
        "model.integration_tests.verify_str_to_date": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_date",
                    "macro.dbt_resto.str_to_date"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "resto",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "verify_str_to_date"
            ],
            "unique_id": "model.integration_tests.verify_str_to_date",
            "raw_code": "with data as (\r\n  select   cast('2022-03-01' as {{ dbt_resto.type_date() }}) as expected\r\n          ,'20220301'     as \"yyyymmdd\"\r\n          ,'SOME_TEXT'    as \"invalid\"\r\n          ,'03/01/22'     as \"mm/dd/yy\"\r\n          ,'22.03.01'     as \"yy.mm.dd\"\r\n          ,'01/03/22'     as \"dd/mm/yy\"\r\n          ,'01.03.22'     as \"dd.mm.yy\"\r\n          ,'01-03-22'     as \"dd-mm-yy\"\r\n          ,'01-Mar-22'    as \"dd-Mon-yy\"\r\n          ,'Mar 01, 22'   as \"Mon dd, yy\"\r\n          ,'03-01-22'     as \"mm-dd-yy\"\r\n          ,'22/03/01'     as \"yy/mm/dd\"\r\n          ,'220301'       as \"yymmdd\"\r\n          ,'2022-03-01'   as \"yyyy-mm-dd\"\r\n          ,'03/01/2022'   as \"mm/dd/yyyy\"\r\n          ,'2022.03.01'   as \"yyyy.mm.dd\"\r\n          ,'01/03/2022'   as \"dd/mm/yyyy\"\r\n          ,'01.03.2022'   as \"dd.mm.yyyy\"\r\n          ,'01-03-2022'   as \"dd-mm-yyyy\"\r\n          ,'01 Mar 2022'  as \"dd Mon yyyy\"\r\n          ,'Mar 01, 2022' as \"Mon dd, yyyy\"\r\n          ,'03-01-2022'   as \"mm-dd-yyyy\"\r\n          ,'2022/03/01'   as \"yyyy/mm/dd\"\r\n)\r\n\r\nselect {{ dbt_resto.str_to_date('\"yyyymmdd\"'                    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"invalid\"'                     ) }} as actual, null as expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"mm/dd/yy\"'    , \"mm/dd/yy\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"yy.mm.dd\"'    , \"yy.mm.dd\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd/mm/yy\"'    , \"dd/mm/yy\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd.mm.yy\"'    , \"dd.mm.yy\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd-mm-yy\"'    , \"dd-mm-yy\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd-Mon-yy\"'   , \"dd-Mon-yy\"   ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"Mon dd, yy\"'  , \"Mon dd, yy\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"mm-dd-yy\"'    , \"mm-dd-yy\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"yy/mm/dd\"'    , \"yy/mm/dd\"    ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"yymmdd\"'      , \"yymmdd\"      ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"yyyy-mm-dd\"'  , \"yyyy-mm-dd\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"mm/dd/yyyy\"'  , \"mm/dd/yyyy\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"yyyy.mm.dd\"'  , \"yyyy.mm.dd\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd/mm/yyyy\"'  , \"dd/mm/yyyy\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd.mm.yyyy\"'  , \"dd.mm.yyyy\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd-mm-yyyy\"'  , \"dd-mm-yyyy\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"dd Mon yyyy\"' , \"dd Mon yyyy\" ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"Mon dd, yyyy\"', \"Mon dd, yyyy\") }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"mm-dd-yyyy\"'  , \"mm-dd-yyyy\"  ) }} as actual, expected from data union all\r\nselect {{ dbt_resto.str_to_date('\"yyyy/mm/dd\"'  , \"yyyy/mm/dd\"  ) }} as actual, expected from data",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\verify_str_to_date.sql",
            "original_file_path": "models\\sql\\datetime\\verify_str_to_date.sql",
            "name": "verify_str_to_date",
            "alias": "verify_str_to_date",
            "checksum": {
                "name": "sha256",
                "checksum": "49c2ecc7a1322340372c452896976321286e9bebd1790aeed7bee1fa8a223d8b"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "integration_tests://models\\sql\\datetime\\schema.yml",
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_str_to_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true
            },
            "created_at": 1694070226.0450976,
            "compiled_code": "with data as (\n  select   cast('2022-03-01' as date) as expected\n          ,'20220301'     as \"yyyymmdd\"\n          ,'SOME_TEXT'    as \"invalid\"\n          ,'03/01/22'     as \"mm/dd/yy\"\n          ,'22.03.01'     as \"yy.mm.dd\"\n          ,'01/03/22'     as \"dd/mm/yy\"\n          ,'01.03.22'     as \"dd.mm.yy\"\n          ,'01-03-22'     as \"dd-mm-yy\"\n          ,'01-Mar-22'    as \"dd-Mon-yy\"\n          ,'Mar 01, 22'   as \"Mon dd, yy\"\n          ,'03-01-22'     as \"mm-dd-yy\"\n          ,'22/03/01'     as \"yy/mm/dd\"\n          ,'220301'       as \"yymmdd\"\n          ,'2022-03-01'   as \"yyyy-mm-dd\"\n          ,'03/01/2022'   as \"mm/dd/yyyy\"\n          ,'2022.03.01'   as \"yyyy.mm.dd\"\n          ,'01/03/2022'   as \"dd/mm/yyyy\"\n          ,'01.03.2022'   as \"dd.mm.yyyy\"\n          ,'01-03-2022'   as \"dd-mm-yyyy\"\n          ,'01 Mar 2022'  as \"dd Mon yyyy\"\n          ,'Mar 01, 2022' as \"Mon dd, yyyy\"\n          ,'03-01-2022'   as \"mm-dd-yyyy\"\n          ,'2022/03/01'   as \"yyyy/mm/dd\"\n)\n\nselect try_convert(date, convert(varchar, \"yyyymmdd\"), 112) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"invalid\"), 112) as actual, null as expected from data union all\nselect try_convert(date, convert(varchar, \"mm/dd/yy\"), 1) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"yy.mm.dd\"), 2) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd/mm/yy\"), 3) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd.mm.yy\"), 4) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd-mm-yy\"), 5) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd-Mon-yy\"), 6) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"Mon dd, yy\"), 7) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"mm-dd-yy\"), 10) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"yy/mm/dd\"), 11) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"yymmdd\"), 12) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"yyyy-mm-dd\"), 23) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"mm/dd/yyyy\"), 101) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"yyyy.mm.dd\"), 102) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd/mm/yyyy\"), 103) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd.mm.yyyy\"), 104) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd-mm-yyyy\"), 105) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"dd Mon yyyy\"), 106) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"Mon dd, yyyy\"), 107) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"mm-dd-yyyy\"), 110) as actual, expected from data union all\nselect try_convert(date, convert(varchar, \"yyyy/mm/dd\"), 111) as actual, expected from data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"resto\".\"verify_str_to_date\""
        },
        "test.integration_tests.if_materilized_view_created": {
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.integration_tests.sqlserver__get_indexes"
                ],
                "nodes": [
                    "model.integration_tests.verify_materialized_view",
                    "model.integration_tests.verify_materialized_view",
                    "model.integration_tests.verify_materialized_view",
                    "model.integration_tests.verify_materialized_view",
                    "model.integration_tests.verify_materialized_view",
                    "model.integration_tests.verify_materialized_view"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "materialization",
                "model",
                "if_materilized_view_created"
            ],
            "unique_id": "test.integration_tests.if_materilized_view_created",
            "raw_code": "{% if target.type in ['sqlserver'] %}\r\nwith indexes as (\r\n  {{ sqlserver__get_indexes(ref('verify_materialized_view')) }}\r\n)\r\n\r\nselect  1 as result\r\nwhere   not exists (\r\n  select  1\r\n  from    \"{{ ref('verify_materialized_view').database }}\".information_schema.tables\r\n  where   table_type = 'view'\r\n    and   table_schema = '{{ ref(\"verify_materialized_view\").schema }}'\r\n    and   table_name = '{{ ref(\"verify_materialized_view\").table }}'\r\n)\r\n\r\nunion all\r\n\r\nselect  1 as result\r\nwhere   not exists (\r\n  select  1\r\n  from    indexes\r\n  where   object_type = 'view'\r\n    and   index_type = 'Clustered index'\r\n    and   [unique] = 'Unique'\r\n    and   table_view = '{{ ref(\"verify_materialized_view\").schema ~ '.' ~ ref(\"verify_materialized_view\").table }}'\r\n)\r\n\r\n{% else %}\r\n\r\nselect  1 as result where 1 = 0\r\n\r\n{% endif %}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "materialization\\model\\if_materilized_view_created.sql",
            "original_file_path": "tests\\materialization\\model\\if_materilized_view_created.sql",
            "name": "if_materilized_view_created",
            "alias": "if_materilized_view_created",
            "checksum": {
                "name": "sha256",
                "checksum": "04e5e89dba921ff53ae63615371e86f10e0a0ceb7080247a79b243f619ea683f"
            },
            "tags": [],
            "refs": [
                [
                    "verify_materialized_view"
                ],
                [
                    "verify_materialized_view"
                ],
                [
                    "verify_materialized_view"
                ],
                [
                    "verify_materialized_view"
                ],
                [
                    "verify_materialized_view"
                ],
                [
                    "verify_materialized_view"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\tests\\materialization\\model\\if_materilized_view_created.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070225.7556605,
            "compiled_code": "\nwith indexes as (\n  \n\nselect  i.[name] as index_name,\n        substring(column_names, 1, len(column_names)-1) as [columns],\n        case when i.[type] = 1 then 'Clustered index'\n            when i.[type] = 2 then 'Nonclustered unique index'\n            when i.[type] = 3 then 'XML index'\n            when i.[type] = 4 then 'Spatial index'\n            when i.[type] = 5 then 'Clustered columnstore index'\n            when i.[type] = 6 then 'Nonclustered columnstore index'\n            when i.[type] = 7 then 'Nonclustered hash index'\n            end as index_type,\n        case when i.is_unique = 1 then 'Unique'\n            else 'Not unique' end as [unique],\n        schema_name(t.schema_id) + '.' + t.[name] as table_view,\n        case when t.[type] = 'U' then 'Table'\n            when t.[type] = 'V' then 'View'\n            end as [object_type]\n\nfrom    \"msdb\".sys.objects t\njoin    \"msdb\".sys.indexes i\n  on    t.object_id = i.object_id\ncross apply (\n  select  col.[name] + ', '\n  from    \"msdb\".sys.index_columns ic\n  join    \"msdb\".sys.columns col\n    on    ic.object_id = col.object_id\n    and   ic.column_id = col.column_id\n  where   ic.object_id = t.object_id\n    and   ic.index_id = i.index_id\n  order by key_ordinal\n  for xml path ('')\n) D (column_names)\n\nwhere   t.is_ms_shipped <> 1\n  and   index_id > 0\n\n\n)\n\nselect  1 as result\nwhere   not exists (\n  select  1\n  from    \"msdb\".information_schema.tables\n  where   table_type = 'view'\n    and   table_schema = 'resto'\n    and   table_name = 'verify_materialized_view'\n)\n\nunion all\n\nselect  1 as result\nwhere   not exists (\n  select  1\n  from    indexes\n  where   object_type = 'view'\n    and   index_type = 'Clustered index'\n    and   [unique] = 'Unique'\n    and   table_view = 'resto.verify_materialized_view'\n)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "test.integration_tests.if_get_base_times_correct_count": {
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_hour",
                    "model.integration_tests.verify_get_base_times_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "if_get_base_times_correct_count"
            ],
            "unique_id": "test.integration_tests.if_get_base_times_correct_count",
            "raw_code": "select  1 as col\r\nfrom    {{ ref('verify_get_base_times_hour') }}\r\nhaving  not(count(*) = 24)\r\n\r\nunion all\r\n\r\nselect  1 as col\r\nfrom    {{ ref('verify_get_base_times_minute') }}\r\nhaving  not(count(*) = 1440)\r\n\r\n{# {% if target.type in ['postgres'] %}\r\n\r\nunion all\r\n\r\nselect  1 as col\r\nfrom    {{ ref('verify_get_base_times_second') }}\r\nhaving  not(count(*) = 86400)\r\n\r\n{% endif %} #}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\if_get_base_times_correct_count.sql",
            "original_file_path": "tests\\sql\\datetime\\if_get_base_times_correct_count.sql",
            "name": "if_get_base_times_correct_count",
            "alias": "if_get_base_times_correct_count",
            "checksum": {
                "name": "sha256",
                "checksum": "1a69ad75df86066fd4e53851657d04aef610bab12c098144b4316fb65952062d"
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_hour"
                ],
                [
                    "verify_get_base_times_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\tests\\sql\\datetime\\if_get_base_times_correct_count.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070225.7636368,
            "compiled_code": "select  1 as col\nfrom    \"msdb\".\"resto\".\"verify_get_base_times_hour\"\nhaving  not(count(*) = 24)\n\nunion all\n\nselect  1 as col\nfrom    \"msdb\".\"resto\".\"verify_get_base_times_minute\"\nhaving  not(count(*) = 1440)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "test.integration_tests.if_get_time_dimension_correct_count": {
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour",
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "if_get_time_dimension_correct_count"
            ],
            "unique_id": "test.integration_tests.if_get_time_dimension_correct_count",
            "raw_code": "select  1 as col\r\nfrom    {{ ref('verify_get_time_dimension_hour') }}\r\nhaving  not(count(*) = 24)\r\n\r\nunion all\r\n\r\nselect  1 as col\r\nfrom    {{ ref('verify_get_time_dimension_minute') }}\r\nhaving  not(count(*) = 1440)\r\n\r\n{# {% if target.type in ['postgres'] %}\r\n\r\nunion all\r\n\r\nselect  1 as col\r\nfrom    {{ ref('verify_get_time_dimension_second') }}\r\nhaving  not(count(*) = 86400)\r\n\r\n{% endif %} #}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "sql\\datetime\\if_get_time_dimension_correct_count.sql",
            "original_file_path": "tests\\sql\\datetime\\if_get_time_dimension_correct_count.sql",
            "name": "if_get_time_dimension_correct_count",
            "alias": "if_get_time_dimension_correct_count",
            "checksum": {
                "name": "sha256",
                "checksum": "15c3c99ebc3c74dc4d32bee9b51780a709520dd46f6cfa39c631f61a2349dd72"
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ],
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\tests\\sql\\datetime\\if_get_time_dimension_correct_count.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070225.7666383,
            "compiled_code": "select  1 as col\nfrom    \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nhaving  not(count(*) = 24)\n\nunion all\n\nselect  1 as col\nfrom    \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nhaving  not(count(*) = 1440)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "model.dbt_resto.dim_box": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "dim_box"
            ],
            "unique_id": "model.dbt_resto.dim_box",
            "raw_code": "select   sk_box as box_key\r\n        ,box_id\r\n        ,box_date\r\n        ,box_result_numbers\r\n        ,box_result_number_1\r\n        ,box_result_number_2\r\n        ,box_result_number_3\r\n        ,box_result_number_4\r\n        ,box_result_number_5\r\n        ,box_result_number_6\r\n        ,box_result_number_7\r\n\r\nfrom    {{ ref('staging_power655_box') }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\dim_box.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\dim_box.sql",
            "name": "dim_box",
            "alias": "dim_box",
            "checksum": {
                "name": "sha256",
                "checksum": "4b6fa6c2478d8da556b93cac83b379a984d33e9f0cc440d4b2b5483b50ecd289"
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Box Dimension",
            "columns": {
                "box_key": {
                    "name": "box_key",
                    "description": "Dim key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_id": {
                    "name": "box_id",
                    "description": "Box ID",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_date": {
                    "name": "box_date",
                    "description": "Box date",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_numbers": {
                    "name": "box_result_numbers",
                    "description": "Set of numbers as box result",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_1": {
                    "name": "box_result_number_1",
                    "description": "Result number at position 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_2": {
                    "name": "box_result_number_2",
                    "description": "Result number at position 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_3": {
                    "name": "box_result_number_3",
                    "description": "Result number at position 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_4": {
                    "name": "box_result_number_4",
                    "description": "Result number at position 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_5": {
                    "name": "box_result_number_5",
                    "description": "Result number at position 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_6": {
                    "name": "box_result_number_6",
                    "description": "Result number at position 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_7": {
                    "name": "box_result_number_7",
                    "description": "Result number at position 7",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\dim_box.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "table",
                "schema": "mart"
            },
            "created_at": 1694070226.3180356,
            "compiled_code": "select   sk_box as box_key\n        ,box_id\n        ,box_date\n        ,box_result_numbers\n        ,box_result_number_1\n        ,box_result_number_2\n        ,box_result_number_3\n        ,box_result_number_4\n        ,box_result_number_5\n        ,box_result_number_6\n        ,box_result_number_7\n\nfrom    \"msdb\".\"staging\".\"staging_power655_box\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"dim_box\""
        },
        "model.dbt_resto.dim_date": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.datepart",
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "box_date",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "dim_date"
            ],
            "unique_id": "model.dbt_resto.dim_date",
            "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'box_date',\r\n  )\r\n}}\r\n\r\nselect     box_date as date_key\r\n          ,box_date\r\n          ,{{ dbt_resto.datepart('box_date', 'day') }} as box_day\r\n          ,{{ dbt_resto.datepart('box_date', 'week') }} as box_week\r\n          ,{{ dbt_resto.datepart('box_date', 'month') }} as box_month\r\n          ,substring(\r\n            'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ',\r\n            ({{ dbt_resto.datepart('box_date', 'month') }} * 4) - 3, 3) as box_month_name\r\n          ,{{ dbt_resto.datepart('box_date', 'year') }} as box_year\r\n\r\nfrom      {{ ref('staging_power655_box') }}\r\n\r\nwhere     1 = 1\r\n{% if is_incremental() %}\r\n\r\n  and     box_date > coalesce((select max(box_date) from {{ this }}), '1900-01-01')\r\n\r\n{% endif %}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\dim_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\dim_date.sql",
            "name": "dim_date",
            "alias": "dim_date",
            "checksum": {
                "name": "sha256",
                "checksum": "34f9c055adeb57a3e4e2ecf3ad7c7dbcbd6ac6d2595926ddb989bda98821b1fe"
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Date Dimension",
            "columns": {
                "date_key": {
                    "name": "date_key",
                    "description": "Dim key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_date": {
                    "name": "box_date",
                    "description": "Box Date",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_day": {
                    "name": "box_day",
                    "description": "Box's day",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_week": {
                    "name": "box_week",
                    "description": "Box's week",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_month": {
                    "name": "box_month",
                    "description": "Box's month",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_month_name": {
                    "name": "box_month_name",
                    "description": "Box's month name. List of values:\n\n- \"Jan\"\n- \"Feb\"\n- \"Mar\"\n- \"Apr\"\n- \"May\"\n- \"Jun\"\n- \"Jul\"\n- \"Aug\"\n- \"Sep\"\n- \"Oct\"\n- \"Nov\"\n- \"Dec\"\n",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_year": {
                    "name": "box_year",
                    "description": "Box's year",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\dim_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "incremental",
                "schema": "mart",
                "unique_key": "box_date"
            },
            "created_at": 1694070226.4362462,
            "compiled_code": "\n\nselect     box_date as date_key\n          ,box_date\n          ,\n    datepart(day, box_date)\n\n\n as box_day\n          ,\n    datepart(iso_week, box_date)\n\n\n as box_week\n          ,\n    datepart(month, box_date)\n\n\n as box_month\n          ,substring(\n            'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ',\n            (\n    datepart(month, box_date)\n\n\n * 4) - 3, 3) as box_month_name\n          ,\n    datepart(year, box_date)\n\n\n as box_year\n\nfrom      \"msdb\".\"staging\".\"staging_power655_box\"\n\nwhere     1 = 1\n\n\n  and     box_date > coalesce((select max(box_date) from \"msdb\".\"mart\".\"dim_date\"), '1900-01-01')\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"dim_date\""
        },
        "model.dbt_resto.dim_prize": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.hash"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "dim_prize"
            ],
            "unique_id": "model.dbt_resto.dim_prize",
            "raw_code": "select  {% if target.type == 'sqlserver' %}\r\n          {{ dbt_resto.hash(['prize_name']) }}\r\n        {% else %}\r\n          {{ dbt_utils.surrogate_key(['prize_name']) }}\r\n        {% endif %} as prize_key\r\n        ,prize_name\r\n        ,case\r\n          when prize_name = 'Jackpot 1' then 1\r\n          when prize_name = 'Jackpot 2' then 2\r\n          when prize_name = '1st Prize' then 3\r\n          when prize_name = '2nd Prize' then 4\r\n          when prize_name = '3rd Prize' then 5\r\n        end as prize_order\r\n\r\nfrom    {{ ref('staging_power655_box_detail') }}\r\ngroup by prize_name",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\dim_prize.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\dim_prize.sql",
            "name": "dim_prize",
            "alias": "dim_prize",
            "checksum": {
                "name": "sha256",
                "checksum": "dccc24a3831aa46565bbc57116680dd70257cdec6cfdebed5f4cfa318c4bdd36"
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Prize Dimension",
            "columns": {
                "prize_key": {
                    "name": "prize_key",
                    "description": "Dim key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_name": {
                    "name": "prize_name",
                    "description": "Prize name",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_order": {
                    "name": "prize_order",
                    "description": "Prize order by its value",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\dim_prize.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "table",
                "schema": "mart"
            },
            "created_at": 1694070226.5167143,
            "compiled_code": "select  \n          \n  convert(varchar(32), hashbytes('MD5',  coalesce(cast(\n\n    concat('',\n      coalesce(cast(prize_name as nvarchar), '') ) as varchar ), '')), 2)\n         as prize_key\n        ,prize_name\n        ,case\n          when prize_name = 'Jackpot 1' then 1\n          when prize_name = 'Jackpot 2' then 2\n          when prize_name = '1st Prize' then 3\n          when prize_name = '2nd Prize' then 4\n          when prize_name = '3rd Prize' then 5\n        end as prize_order\n\nfrom    \"msdb\".\"staging\".\"staging_power655_box_detail\"\ngroup by prize_name",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"dim_prize\""
        },
        "model.dbt_resto.fact_number": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "fact_number"
            ],
            "unique_id": "model.dbt_resto.fact_number",
            "raw_code": "{%- set numbers = [\r\n     1, 2, 3, 4, 5, 6, 7, 8, 9,10,\r\n    11,12,13,14,15,16,17,18,19,20,\r\n    21,22,23,24,25,26,27,28,29,30,\r\n    31,32,33,34,35,36,37,38,39,40,\r\n    41,42,43,44,45,46,47,48,49,50,\r\n    51,52,53,54,55\r\n] -%}\r\n\r\nwith numbers as (\r\n\r\n{%- for item in numbers %}\r\n  select {{ item }} as number_value {% if not loop.last %} union all{% endif %}\r\n{%- endfor %}\r\n\r\n),\r\n\r\nstaging_box as (\r\n  select * from {{ ref('staging_power655_box') }}\r\n)\r\n\r\nselect       numbers.number_value\r\n\r\n            ,sum(case when staging_box.box_id is null then 0 else 1 end) as occurrence\r\n            ,sum(case when staging_box.box_result_number_1 = numbers.number_value then 1 else 0 end) as occurrence_pos_1\r\n            ,sum(case when staging_box.box_result_number_2 = numbers.number_value then 1 else 0 end) as occurrence_pos_2\r\n            ,sum(case when staging_box.box_result_number_3 = numbers.number_value then 1 else 0 end) as occurrence_pos_3\r\n            ,sum(case when staging_box.box_result_number_4 = numbers.number_value then 1 else 0 end) as occurrence_pos_4\r\n            ,sum(case when staging_box.box_result_number_5 = numbers.number_value then 1 else 0 end) as occurrence_pos_5\r\n            ,sum(case when staging_box.box_result_number_6 = numbers.number_value then 1 else 0 end) as occurrence_pos_6\r\n            ,sum(case when staging_box.box_result_number_7 = numbers.number_value then 1 else 0 end) as occurrence_pos_7\r\n\r\n            ,max(staging_box.box_date) as last_appearance\r\n            ,max(case when staging_box.box_result_number_1 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_1\r\n            ,max(case when staging_box.box_result_number_2 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_2\r\n            ,max(case when staging_box.box_result_number_3 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_3\r\n            ,max(case when staging_box.box_result_number_4 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_4\r\n            ,max(case when staging_box.box_result_number_5 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_5\r\n            ,max(case when staging_box.box_result_number_6 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_6\r\n            ,max(case when staging_box.box_result_number_7 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_7\r\n\r\nfrom        numbers\r\nleft join   staging_box\r\n  on        staging_box.box_result_number_1 = numbers.number_value\r\n  or        staging_box.box_result_number_2 = numbers.number_value\r\n  or        staging_box.box_result_number_3 = numbers.number_value\r\n  or        staging_box.box_result_number_4 = numbers.number_value\r\n  or        staging_box.box_result_number_5 = numbers.number_value\r\n  or        staging_box.box_result_number_6 = numbers.number_value\r\n  or        staging_box.box_result_number_7 = numbers.number_value\r\n\r\ngroup by    numbers.number_value",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\fact_number.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\fact_number.sql",
            "name": "fact_number",
            "alias": "fact_number",
            "checksum": {
                "name": "sha256",
                "checksum": "d215f7fcedccffddee5f9424088c0d2a33d9af1780cdc20a47d33eaadad933cf"
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Statistics of 56 numbers",
            "columns": {
                "number_value": {
                    "name": "number_value",
                    "description": "Number value",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence": {
                    "name": "occurrence",
                    "description": "Times that number has appeared in any positions",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_1": {
                    "name": "occurrence_pos_1",
                    "description": "Times that number has appeared at postition 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_2": {
                    "name": "occurrence_pos_2",
                    "description": "Tmes that number has appeared at postition 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_3": {
                    "name": "occurrence_pos_3",
                    "description": "Times that number has appeared at postition 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_4": {
                    "name": "occurrence_pos_4",
                    "description": "Times that number has appeared at postition 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_5": {
                    "name": "occurrence_pos_5",
                    "description": "Times that number has appeared at postition 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_6": {
                    "name": "occurrence_pos_6",
                    "description": "Times that number has appeared at postition 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence_pos_7": {
                    "name": "occurrence_pos_7",
                    "description": "Times that number has appeared at postition 7",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance": {
                    "name": "last_appearance",
                    "description": "The date where number appearing in any positions",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_1": {
                    "name": "last_appearance_pos_1",
                    "description": "The date where number appearing at position 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_2": {
                    "name": "last_appearance_pos_2",
                    "description": "The date where number appearing at position 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_3": {
                    "name": "last_appearance_pos_3",
                    "description": "The date where number appearing at position 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_4": {
                    "name": "last_appearance_pos_4",
                    "description": "The date where number appearing at position 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_5": {
                    "name": "last_appearance_pos_5",
                    "description": "The date where number appearing at position 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_6": {
                    "name": "last_appearance_pos_6",
                    "description": "The date where number appearing at position 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance_pos_7": {
                    "name": "last_appearance_pos_7",
                    "description": "The date where number appearing at position 7",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\fact_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "table",
                "schema": "mart"
            },
            "created_at": 1694070226.581701,
            "compiled_code": "with numbers as (\n  select 1 as number_value  union all\n  select 2 as number_value  union all\n  select 3 as number_value  union all\n  select 4 as number_value  union all\n  select 5 as number_value  union all\n  select 6 as number_value  union all\n  select 7 as number_value  union all\n  select 8 as number_value  union all\n  select 9 as number_value  union all\n  select 10 as number_value  union all\n  select 11 as number_value  union all\n  select 12 as number_value  union all\n  select 13 as number_value  union all\n  select 14 as number_value  union all\n  select 15 as number_value  union all\n  select 16 as number_value  union all\n  select 17 as number_value  union all\n  select 18 as number_value  union all\n  select 19 as number_value  union all\n  select 20 as number_value  union all\n  select 21 as number_value  union all\n  select 22 as number_value  union all\n  select 23 as number_value  union all\n  select 24 as number_value  union all\n  select 25 as number_value  union all\n  select 26 as number_value  union all\n  select 27 as number_value  union all\n  select 28 as number_value  union all\n  select 29 as number_value  union all\n  select 30 as number_value  union all\n  select 31 as number_value  union all\n  select 32 as number_value  union all\n  select 33 as number_value  union all\n  select 34 as number_value  union all\n  select 35 as number_value  union all\n  select 36 as number_value  union all\n  select 37 as number_value  union all\n  select 38 as number_value  union all\n  select 39 as number_value  union all\n  select 40 as number_value  union all\n  select 41 as number_value  union all\n  select 42 as number_value  union all\n  select 43 as number_value  union all\n  select 44 as number_value  union all\n  select 45 as number_value  union all\n  select 46 as number_value  union all\n  select 47 as number_value  union all\n  select 48 as number_value  union all\n  select 49 as number_value  union all\n  select 50 as number_value  union all\n  select 51 as number_value  union all\n  select 52 as number_value  union all\n  select 53 as number_value  union all\n  select 54 as number_value  union all\n  select 55 as number_value \n\n),\n\nstaging_box as (\n  select * from \"msdb\".\"staging\".\"staging_power655_box\"\n)\n\nselect       numbers.number_value\n\n            ,sum(case when staging_box.box_id is null then 0 else 1 end) as occurrence\n            ,sum(case when staging_box.box_result_number_1 = numbers.number_value then 1 else 0 end) as occurrence_pos_1\n            ,sum(case when staging_box.box_result_number_2 = numbers.number_value then 1 else 0 end) as occurrence_pos_2\n            ,sum(case when staging_box.box_result_number_3 = numbers.number_value then 1 else 0 end) as occurrence_pos_3\n            ,sum(case when staging_box.box_result_number_4 = numbers.number_value then 1 else 0 end) as occurrence_pos_4\n            ,sum(case when staging_box.box_result_number_5 = numbers.number_value then 1 else 0 end) as occurrence_pos_5\n            ,sum(case when staging_box.box_result_number_6 = numbers.number_value then 1 else 0 end) as occurrence_pos_6\n            ,sum(case when staging_box.box_result_number_7 = numbers.number_value then 1 else 0 end) as occurrence_pos_7\n\n            ,max(staging_box.box_date) as last_appearance\n            ,max(case when staging_box.box_result_number_1 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_1\n            ,max(case when staging_box.box_result_number_2 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_2\n            ,max(case when staging_box.box_result_number_3 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_3\n            ,max(case when staging_box.box_result_number_4 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_4\n            ,max(case when staging_box.box_result_number_5 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_5\n            ,max(case when staging_box.box_result_number_6 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_6\n            ,max(case when staging_box.box_result_number_7 = numbers.number_value then staging_box.box_date else null end) as last_appearance_pos_7\n\nfrom        numbers\nleft join   staging_box\n  on        staging_box.box_result_number_1 = numbers.number_value\n  or        staging_box.box_result_number_2 = numbers.number_value\n  or        staging_box.box_result_number_3 = numbers.number_value\n  or        staging_box.box_result_number_4 = numbers.number_value\n  or        staging_box.box_result_number_5 = numbers.number_value\n  or        staging_box.box_result_number_6 = numbers.number_value\n  or        staging_box.box_result_number_7 = numbers.number_value\n\ngroup by    numbers.number_value",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"fact_number\""
        },
        "model.dbt_resto.fact_number_forecast": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_date"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_scoring",
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "forecast_date",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "fact_number_forecast"
            ],
            "unique_id": "model.dbt_resto.fact_number_forecast",
            "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'forecast_date',\r\n  )\r\n}}\r\n\r\n{%- set run_date = env_var(\"DBT_ENV_RUN_DATE\", \"current_timestamp\") -%}\r\n\r\nwith forecast as (\r\n\r\n  select * from {{ ref('fact_number_scoring') }}\r\n\r\n  where   1 = 1\r\n    and   forecast_date = cast({{ run_date }} as {{ dbt_resto.type_date() }})\r\n\r\n),\r\n\r\ndim_box as (\r\n\r\n  select * from {{ ref('dim_box') }}\r\n\r\n),\r\n\r\nselecting_1 as ( select top 1 number_value, forecast_date from forecast order by rank_pos_1 desc),\r\nselecting_2 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1) order by rank_pos_2 desc),\r\nselecting_3 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 {% for i in [2]     %}union all select number_value from selecting_{{ i }} {% endfor %}) order by rank_pos_3 desc),\r\nselecting_4 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 {% for i in [2,3]   %}union all select number_value from selecting_{{ i }} {% endfor %}) order by rank_pos_4 desc),\r\nselecting_5 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 {% for i in [2,3,4] %}union all select number_value from selecting_{{ i }} {% endfor %}) order by rank_pos_5 desc),\r\nselecting_6 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 {% for i in [2,3,5] %}union all select number_value from selecting_{{ i }} {% endfor %}) order by rank_pos_6 desc),\r\n\r\nselecting as (\r\n\r\n  (select top 1 number_value, forecast_date from selecting_1) union all\r\n  (select top 1 number_value, forecast_date from selecting_2) union all\r\n  (select top 1 number_value, forecast_date from selecting_3) union all\r\n  (select top 1 number_value, forecast_date from selecting_4) union all\r\n  (select top 1 number_value, forecast_date from selecting_5) union all\r\n  (select top 1 number_value, forecast_date from selecting_6)\r\n\r\n),\r\n\r\nselecting_order as (\r\n\r\n  select number_value, forecast_date, row_number() over(order by number_value) as rn from selecting\r\n\r\n),\r\n\r\nforecasting as (\r\n\r\n  select  forecast_date\r\n          ,concat(max(case when rn = 1 then number_value else null end)\r\n            ,',', max(case when rn = 2 then number_value else null end)\r\n            ,',', max(case when rn = 3 then number_value else null end)\r\n            ,',', max(case when rn = 4 then number_value else null end)\r\n            ,',', max(case when rn = 5 then number_value else null end)\r\n            ,',', max(case when rn = 6 then number_value else null end)\r\n          ) as forecast_numbers\r\n          ,max(case when rn = 1 then number_value else null end) as forecast_1\r\n          ,max(case when rn = 2 then number_value else null end) as forecast_2\r\n          ,max(case when rn = 3 then number_value else null end) as forecast_3\r\n          ,max(case when rn = 4 then number_value else null end) as forecast_4\r\n          ,max(case when rn = 5 then number_value else null end) as forecast_5\r\n          ,max(case when rn = 6 then number_value else null end) as forecast_6\r\n\r\n  from    selecting_order\r\n\r\n  group by forecast_date\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n  select      top 1 forecasting.forecast_date, dim_box.box_date as last_box_date\r\n              ,forecast_numbers,box_result_numbers as last_box_result_numbers\r\n              ,forecast_1, box_result_number_1 as last_box_result_number_1\r\n              ,forecast_2, box_result_number_2 as last_box_result_number_2\r\n              ,forecast_3, box_result_number_3 as last_box_result_number_3\r\n              ,forecast_4, box_result_number_4 as last_box_result_number_4\r\n              ,forecast_5, box_result_number_5 as last_box_result_number_5\r\n              ,forecast_6, box_result_number_6 as last_box_result_number_6\r\n\r\n  from        forecasting\r\n  left join   dim_box\r\n    on        dim_box.box_date < forecasting.forecast_date\r\n\r\n  order by    dim_box.box_date desc\r\n)\r\n\r\nselect   *\r\n\r\nfrom    final",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\fact_number_forecast.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\fact_number_forecast.sql",
            "name": "fact_number_forecast",
            "alias": "fact_number_forecast",
            "checksum": {
                "name": "sha256",
                "checksum": "5003d82738ff4743f89279ff3f474943f09327c46f3da291e11949cb301e3408"
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_scoring"
                ],
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Forecasting numbers for the date.\nEach run will update/insert data for one day.\n",
            "columns": {
                "forecast_date": {
                    "name": "forecast_date",
                    "description": "Forecasting date",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_date": {
                    "name": "last_box_date",
                    "description": "Box date of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_numbers": {
                    "name": "forecast_numbers",
                    "description": "Forecast numbers",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_numbers": {
                    "name": "last_box_result_numbers",
                    "description": "Box numbers of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_1": {
                    "name": "forecast_1",
                    "description": "Forecast number 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_number_1": {
                    "name": "last_box_result_number_1",
                    "description": "Box number 1 of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_2": {
                    "name": "forecast_2",
                    "description": "Forecast number 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_number_2": {
                    "name": "last_box_result_number_2",
                    "description": "Box number 2 of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_3": {
                    "name": "forecast_3",
                    "description": "Forecast number 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_number_3": {
                    "name": "last_box_result_number_3",
                    "description": "Box number 3 of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_4": {
                    "name": "forecast_4",
                    "description": "Forecast number 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_number_4": {
                    "name": "last_box_result_number_4",
                    "description": "Box number 4 of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_5": {
                    "name": "forecast_5",
                    "description": "Forecast number 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_number_5": {
                    "name": "last_box_result_number_5",
                    "description": "Box number 5 of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_6": {
                    "name": "forecast_6",
                    "description": "Forecast number 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_box_result_number_6": {
                    "name": "last_box_result_number_6",
                    "description": "Box number 6 of the last box",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\fact_number_forecast.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "incremental",
                "schema": "mart",
                "unique_key": "forecast_date"
            },
            "created_at": 1694070226.7319186,
            "compiled_code": "with forecast as (\n\n  select * from \"msdb\".\"mart\".\"fact_number_scoring\"\n\n  where   1 = 1\n    and   forecast_date = cast(current_timestamp as date)\n\n),\n\ndim_box as (\n\n  select * from \"msdb\".\"mart\".\"dim_box\"\n\n),\n\nselecting_1 as ( select top 1 number_value, forecast_date from forecast order by rank_pos_1 desc),\nselecting_2 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1) order by rank_pos_2 desc),\nselecting_3 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 union all select number_value from selecting_2 ) order by rank_pos_3 desc),\nselecting_4 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 union all select number_value from selecting_2 union all select number_value from selecting_3 ) order by rank_pos_4 desc),\nselecting_5 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 union all select number_value from selecting_2 union all select number_value from selecting_3 union all select number_value from selecting_4 ) order by rank_pos_5 desc),\nselecting_6 as ( select top 1 number_value, forecast_date from forecast where number_value not in (select number_value from selecting_1 union all select number_value from selecting_2 union all select number_value from selecting_3 union all select number_value from selecting_5 ) order by rank_pos_6 desc),\n\nselecting as (\n\n  (select top 1 number_value, forecast_date from selecting_1) union all\n  (select top 1 number_value, forecast_date from selecting_2) union all\n  (select top 1 number_value, forecast_date from selecting_3) union all\n  (select top 1 number_value, forecast_date from selecting_4) union all\n  (select top 1 number_value, forecast_date from selecting_5) union all\n  (select top 1 number_value, forecast_date from selecting_6)\n\n),\n\nselecting_order as (\n\n  select number_value, forecast_date, row_number() over(order by number_value) as rn from selecting\n\n),\n\nforecasting as (\n\n  select  forecast_date\n          ,concat(max(case when rn = 1 then number_value else null end)\n            ,',', max(case when rn = 2 then number_value else null end)\n            ,',', max(case when rn = 3 then number_value else null end)\n            ,',', max(case when rn = 4 then number_value else null end)\n            ,',', max(case when rn = 5 then number_value else null end)\n            ,',', max(case when rn = 6 then number_value else null end)\n          ) as forecast_numbers\n          ,max(case when rn = 1 then number_value else null end) as forecast_1\n          ,max(case when rn = 2 then number_value else null end) as forecast_2\n          ,max(case when rn = 3 then number_value else null end) as forecast_3\n          ,max(case when rn = 4 then number_value else null end) as forecast_4\n          ,max(case when rn = 5 then number_value else null end) as forecast_5\n          ,max(case when rn = 6 then number_value else null end) as forecast_6\n\n  from    selecting_order\n\n  group by forecast_date\n\n),\n\nfinal as (\n\n  select      top 1 forecasting.forecast_date, dim_box.box_date as last_box_date\n              ,forecast_numbers,box_result_numbers as last_box_result_numbers\n              ,forecast_1, box_result_number_1 as last_box_result_number_1\n              ,forecast_2, box_result_number_2 as last_box_result_number_2\n              ,forecast_3, box_result_number_3 as last_box_result_number_3\n              ,forecast_4, box_result_number_4 as last_box_result_number_4\n              ,forecast_5, box_result_number_5 as last_box_result_number_5\n              ,forecast_6, box_result_number_6 as last_box_result_number_6\n\n  from        forecasting\n  left join   dim_box\n    on        dim_box.box_date < forecasting.forecast_date\n\n  order by    dim_box.box_date desc\n)\n\nselect   *\n\nfrom    final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"fact_number_forecast\""
        },
        "model.dbt_resto.fact_number_scoring": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.random",
                    "macro.dbt_resto.type_date"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "fact_key",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "fact_number_scoring"
            ],
            "unique_id": "model.dbt_resto.fact_number_scoring",
            "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'fact_key',\r\n  )\r\n}}\r\n\r\n{%- set run_date = env_var(\"DBT_ENV_RUN_DATE\", \"current_timestamp\") -%}\r\n\r\nwith total_box as (\r\n\r\n  select count(1) as no from {{ ref('dim_box') }} where box_date < {{ run_date }}\r\n\r\n),\r\n\r\nweighting as (\r\n\r\n  select   number_value\r\n          ,(total_box.no - occurrence.occurrence      ) + (datediff(day, occurrence.last_appearance      , {{ run_date }})) as weight\r\n          ,(total_box.no - occurrence.occurrence_pos_1) + (datediff(day, occurrence.last_appearance_pos_1, {{ run_date }})) as weight_1\r\n          ,(total_box.no - occurrence.occurrence_pos_2) + (datediff(day, occurrence.last_appearance_pos_2, {{ run_date }})) as weight_2\r\n          ,(total_box.no - occurrence.occurrence_pos_3) + (datediff(day, occurrence.last_appearance_pos_3, {{ run_date }})) as weight_3\r\n          ,(total_box.no - occurrence.occurrence_pos_4) + (datediff(day, occurrence.last_appearance_pos_4, {{ run_date }})) as weight_4\r\n          ,(total_box.no - occurrence.occurrence_pos_5) + (datediff(day, occurrence.last_appearance_pos_5, {{ run_date }})) as weight_5\r\n          ,(total_box.no - occurrence.occurrence_pos_6) + (datediff(day, occurrence.last_appearance_pos_6, {{ run_date }})) as weight_6\r\n\r\n  from    {{ ref('fact_number') }} as occurrence\r\n  join    total_box on 1 = 1\r\n\r\n),\r\n\r\nscoring as (\r\n\r\n  select   number_value\r\n          ,weight + weight_1 as score_1\r\n          ,weight + weight_2 as score_2\r\n          ,weight + weight_3 as score_3\r\n          ,weight + weight_4 as score_4\r\n          ,weight + weight_5 as score_5\r\n          ,weight + weight_6 as score_6\r\n\r\n  from    weighting\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n  select   number_value\r\n          ,score_1\r\n          ,score_2\r\n          ,score_3\r\n          ,score_4\r\n          ,score_5\r\n          ,score_6\r\n          ,{{ dbt_resto.random() }} * coalesce(score_1,0) as rank_pos_1\r\n          ,{{ dbt_resto.random() }} * coalesce(score_2,0) as rank_pos_2\r\n          ,{{ dbt_resto.random() }} * coalesce(score_3,0) as rank_pos_3\r\n          ,{{ dbt_resto.random() }} * coalesce(score_4,0) as rank_pos_4\r\n          ,{{ dbt_resto.random() }} * coalesce(score_5,0) as rank_pos_5\r\n          ,{{ dbt_resto.random() }} * coalesce(score_6,0) as rank_pos_6\r\n\r\n  from    scoring\r\n\r\n)\r\n\r\nselect   concat(cast({{ run_date }} as {{ dbt_resto.type_date() }}),'-',number_value) as fact_key\r\n        ,cast({{ run_date }} as {{ dbt_resto.type_date() }}) as forecast_date\r\n        ,*\r\n\r\nfrom    final",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\fact_number_scoring.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\fact_number_scoring.sql",
            "name": "fact_number_scoring",
            "alias": "fact_number_scoring",
            "checksum": {
                "name": "sha256",
                "checksum": "40acfb46591c8c2448338bd5f2ae5ae27e19073f324ed1fd56633cf782cabf11"
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "The scoring of numbers for each day of running.\nEach run will update/insert data for one day.\n",
            "columns": {
                "fact_key": {
                    "name": "fact_key",
                    "description": "PK",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "forecast_date": {
                    "name": "forecast_date",
                    "description": "Run date when score is recorded. It can be also named as Forecast Date",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "number_value": {
                    "name": "number_value",
                    "description": "The number",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "score_1": {
                    "name": "score_1",
                    "description": "Score of number 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "score_2": {
                    "name": "score_2",
                    "description": "Score of number 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "score_3": {
                    "name": "score_3",
                    "description": "Score of number 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "score_4": {
                    "name": "score_4",
                    "description": "Score of number 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "score_5": {
                    "name": "score_5",
                    "description": "Score of number 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "score_6": {
                    "name": "score_6",
                    "description": "Score of number 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "rank_pos_1": {
                    "name": "rank_pos_1",
                    "description": "Weight (randomly calculated) of number 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "rank_pos_2": {
                    "name": "rank_pos_2",
                    "description": "Weight (randomly calculated) of number 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "rank_pos_3": {
                    "name": "rank_pos_3",
                    "description": "Weight (randomly calculated) of number 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "rank_pos_4": {
                    "name": "rank_pos_4",
                    "description": "Weight (randomly calculated) of number 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "rank_pos_5": {
                    "name": "rank_pos_5",
                    "description": "Weight (randomly calculated) of number 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "rank_pos_6": {
                    "name": "rank_pos_6",
                    "description": "Weight (randomly calculated) of number 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\fact_number_scoring.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "incremental",
                "schema": "mart",
                "unique_key": "fact_key"
            },
            "created_at": 1694070226.7876704,
            "compiled_code": "with total_box as (\n\n  select count(1) as no from \"msdb\".\"mart\".\"dim_box\" where box_date < current_timestamp\n\n),\n\nweighting as (\n\n  select   number_value\n          ,(total_box.no - occurrence.occurrence      ) + (datediff(day, occurrence.last_appearance      , current_timestamp)) as weight\n          ,(total_box.no - occurrence.occurrence_pos_1) + (datediff(day, occurrence.last_appearance_pos_1, current_timestamp)) as weight_1\n          ,(total_box.no - occurrence.occurrence_pos_2) + (datediff(day, occurrence.last_appearance_pos_2, current_timestamp)) as weight_2\n          ,(total_box.no - occurrence.occurrence_pos_3) + (datediff(day, occurrence.last_appearance_pos_3, current_timestamp)) as weight_3\n          ,(total_box.no - occurrence.occurrence_pos_4) + (datediff(day, occurrence.last_appearance_pos_4, current_timestamp)) as weight_4\n          ,(total_box.no - occurrence.occurrence_pos_5) + (datediff(day, occurrence.last_appearance_pos_5, current_timestamp)) as weight_5\n          ,(total_box.no - occurrence.occurrence_pos_6) + (datediff(day, occurrence.last_appearance_pos_6, current_timestamp)) as weight_6\n\n  from    \"msdb\".\"mart\".\"fact_number\" as occurrence\n  join    total_box on 1 = 1\n\n),\n\nscoring as (\n\n  select   number_value\n          ,weight + weight_1 as score_1\n          ,weight + weight_2 as score_2\n          ,weight + weight_3 as score_3\n          ,weight + weight_4 as score_4\n          ,weight + weight_5 as score_5\n          ,weight + weight_6 as score_6\n\n  from    weighting\n\n),\n\nfinal as (\n\n  select   number_value\n          ,score_1\n          ,score_2\n          ,score_3\n          ,score_4\n          ,score_5\n          ,score_6\n          ,\n    \n\n  rand(cast(newid() as varbinary))\n\n\n * coalesce(score_1,0) as rank_pos_1\n          ,\n    \n\n  rand(cast(newid() as varbinary))\n\n\n * coalesce(score_2,0) as rank_pos_2\n          ,\n    \n\n  rand(cast(newid() as varbinary))\n\n\n * coalesce(score_3,0) as rank_pos_3\n          ,\n    \n\n  rand(cast(newid() as varbinary))\n\n\n * coalesce(score_4,0) as rank_pos_4\n          ,\n    \n\n  rand(cast(newid() as varbinary))\n\n\n * coalesce(score_5,0) as rank_pos_5\n          ,\n    \n\n  rand(cast(newid() as varbinary))\n\n\n * coalesce(score_6,0) as rank_pos_6\n\n  from    scoring\n\n)\n\nselect   concat(cast(current_timestamp as date),'-',number_value) as fact_key\n        ,cast(current_timestamp as date) as forecast_date\n        ,*\n\nfrom    final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"fact_number_scoring\""
        },
        "model.dbt_resto.fact_result": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.hash",
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box",
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "fact_result_key",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "fact_result"
            ],
            "unique_id": "model.dbt_resto.fact_result",
            "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'fact_result_key',\r\n  )\r\n}}\r\n\r\nselect  {% if target.type == 'sqlserver' %} {{ dbt_resto.hash(['bd.prize_name','b.sk_box','b.box_date']) }}\r\n        {% else %} {{ dbt_utils.surrogate_key(['b.sk_box','bd.prize_name','b.box_date']) }}\r\n        {% endif %} as fact_result_key\r\n\r\n        ,b.sk_box as box_key\r\n\r\n        ,{% if target.type == 'sqlserver' %} {{ dbt_resto.hash(['bd.prize_name']) }}\r\n        {% else %} {{ dbt_utils.surrogate_key(['bd.prize_name']) }}\r\n        {% endif %} as prize_key\r\n\r\n        ,b.box_date as date_key\r\n        ,bd.prize_won as no_of_won\r\n        ,bd.prize_value as prize_value\r\n        ,bd.prize_value * bd.prize_won as prize_paid\r\n        ,case\r\n          when bd.prize_won > 0 then 1\r\n          else 0\r\n        end as is_prize_taken\r\n\r\nfrom    {{ ref('staging_power655_box') }} as b\r\njoin    {{ ref('staging_power655_box_detail') }} as bd\r\n  on    bd.box_id = b.box_id\r\n\r\nwhere   1 = 1\r\n\r\n{% if is_incremental() %}\r\n\r\n  and   b.box_date > coalesce((select max(date_key) from {{ this }}), '1900-01-01')\r\n\r\n{% endif %}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\fact_result.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\fact_result.sql",
            "name": "fact_result",
            "alias": "fact_result",
            "checksum": {
                "name": "sha256",
                "checksum": "35a845492897a05c7d8d0550bd647b3fbdbbea5ebb02d1dbc8aa5ac4c3a8ff84"
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ],
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Statistics of Prize result",
            "columns": {
                "fact_result_key": {
                    "name": "fact_result_key",
                    "description": "Fact key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_key": {
                    "name": "box_key",
                    "description": "Box key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_key": {
                    "name": "prize_key",
                    "description": "Prize key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "date_key": {
                    "name": "date_key",
                    "description": "Date key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "no_of_won": {
                    "name": "no_of_won",
                    "description": "Number of people has won the prize",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_value": {
                    "name": "prize_value",
                    "description": "Prize value",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_paid": {
                    "name": "prize_paid",
                    "description": "Total value was paid to people won the prize",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "is_prize_taken": {
                    "name": "is_prize_taken",
                    "description": "Indicates if prize has won by someone",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\fact_result.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "incremental",
                "schema": "mart",
                "unique_key": "fact_result_key"
            },
            "created_at": 1694070226.8132882,
            "compiled_code": "\n\nselect   \n  convert(varchar(32), hashbytes('MD5',  coalesce(cast(\n\n    concat('',\n      coalesce(cast(bd.prize_name as nvarchar), '') ,\n      coalesce(cast(b.sk_box as nvarchar), '') ,\n      coalesce(cast(b.box_date as nvarchar), '') ) as varchar ), '')), 2)\n         as fact_result_key\n\n        ,b.sk_box as box_key\n\n        , \n  convert(varchar(32), hashbytes('MD5',  coalesce(cast(\n\n    concat('',\n      coalesce(cast(bd.prize_name as nvarchar), '') ) as varchar ), '')), 2)\n         as prize_key\n\n        ,b.box_date as date_key\n        ,bd.prize_won as no_of_won\n        ,bd.prize_value as prize_value\n        ,bd.prize_value * bd.prize_won as prize_paid\n        ,case\n          when bd.prize_won > 0 then 1\n          else 0\n        end as is_prize_taken\n\nfrom    \"msdb\".\"staging\".\"staging_power655_box\" as b\njoin    \"msdb\".\"staging\".\"staging_power655_box_detail\" as bd\n  on    bd.box_id = b.box_id\n\nwhere   1 = 1\n\n\n\n  and   b.box_date > coalesce((select max(date_key) from \"msdb\".\"mart\".\"fact_result\"), '1900-01-01')\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"fact_result\""
        },
        "model.dbt_resto.fact_set_number": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "mart",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "fact_set_number"
            ],
            "unique_id": "model.dbt_resto.fact_set_number",
            "raw_code": "with staging_box as (\r\n\r\n  select * from {{ ref('staging_power655_box') }}\r\n\r\n)\r\n\r\nselect     box_result_numbers\r\n          ,count(1) as occurrence\r\n          ,max(box_date) as last_appearance\r\n\r\nfrom      staging_box\r\n\r\ngroup by  box_result_numbers",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\fact_set_number.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\fact_set_number.sql",
            "name": "fact_set_number",
            "alias": "fact_set_number",
            "checksum": {
                "name": "sha256",
                "checksum": "979cd18936cfd38b75125533d6c970f4c7e24bdb08328aa7af634591dc9ea6b1"
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Statistics of Set of result numbers",
            "columns": {
                "box_result_numbers": {
                    "name": "box_result_numbers",
                    "description": "The set number",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "occurrence": {
                    "name": "occurrence",
                    "description": "Occurrence of the set numbers",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "last_appearance": {
                    "name": "last_appearance",
                    "description": "Last appearance of the set numbers",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\fact_set_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "table",
                "schema": "mart"
            },
            "created_at": 1694070226.8812318,
            "compiled_code": "with staging_box as (\n\n  select * from \"msdb\".\"staging\".\"staging_power655_box\"\n\n)\n\nselect     box_result_numbers\n          ,count(1) as occurrence\n          ,max(box_date) as last_appearance\n\nfrom      staging_box\n\ngroup by  box_result_numbers",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"mart\".\"fact_set_number\""
        },
        "model.dbt_resto.staging_power655_box": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.hash",
                    "macro.dbt_resto.type_date",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "seed.dbt_resto.vietlot_power655_data"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "staging",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "staging_power655_box"
            ],
            "unique_id": "model.dbt_resto.staging_power655_box",
            "raw_code": "select  {%- if target.type == 'sqlserver' %}\r\n\r\n          {{ dbt_resto.hash(['box_id']) }}\r\n\r\n        {%- else %}\r\n\r\n          {{ dbt_utils.surrogate_key(['box_id']) }}\r\n\r\n        {%- endif %} as sk_box\r\n\r\n        ,cast(box_date as {{ dbt_resto.type_date() }}) as box_date\r\n        ,box_id\r\n        ,box_name\r\n        ,box_result_numbers\r\n\r\n{%- if target.type == 'sqlserver' %}\r\n\r\n        ,result_numbers.box_result_number_1\r\n        ,result_numbers.box_result_number_2\r\n        ,result_numbers.box_result_number_3\r\n        ,result_numbers.box_result_number_4\r\n        ,result_numbers.box_result_number_5\r\n        ,result_numbers.box_result_number_6\r\n        ,result_numbers.box_result_number_7\r\n\r\n{%- else %}\r\n\r\n        ,cast(try_parse_json(box_result_numbers)[0] as {{ dbt_resto.type_int() }}) as box_result_number_1\r\n        ,cast(try_parse_json(box_result_numbers)[1] as {{ dbt_resto.type_int() }}) as box_result_number_2\r\n        ,cast(try_parse_json(box_result_numbers)[2] as {{ dbt_resto.type_int() }}) as box_result_number_3\r\n        ,cast(try_parse_json(box_result_numbers)[3] as {{ dbt_resto.type_int() }}) as box_result_number_4\r\n        ,cast(try_parse_json(box_result_numbers)[4] as {{ dbt_resto.type_int() }}) as box_result_number_5\r\n        ,cast(try_parse_json(box_result_numbers)[5] as {{ dbt_resto.type_int() }}) as box_result_number_6\r\n        ,cast(try_parse_json(box_result_numbers)[6] as {{ dbt_resto.type_int() }}) as box_result_number_7\r\n\r\n{%- endif %}\r\n\r\nfrom    {{ ref('vietlot_power655_data') }}\r\n\r\n{%- if target.type == 'sqlserver' %}\r\nouter apply (\r\n          select   cast([1] as {{ dbt_resto.type_int() }}) as box_result_number_1\r\n                  ,cast([2] as {{ dbt_resto.type_int() }}) as box_result_number_2\r\n                  ,cast([3] as {{ dbt_resto.type_int() }}) as box_result_number_3\r\n                  ,cast([4] as {{ dbt_resto.type_int() }}) as box_result_number_4\r\n                  ,cast([5] as {{ dbt_resto.type_int() }}) as box_result_number_5\r\n                  ,cast([6] as {{ dbt_resto.type_int() }}) as box_result_number_6\r\n                  ,cast([7] as {{ dbt_resto.type_int() }}) as box_result_number_7\r\n          from    (\r\n                    select  value,\r\n                            row_number() over (order by getdate()) as rn\r\n                    from    string_split(replace(replace(replace(box_result_numbers, ' ',''),'[',''),']',''), ',')\r\n                  ) as r\r\n                  pivot\r\n                  (\r\n                    max(value)\r\n                    for rn in ([1],[2],[3],[4],[5],[6],[7])\r\n                  ) as p\r\n) as result_numbers\r\n{%- endif %}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\staging\\staging_power655_box.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.sql",
            "name": "staging_power655_box",
            "alias": "staging_power655_box",
            "checksum": {
                "name": "sha256",
                "checksum": "54ed2cecaa1e7abd6671b406f12e310930e23d9baff9ae7fbc607ac632b743ed"
            },
            "tags": [],
            "refs": [
                [
                    "vietlot_power655_data"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Box data at data quality level",
            "columns": {
                "sk_box": {
                    "name": "sk_box",
                    "description": "Surrograte key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_date": {
                    "name": "box_date",
                    "description": "Box created date",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_id": {
                    "name": "box_id",
                    "description": "Box ID",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_name": {
                    "name": "box_name",
                    "description": "Box name",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_numbers": {
                    "name": "box_result_numbers",
                    "description": "Whole set of box result numbers",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_1": {
                    "name": "box_result_number_1",
                    "description": "Box result number at position 1",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_2": {
                    "name": "box_result_number_2",
                    "description": "Box result number at position 2",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_3": {
                    "name": "box_result_number_3",
                    "description": "Box result number at position 3",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_4": {
                    "name": "box_result_number_4",
                    "description": "Box result number at position 4",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_5": {
                    "name": "box_result_number_5",
                    "description": "Box result number at position 5",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_6": {
                    "name": "box_result_number_6",
                    "description": "Box result number at position 6",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_result_number_7": {
                    "name": "box_result_number_7",
                    "description": "Box result number at position 7 (currently missing from Data Ingestion)",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "table",
                "schema": "staging"
            },
            "created_at": 1694070226.907812,
            "compiled_code": "select\n\n          \n  convert(varchar(32), hashbytes('MD5',  coalesce(cast(\n\n    concat('',\n      coalesce(cast(box_id as nvarchar), '') ) as varchar ), '')), 2) as sk_box\n\n        ,cast(box_date as date) as box_date\n        ,box_id\n        ,box_name\n        ,box_result_numbers\n\n        ,result_numbers.box_result_number_1\n        ,result_numbers.box_result_number_2\n        ,result_numbers.box_result_number_3\n        ,result_numbers.box_result_number_4\n        ,result_numbers.box_result_number_5\n        ,result_numbers.box_result_number_6\n        ,result_numbers.box_result_number_7\n\nfrom    \"msdb\".\"landing\".\"power655_data\"\nouter apply (\n          select   cast([1] as int) as box_result_number_1\n                  ,cast([2] as int) as box_result_number_2\n                  ,cast([3] as int) as box_result_number_3\n                  ,cast([4] as int) as box_result_number_4\n                  ,cast([5] as int) as box_result_number_5\n                  ,cast([6] as int) as box_result_number_6\n                  ,cast([7] as int) as box_result_number_7\n          from    (\n                    select  value,\n                            row_number() over (order by getdate()) as rn\n                    from    string_split(replace(replace(replace(box_result_numbers, ' ',''),'[',''),']',''), ',')\n                  ) as r\n                  pivot\n                  (\n                    max(value)\n                    for rn in ([1],[2],[3],[4],[5],[6],[7])\n                  ) as p\n) as result_numbers",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"staging\".\"staging_power655_box\""
        },
        "model.dbt_resto.staging_power655_box_detail": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.hash",
                    "macro.dbt_resto.type_string"
                ],
                "nodes": [
                    "seed.dbt_resto.vietlot_power655_data"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "transient": true,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "staging",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "staging_power655_box_detail"
            ],
            "unique_id": "model.dbt_resto.staging_power655_box_detail",
            "raw_code": "{% if target.type == 'snowflake' %}\r\n\r\nselect  {{ dbt_utils.surrogate_key(['box_id', 'value:prize_name']) }} as sk_box_detail\r\n        ,box_id\r\n        ,cast(value:prize_name as {{ dbt_resto.type_string() }}) as prize_name_raw\r\n        ,cast(case\r\n          when value:prize_name = 'Giải nhất' then '1st Prize'\r\n          when value:prize_name = 'Giải nhì'  then '2nd Prize'\r\n          when value:prize_name = 'Giải ba'   then '3rd Prize'\r\n          else value:prize_name\r\n        end as {{ dbt_resto.type_string() }})  as prize_name\r\n        ,cast(value:prize_won as {{ dbt_resto.type_int() }}) as prize_won\r\n        ,cast(value:prize_value_raw as {{ dbt_resto.type_string() }}) as prize_value_raw\r\n        ,cast(value:prize_value as {{ dbt_resto.type_float() }}) as prize_value\r\n\r\nfrom    {{ ref('vietlot_power655_data') }}\r\n        ,lateral flatten(input => try_parse_json(box_results))\r\n\r\nwhere   prize_name is not null\r\n\r\n{% else %}\r\n\r\nselect  {{ dbt_resto.hash(['box_id', 'box_results.prize_name_raw']) }} as sk_box_detail\r\n        ,box_id\r\n        ,box_results.prize_name_raw\r\n        ,cast(case\r\n          when box_results.prize_name_raw = N'Giải nhất' then '1st Prize'\r\n          when box_results.prize_name_raw = N'Giải nhì'  then '2nd Prize'\r\n          when box_results.prize_name_raw = N'Giải ba'   then '3rd Prize'\r\n          else box_results.prize_name_raw\r\n        end as {{ dbt_resto.type_string() }})  as prize_name\r\n        ,box_results.prize_won\r\n        ,box_results.prize_value_raw\r\n        ,box_results.prize_value\r\n\r\nfrom    {{ ref('vietlot_power655_data') }}\r\nouter apply (\r\n  select  prizes.*\r\n  from    openjson(box_results) with (box_result nvarchar(max) '$' as json)\r\n  outer apply openjson(box_result)\r\n  with    (\r\n            prize_name_raw nvarchar(10) '$.prize_name',\r\n            prize_won int '$.prize_won',\r\n            prize_value_raw nvarchar(100) '$.prize_value_raw',\r\n            prize_value float '$.prize_value'\r\n          ) as prizes\r\n) as box_results\r\n\r\nwhere   box_results.prize_name_raw is not null\r\n\r\n{% endif %}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\staging\\staging_power655_box_detail.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.sql",
            "name": "staging_power655_box_detail",
            "alias": "staging_power655_box_detail",
            "checksum": {
                "name": "sha256",
                "checksum": "812ea6d8e1672d5bda9c60ff94b723d197c2c04d3285977a71b3702ca46d5388"
            },
            "tags": [],
            "refs": [
                [
                    "vietlot_power655_data"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "Box data in details at data quality level",
            "columns": {
                "sk_box_detail": {
                    "name": "sk_box_detail",
                    "description": "Surrograte key",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "box_id": {
                    "name": "box_id",
                    "description": "Box ID",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_name_raw": {
                    "name": "prize_name_raw",
                    "description": "Prize name with raw value",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_name": {
                    "name": "prize_name",
                    "description": "Prize name (mapping to English value)",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_won": {
                    "name": "prize_won",
                    "description": "No of ticket won the prize",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_value_raw": {
                    "name": "prize_value_raw",
                    "description": "Prize value in text format",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "prize_value": {
                    "name": "prize_value",
                    "description": "Prize value in numeric",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "transient": true,
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "materialized": "table",
                "schema": "staging"
            },
            "created_at": 1694070226.9808853,
            "compiled_code": "\n\nselect  \n  convert(varchar(32), hashbytes('MD5',  coalesce(cast(\n\n    concat('',\n      coalesce(cast(box_id as nvarchar), '') ,\n      coalesce(cast(box_results.prize_name_raw as nvarchar), '') ) as varchar ), '')), 2) as sk_box_detail\n        ,box_id\n        ,box_results.prize_name_raw\n        ,cast(case\n          when box_results.prize_name_raw = N'Giải nhất' then '1st Prize'\n          when box_results.prize_name_raw = N'Giải nhì'  then '2nd Prize'\n          when box_results.prize_name_raw = N'Giải ba'   then '3rd Prize'\n          else box_results.prize_name_raw\n        end as nvarchar)  as prize_name\n        ,box_results.prize_won\n        ,box_results.prize_value_raw\n        ,box_results.prize_value\n\nfrom    \"msdb\".\"landing\".\"power655_data\"\nouter apply (\n  select  prizes.*\n  from    openjson(box_results) with (box_result nvarchar(max) '$' as json)\n  outer apply openjson(box_result)\n  with    (\n            prize_name_raw nvarchar(10) '$.prize_name',\n            prize_won int '$.prize_won',\n            prize_value_raw nvarchar(100) '$.prize_value_raw',\n            prize_value float '$.prize_value'\n          ) as prizes\n) as box_results\n\nwhere   box_results.prize_name_raw is not null\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"staging\".\"staging_power655_box_detail\""
        },
        "seed.dbt_resto.vietlot_power655_data": {
            "compiled": true,
            "resource_type": "seed",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": "power655_data",
                "schema": "landing",
                "database": "msdb",
                "tags": [],
                "meta": {},
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {
                    "box_date": " datetime       ",
                    "box_id": " varchar(10)    ",
                    "box_name": " nvarchar(256)  ",
                    "box_result_numbers": " nvarchar(50)   ",
                    "box_results": " nvarchar(4000) ",
                    "created_at": " datetime       ",
                    "updated_at": " datetime       "
                },
                "full_refresh": true,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "quote_columns": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "msdb",
            "schema": "landing",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "vietlot_power655_data"
            ],
            "unique_id": "seed.dbt_resto.vietlot_power655_data",
            "raw_code": "",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\vietlot_power655_data.csv",
            "original_file_path": "seeds\\vietlot\\power655\\vietlot_power655_data.csv",
            "name": "vietlot_power655_data",
            "alias": "power655_data",
            "checksum": {
                "name": "sha256",
                "checksum": "fd927db979cde9ac1cce8d3db85cfd0bd4029a68e138797d3d773fcad29e7875"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "database": "{{ var('dbt_resto_power655_database', target.database) }}",
                "schema": "{{ var('dbt_resto_power655_schema', 'landing') }}",
                "alias": "{{ var('dbt_resto_power655_table', 'power655_data') }}",
                "full_refresh": true,
                "column_types": {
                    "box_date": "{% if target.type in ['sqlserver'] %} datetime       {% else %} timestamp {% endif %}",
                    "box_id": "{% if target.type in ['sqlserver'] %} varchar(10)    {% else %} varchar {% endif %}",
                    "box_name": "{% if target.type in ['sqlserver'] %} nvarchar(256)  {% else %} varchar {% endif %}",
                    "box_result_numbers": "{% if target.type in ['sqlserver'] %} nvarchar(50)   {% else %} varchar {% endif %}",
                    "box_results": "{% if target.type in ['sqlserver'] %} nvarchar(4000) {% else %} varchar {% endif %}",
                    "created_at": "{% if target.type in ['sqlserver'] %} datetime       {% else %} timestamp {% endif %}",
                    "updated_at": "{% if target.type in ['sqlserver'] %} datetime       {% else %} timestamp {% endif %}"
                }
            },
            "created_at": 1694070225.9875045,
            "compiled_code": "",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"msdb\".\"landing\".\"power655_data\""
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_table_alias_actual_expected.83b0634280": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "actual = expected",
                    "model": "{{ get_where_subquery(ref('verify_get_table_alias')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_table_alias"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_95964cc7afd3f6966651bd8fd84b2a95",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "config",
                "dbt_utils_expression_is_true_verify_get_table_alias_actual_expected"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_table_alias_actual_expected.83b0634280",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_95964cc7afd3f6966651bd8fd84b2a95\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_95964cc7afd3f6966651bd8fd84b2a95.sql",
            "original_file_path": "models\\config\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_get_table_alias_actual_expected",
            "alias": "dbt_utils_expression_is_true_v_95964cc7afd3f6966651bd8fd84b2a95",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_table_alias"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\config\\schema.yml\\dbt_utils_expression_is_true_v_95964cc7afd3f6966651bd8fd84b2a95.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_95964cc7afd3f6966651bd8fd84b2a95"
            },
            "created_at": 1694070226.0130968,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_table_alias\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(actual = expected)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_table_alias"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected.5623649e25": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "actual = expected",
                    "model": "{{ get_where_subquery(ref('verify_generate_schema_name')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_generate_schema_name"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_b5a8f72477fd13a836584d645cbe5292",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "override_default",
                "dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected.5623649e25",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_b5a8f72477fd13a836584d645cbe5292\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_b5a8f72477fd13a836584d645cbe5292.sql",
            "original_file_path": "models\\override_default\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected",
            "alias": "dbt_utils_expression_is_true_v_b5a8f72477fd13a836584d645cbe5292",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_generate_schema_name"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\override_default\\schema.yml\\dbt_utils_expression_is_true_v_b5a8f72477fd13a836584d645cbe5292.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_b5a8f72477fd13a836584d645cbe5292"
            },
            "created_at": 1694070226.0381076,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_generate_schema_name\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(actual = expected)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_generate_schema_name"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_datepart_actual_expected.579cb14d82": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "actual = expected",
                    "model": "{{ get_where_subquery(ref('verify_datepart')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_datepart"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_datepart_actual_expected"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_datepart_actual_expected.579cb14d82",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_verify_datepart_actual_expected.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_datepart_actual_expected",
            "alias": "dbt_utils_expression_is_true_verify_datepart_actual_expected",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_datepart"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\dbt_utils_expression_is_true_verify_datepart_actual_expected.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.048105,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_datepart\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(actual = expected)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_datepart"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_key_actual_expected.f10650ac08": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "actual = expected",
                    "model": "{{ get_where_subquery(ref('verify_get_time_key')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_key"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_6312f86c59447ec98ce13be392e8397d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_key_actual_expected"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_key_actual_expected.f10650ac08",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_6312f86c59447ec98ce13be392e8397d\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_6312f86c59447ec98ce13be392e8397d.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_key_actual_expected",
            "alias": "dbt_utils_expression_is_true_v_6312f86c59447ec98ce13be392e8397d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_key"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\dbt_utils_expression_is_true_v_6312f86c59447ec98ce13be392e8397d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_6312f86c59447ec98ce13be392e8397d"
            },
            "created_at": 1694070226.0521147,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_key\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(actual = expected)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_key"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_.196a62d483": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "coalesce(actual,'1900-01-01') = coalesce(expected, '1900-01-01')",
                    "model": "{{ get_where_subquery(ref('verify_str_to_date')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_str_to_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_33651f2c15734b3699f14f4a10b28c06",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_.196a62d483",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_33651f2c15734b3699f14f4a10b28c06\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_33651f2c15734b3699f14f4a10b28c06.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_",
            "alias": "dbt_utils_expression_is_true_v_33651f2c15734b3699f14f4a10b28c06",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_str_to_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\dbt_utils_expression_is_true_v_33651f2c15734b3699f14f4a10b28c06.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_33651f2c15734b3699f14f4a10b28c06"
            },
            "created_at": 1694070226.0571177,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_str_to_date\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(coalesce(actual,'1900-01-01') = coalesce(expected, '1900-01-01'))\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_str_to_date"
        },
        "test.integration_tests.unique_verify_get_base_times_hour_time_value.2857e797c6": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_base_times_hour_time_value"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_base_times_hour_time_value.2857e797c6",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_base_times_hour_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "unique_verify_get_base_times_hour_time_value",
            "alias": "unique_verify_get_base_times_hour_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\unique_verify_get_base_times_hour_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.0630531,
            "compiled_code": "\n    \n    \n\nselect\n    time_value as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_base_times_hour\"\nwhere time_value is not null\ngroup by time_value\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_base_times_hour"
        },
        "test.integration_tests.not_null_verify_get_base_times_hour_time_value.4b9e0e07f6": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_base_times_hour_time_value"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_base_times_hour_time_value.4b9e0e07f6",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_base_times_hour_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "not_null_verify_get_base_times_hour_time_value",
            "alias": "not_null_verify_get_base_times_hour_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\not_null_verify_get_base_times_hour_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.0650527,
            "compiled_code": "\n    \n    \n\n\n\nselect time_value\nfrom \"msdb\".\"resto\".\"verify_get_base_times_hour\"\nwhere time_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_base_times_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0.55995f0cf1": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.datepart(\"time_value\", \"minute\") }} = 0",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.datepart"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_0210539975f5357ac2aa36b59609b6c9",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0.55995f0cf1",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_0210539975f5357ac2aa36b59609b6c9\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_0210539975f5357ac2aa36b59609b6c9.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0",
            "alias": "dbt_utils_expression_is_true_v_0210539975f5357ac2aa36b59609b6c9",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\dbt_utils_expression_is_true_v_0210539975f5357ac2aa36b59609b6c9.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_0210539975f5357ac2aa36b59609b6c9"
            },
            "created_at": 1694070226.0701096,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_base_times_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(\n    datepart(minute, time_value)\n\n\n = 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_base_times_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0.2cf6632f3e": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.datepart(\"time_value\", \"second\") }} = 0",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.datepart"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_5a29e05987c87f878ab956b463cc9272",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0.2cf6632f3e",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_5a29e05987c87f878ab956b463cc9272\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_5a29e05987c87f878ab956b463cc9272.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0",
            "alias": "dbt_utils_expression_is_true_v_5a29e05987c87f878ab956b463cc9272",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\dbt_utils_expression_is_true_v_5a29e05987c87f878ab956b463cc9272.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_5a29e05987c87f878ab956b463cc9272"
            },
            "created_at": 1694070226.077127,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_base_times_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(\n    datepart(second, time_value)\n\n\n = 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_base_times_hour"
        },
        "test.integration_tests.unique_verify_get_base_times_minute_time_value.1b8f4aa3c2": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_base_times_minute_time_value"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_base_times_minute_time_value.1b8f4aa3c2",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_base_times_minute_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "unique_verify_get_base_times_minute_time_value",
            "alias": "unique_verify_get_base_times_minute_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\unique_verify_get_base_times_minute_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.082123,
            "compiled_code": "\n    \n    \n\nselect\n    time_value as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_base_times_minute\"\nwhere time_value is not null\ngroup by time_value\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_base_times_minute"
        },
        "test.integration_tests.not_null_verify_get_base_times_minute_time_value.fbcdd6c2ec": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_base_times_minute_time_value"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_base_times_minute_time_value.fbcdd6c2ec",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_base_times_minute_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "not_null_verify_get_base_times_minute_time_value",
            "alias": "not_null_verify_get_base_times_minute_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\not_null_verify_get_base_times_minute_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.083116,
            "compiled_code": "\n    \n    \n\n\n\nselect time_value\nfrom \"msdb\".\"resto\".\"verify_get_base_times_minute\"\nwhere time_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_base_times_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0.bbb807cc08": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.datepart(\"time_value\", \"second\") }} = 0",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.datepart"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_3b42c7862e8fd398fdea034c97f415b5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0.bbb807cc08",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_3b42c7862e8fd398fdea034c97f415b5\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_3b42c7862e8fd398fdea034c97f415b5.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0",
            "alias": "dbt_utils_expression_is_true_v_3b42c7862e8fd398fdea034c97f415b5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\dbt_utils_expression_is_true_v_3b42c7862e8fd398fdea034c97f415b5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_3b42c7862e8fd398fdea034c97f415b5"
            },
            "created_at": 1694070226.0851147,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_base_times_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(\n    datepart(second, time_value)\n\n\n = 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_base_times_minute"
        },
        "test.integration_tests.unique_verify_get_base_times_second_time_value.8f7a0195be": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_second')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_base_times_second_time_value"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_base_times_second_time_value.8f7a0195be",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_base_times_second_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "unique_verify_get_base_times_second_time_value",
            "alias": "unique_verify_get_base_times_second_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\unique_verify_get_base_times_second_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.0911765,
            "compiled_code": "\n    \n    \n\nselect\n    time_value as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_base_times_second\"\nwhere time_value is not null\ngroup by time_value\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_base_times_second"
        },
        "test.integration_tests.not_null_verify_get_base_times_second_time_value.6666c54e2a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_base_times_second')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_base_times_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_base_times_second_time_value"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_base_times_second_time_value.6666c54e2a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_base_times_second_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\schema.yml",
            "name": "not_null_verify_get_base_times_second_time_value",
            "alias": "not_null_verify_get_base_times_second_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_base_times_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\schema.yml\\not_null_verify_get_base_times_second_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.093185,
            "compiled_code": "\n    \n    \n\n\n\nselect time_value\nfrom \"msdb\".\"resto\".\"verify_get_base_times_second\"\nwhere time_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_base_times_second"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_key.6cb5645b91": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_time_key"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_time_key.6cb5645b91",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_time_key",
            "alias": "not_null_verify_get_time_dimension_hour_time_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.104863,
            "compiled_code": "\n    \n    \n\n\n\nselect time_key\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_key.40ac6bcdc9": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_time_key"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_time_key.40ac6bcdc9",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_time_key",
            "alias": "unique_verify_get_time_dimension_hour_time_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1078346,
            "compiled_code": "\n    \n    \n\nselect\n    time_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time_key is not null\ngroup by time_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0.b0a16bbd1c": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 230000,
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_2d724ea2e0b3eef38f4ec9bc26d9f704",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0.b0a16bbd1c",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_2d724ea2e0b3eef38f4ec9bc26d9f704\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_2d724ea2e0b3eef38f4ec9bc26d9f704.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0",
            "alias": "dbt_utils_accepted_range_verif_2d724ea2e0b3eef38f4ec9bc26d9f704",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_accepted_range_verif_2d724ea2e0b3eef38f4ec9bc26d9f704.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_2d724ea2e0b3eef38f4ec9bc26d9f704"
            },
            "created_at": 1694070226.1108325,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not time_key >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not time_key <= 230000\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_value.40da5a66ce": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_time_value"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_time_value.40da5a66ce",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_time_value",
            "alias": "not_null_verify_get_time_dimension_hour_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1198337,
            "compiled_code": "\n    \n    \n\n\n\nselect time_value\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_value.6d51d85fdd": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_value",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_time_value"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_time_value.6d51d85fdd",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_time_value.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_time_value",
            "alias": "unique_verify_get_time_dimension_hour_time_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_time_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1218014,
            "compiled_code": "\n    \n    \n\nselect\n    time_value as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time_value is not null\ngroup by time_value\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_value",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_string.6052fb441e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_string",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_time_string"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_time_string.6052fb441e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_time_string.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_time_string",
            "alias": "not_null_verify_get_time_dimension_hour_time_string",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_time_string.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1248016,
            "compiled_code": "\n    \n    \n\n\n\nselect time_string\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time_string is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_string",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_string.819ccd433f": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_string",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_time_string"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_time_string.819ccd433f",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_time_string.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_time_string",
            "alias": "unique_verify_get_time_dimension_hour_time_string",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_time_string.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.125828,
            "compiled_code": "\n    \n    \n\nselect\n    time_string as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time_string is not null\ngroup by time_string\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_string",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time24_string.24235bd903": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time24_string",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_time24_string"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_time24_string.24235bd903",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_time24_string.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_time24_string",
            "alias": "not_null_verify_get_time_dimension_hour_time24_string",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_time24_string.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1277568,
            "compiled_code": "\n    \n    \n\n\n\nselect time24_string\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time24_string is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time24_string",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_time24_string.aaba73be70": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time24_string",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_time24_string"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_time24_string.aaba73be70",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_time24_string.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_time24_string",
            "alias": "unique_verify_get_time_dimension_hour_time24_string",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_time24_string.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1288238,
            "compiled_code": "\n    \n    \n\nselect\n    time24_string as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere time24_string is not null\ngroup by time24_string\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time24_string",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_number.f6e460b28e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_hour_number"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_number.f6e460b28e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_hour_number.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_hour_number",
            "alias": "not_null_verify_get_time_dimension_hour_hour_number",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_hour_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1308246,
            "compiled_code": "\n    \n    \n\n\n\nselect hour_number\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour_number is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour_number",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0.053244f188": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 12,
                    "column_name": "hour_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_d6c3ec724f64911461d28c079551f1c4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0.053244f188",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_d6c3ec724f64911461d28c079551f1c4\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_d6c3ec724f64911461d28c079551f1c4.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0",
            "alias": "dbt_utils_accepted_range_verif_d6c3ec724f64911461d28c079551f1c4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_accepted_range_verif_d6c3ec724f64911461d28c079551f1c4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_d6c3ec724f64911461d28c079551f1c4"
            },
            "created_at": 1694070226.1328228,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_number >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_number <= 12\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour_number",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_name.2ece919e94": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_hour_name"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_name.2ece919e94",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_hour_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_hour_name",
            "alias": "not_null_verify_get_time_dimension_hour_hour_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_hour_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1368172,
            "compiled_code": "\n    \n    \n\n\n\nselect hour_name\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour_name",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour_name.2fef2e525b": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "hour_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_hour_name"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_hour_name.2fef2e525b",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_hour_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_hour_name",
            "alias": "unique_verify_get_time_dimension_hour_hour_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_hour_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.137813,
            "compiled_code": "\n    \n    \n\nselect\n    hour_name as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour_name is not null\ngroup by hour_name\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour_name",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_number.c98eeb55ce": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour24_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_hour24_number"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_number.c98eeb55ce",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_hour24_number.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_hour24_number",
            "alias": "not_null_verify_get_time_dimension_hour_hour24_number",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_hour24_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1397626,
            "compiled_code": "\n    \n    \n\n\n\nselect hour24_number\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour24_number is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_number",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_number.7a0f2b018b": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "hour24_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_hour24_number"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_number.7a0f2b018b",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_hour24_number.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_hour24_number",
            "alias": "unique_verify_get_time_dimension_hour_hour24_number",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_hour24_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1418002,
            "compiled_code": "\n    \n    \n\nselect\n    hour24_number as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour24_number is not null\ngroup by hour24_number\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_number",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0.769f49524e": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 23,
                    "column_name": "hour24_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_119a2ec414a4c092d2e241e3c0d83682",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0.769f49524e",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_119a2ec414a4c092d2e241e3c0d83682\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_119a2ec414a4c092d2e241e3c0d83682.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0",
            "alias": "dbt_utils_accepted_range_verif_119a2ec414a4c092d2e241e3c0d83682",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_accepted_range_verif_119a2ec414a4c092d2e241e3c0d83682.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_119a2ec414a4c092d2e241e3c0d83682"
            },
            "created_at": 1694070226.1438072,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour24_number >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour24_number <= 23\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_number",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_name.ed2603071a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour24_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_hour_hour24_name"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_name.ed2603071a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_hour_hour24_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "not_null_verify_get_time_dimension_hour_hour24_name",
            "alias": "not_null_verify_get_time_dimension_hour_hour24_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\not_null_verify_get_time_dimension_hour_hour24_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1488004,
            "compiled_code": "\n    \n    \n\n\n\nselect hour24_name\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour24_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_name",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_name.b9c97be807": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "hour24_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_hour_hour24_name"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_name.b9c97be807",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_hour_hour24_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "unique_verify_get_time_dimension_hour_hour24_name",
            "alias": "unique_verify_get_time_dimension_hour_hour24_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\unique_verify_get_time_dimension_hour_hour24_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.1508017,
            "compiled_code": "\n    \n    \n\nselect\n    hour24_name as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_hour\"\nwhere hour24_name is not null\ngroup by hour24_name\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_name",
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6.7547b65170": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.len('hour24_name') }} = 6",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.len"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_de2616ca8667932bfdb4c8114d94ba21",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6.7547b65170",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_de2616ca8667932bfdb4c8114d94ba21\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_de2616ca8667932bfdb4c8114d94ba21.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6",
            "alias": "dbt_utils_expression_is_true_v_de2616ca8667932bfdb4c8114d94ba21",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_de2616ca8667932bfdb4c8114d94ba21.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_de2616ca8667932bfdb4c8114d94ba21"
            },
            "created_at": 1694070226.1528091,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(len(hour24_name) = 6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_.415264634c": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "right(hour24_name, 4) = '0000'",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_4596ecb2bd8b616932f339d3637b21e1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_.415264634c",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_4596ecb2bd8b616932f339d3637b21e1\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_4596ecb2bd8b616932f339d3637b21e1.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_",
            "alias": "dbt_utils_expression_is_true_v_4596ecb2bd8b616932f339d3637b21e1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_4596ecb2bd8b616932f339d3637b21e1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_4596ecb2bd8b616932f339d3637b21e1"
            },
            "created_at": 1694070226.160807,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(right(hour24_name, 4) = '0000')\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number.962f83f7ca": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(left(hour24_name, 2) as {{ dbt_resto.type_int() }}) = hour24_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_650320eaf64b6ec7b0ae1f1fc58b664f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number.962f83f7ca",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_650320eaf64b6ec7b0ae1f1fc58b664f\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_650320eaf64b6ec7b0ae1f1fc58b664f.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number",
            "alias": "dbt_utils_expression_is_true_v_650320eaf64b6ec7b0ae1f1fc58b664f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_650320eaf64b6ec7b0ae1f1fc58b664f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_650320eaf64b6ec7b0ae1f1fc58b664f"
            },
            "created_at": 1694070226.1678069,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(left(hour24_name, 2) as int) = hour24_number)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9.5f29f1cfa3": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.len('hour_name') }} = 9",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.len"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_a5fe57d7e67e52a667cbfec829cb2aa7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9.5f29f1cfa3",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_a5fe57d7e67e52a667cbfec829cb2aa7\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_a5fe57d7e67e52a667cbfec829cb2aa7.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9",
            "alias": "dbt_utils_expression_is_true_v_a5fe57d7e67e52a667cbfec829cb2aa7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_a5fe57d7e67e52a667cbfec829cb2aa7.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_a5fe57d7e67e52a667cbfec829cb2aa7"
            },
            "created_at": 1694070226.1776476,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(len(hour_name) = 9)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_.39d1570ad0": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "left(right(hour_name, 7), 4) = '0000'",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_ae35bb7e3e69e11ebe8f7b65ebad5376",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_.39d1570ad0",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_ae35bb7e3e69e11ebe8f7b65ebad5376\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_ae35bb7e3e69e11ebe8f7b65ebad5376.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_",
            "alias": "dbt_utils_expression_is_true_v_ae35bb7e3e69e11ebe8f7b65ebad5376",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_ae35bb7e3e69e11ebe8f7b65ebad5376.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_ae35bb7e3e69e11ebe8f7b65ebad5376"
            },
            "created_at": 1694070226.1866677,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(left(right(hour_name, 7), 4) = '0000')\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_.05bc60173f": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "right(hour_name, 2) in ('AM','PM')",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_02b0b39c72a5bd9a486e71d605d5fe28",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_.05bc60173f",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_02b0b39c72a5bd9a486e71d605d5fe28\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_02b0b39c72a5bd9a486e71d605d5fe28.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_",
            "alias": "dbt_utils_expression_is_true_v_02b0b39c72a5bd9a486e71d605d5fe28",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_02b0b39c72a5bd9a486e71d605d5fe28.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_02b0b39c72a5bd9a486e71d605d5fe28"
            },
            "created_at": 1694070226.1937199,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(right(hour_name, 2) in ('AM','PM'))\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number.7b16500f77": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(left(hour_name, 2) as {{ dbt_resto.type_int() }}) = hour_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_34ebc6c357055bfd362584a3ae3aa58b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "hour_number != 0",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number.7b16500f77",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"hour_number != 0\",alias=\"dbt_utils_expression_is_true_v_34ebc6c357055bfd362584a3ae3aa58b\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_34ebc6c357055bfd362584a3ae3aa58b.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number",
            "alias": "dbt_utils_expression_is_true_v_34ebc6c357055bfd362584a3ae3aa58b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_34ebc6c357055bfd362584a3ae3aa58b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "hour_number != 0",
                "alias": "dbt_utils_expression_is_true_v_34ebc6c357055bfd362584a3ae3aa58b"
            },
            "created_at": 1694070226.1997263,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where hour_number != 0) dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(left(hour_name, 2) as int) = hour_number)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12.166dd28398": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(left(hour_name, 2) as {{ dbt_resto.type_int() }}) = 12",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_315c346751493fe353fed0197adbc5e8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "hour_number = 0",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12.166dd28398",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"hour_number = 0\",alias=\"dbt_utils_expression_is_true_v_315c346751493fe353fed0197adbc5e8\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_315c346751493fe353fed0197adbc5e8.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12",
            "alias": "dbt_utils_expression_is_true_v_315c346751493fe353fed0197adbc5e8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_315c346751493fe353fed0197adbc5e8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "hour_number = 0",
                "alias": "dbt_utils_expression_is_true_v_315c346751493fe353fed0197adbc5e8"
            },
            "created_at": 1694070226.204379,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where hour_number = 0) dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(left(hour_name, 2) as int) = 12)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name.90307c68ce": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "time24_string = hour24_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_c92828d7dfdd6e4308067e3067811ffb",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name.90307c68ce",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_c92828d7dfdd6e4308067e3067811ffb\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_c92828d7dfdd6e4308067e3067811ffb.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name",
            "alias": "dbt_utils_expression_is_true_v_c92828d7dfdd6e4308067e3067811ffb",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_c92828d7dfdd6e4308067e3067811ffb.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_c92828d7dfdd6e4308067e3067811ffb"
            },
            "created_at": 1694070226.210371,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(time24_string = hour24_name)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name.cc51bda591": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "time_string = hour_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_0ff9c8aaf16c5c4212adff79a40a5964",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name.cc51bda591",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_0ff9c8aaf16c5c4212adff79a40a5964\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_0ff9c8aaf16c5c4212adff79a40a5964.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_hour.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name",
            "alias": "dbt_utils_expression_is_true_v_0ff9c8aaf16c5c4212adff79a40a5964",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_hour.yml\\dbt_utils_expression_is_true_v_0ff9c8aaf16c5c4212adff79a40a5964.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_0ff9c8aaf16c5c4212adff79a40a5964"
            },
            "created_at": 1694070226.2143614,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_hour\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(time_string = hour_name)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_hour"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_minute_time_key.4c959b7405": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_minute_time_key"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_minute_time_key.4c959b7405",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_minute_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "not_null_verify_get_time_dimension_minute_time_key",
            "alias": "not_null_verify_get_time_dimension_minute_time_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\not_null_verify_get_time_dimension_minute_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.2203815,
            "compiled_code": "\n    \n    \n\n\n\nselect time_key\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere time_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.unique_verify_get_time_dimension_minute_time_key.9b49938cf0": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_minute_time_key"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_minute_time_key.9b49938cf0",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_minute_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "unique_verify_get_time_dimension_minute_time_key",
            "alias": "unique_verify_get_time_dimension_minute_time_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\unique_verify_get_time_dimension_minute_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.222392,
            "compiled_code": "\n    \n    \n\nselect\n    time_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere time_key is not null\ngroup by time_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0.940c8c15a7": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 235900,
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_714242db3f38c7bd122a59395cf21301",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0.940c8c15a7",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_714242db3f38c7bd122a59395cf21301\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_714242db3f38c7bd122a59395cf21301.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0",
            "alias": "dbt_utils_accepted_range_verif_714242db3f38c7bd122a59395cf21301",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_accepted_range_verif_714242db3f38c7bd122a59395cf21301.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_714242db3f38c7bd122a59395cf21301"
            },
            "created_at": 1694070226.2243583,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not time_key >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not time_key <= 235900\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_minute_minute_number.e020cf7358": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "minute_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_minute_minute_number"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_minute_minute_number.e020cf7358",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_minute_minute_number.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "not_null_verify_get_time_dimension_minute_minute_number",
            "alias": "not_null_verify_get_time_dimension_minute_minute_number",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\not_null_verify_get_time_dimension_minute_minute_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.2283742,
            "compiled_code": "\n    \n    \n\n\n\nselect minute_number\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere minute_number is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "minute_number",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0.c9f2b49b08": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 59,
                    "column_name": "minute_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_69e74f2fa285ce9b8fdc3b992e0f37d5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0.c9f2b49b08",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_69e74f2fa285ce9b8fdc3b992e0f37d5\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_69e74f2fa285ce9b8fdc3b992e0f37d5.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0",
            "alias": "dbt_utils_accepted_range_verif_69e74f2fa285ce9b8fdc3b992e0f37d5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_accepted_range_verif_69e74f2fa285ce9b8fdc3b992e0f37d5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_69e74f2fa285ce9b8fdc3b992e0f37d5"
            },
            "created_at": 1694070226.2293692,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not minute_number >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not minute_number <= 59\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "minute_number",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_minute_hour_minute_name.8821fe75c8": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour_minute_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_minute_hour_minute_name"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_minute_hour_minute_name.8821fe75c8",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_minute_hour_minute_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "not_null_verify_get_time_dimension_minute_hour_minute_name",
            "alias": "not_null_verify_get_time_dimension_minute_hour_minute_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\not_null_verify_get_time_dimension_minute_hour_minute_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.233371,
            "compiled_code": "\n    \n    \n\n\n\nselect hour_minute_name\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere hour_minute_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour_minute_name",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.unique_verify_get_time_dimension_minute_hour_minute_name.11761c97cc": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "hour_minute_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_minute_hour_minute_name"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_minute_hour_minute_name.11761c97cc",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_minute_hour_minute_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "unique_verify_get_time_dimension_minute_hour_minute_name",
            "alias": "unique_verify_get_time_dimension_minute_hour_minute_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\unique_verify_get_time_dimension_minute_hour_minute_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.234377,
            "compiled_code": "\n    \n    \n\nselect\n    hour_minute_name as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere hour_minute_name is not null\ngroup by hour_minute_name\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour_minute_name",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_minute_hour24_minute_name.273e260049": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour24_minute_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_minute_hour24_minute_name"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_minute_hour24_minute_name.273e260049",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_minute_hour24_minute_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "not_null_verify_get_time_dimension_minute_hour24_minute_name",
            "alias": "not_null_verify_get_time_dimension_minute_hour24_minute_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\not_null_verify_get_time_dimension_minute_hour24_minute_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.2363696,
            "compiled_code": "\n    \n    \n\n\n\nselect hour24_minute_name\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere hour24_minute_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_minute_name",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.unique_verify_get_time_dimension_minute_hour24_minute_name.0e495cdf8f": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "hour24_minute_name",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_minute_hour24_minute_name"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_minute_hour24_minute_name.0e495cdf8f",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_minute_hour24_minute_name.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "unique_verify_get_time_dimension_minute_hour24_minute_name",
            "alias": "unique_verify_get_time_dimension_minute_hour24_minute_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\unique_verify_get_time_dimension_minute_hour24_minute_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.2373712,
            "compiled_code": "\n    \n    \n\nselect\n    hour24_minute_name as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_minute\"\nwhere hour24_minute_name is not null\ngroup by hour24_minute_name\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "hour24_minute_name",
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6.a9e9d32195": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.len('hour24_minute_name') }} = 6",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.len"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_b8178c709ef12aa2a29e348185188b2f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6.a9e9d32195",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_b8178c709ef12aa2a29e348185188b2f\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_b8178c709ef12aa2a29e348185188b2f.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6",
            "alias": "dbt_utils_expression_is_true_v_b8178c709ef12aa2a29e348185188b2f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_b8178c709ef12aa2a29e348185188b2f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_b8178c709ef12aa2a29e348185188b2f"
            },
            "created_at": 1694070226.239316,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(len(hour24_minute_name) = 6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_.ae7a7fe520": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "right(hour24_minute_name, 2) = '00'",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_567954cf2ea74979d3f87dcc594e8083",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_.ae7a7fe520",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_567954cf2ea74979d3f87dcc594e8083\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_567954cf2ea74979d3f87dcc594e8083.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_",
            "alias": "dbt_utils_expression_is_true_v_567954cf2ea74979d3f87dcc594e8083",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_567954cf2ea74979d3f87dcc594e8083.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_567954cf2ea74979d3f87dcc594e8083"
            },
            "created_at": 1694070226.2443693,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(right(hour24_minute_name, 2) = '00')\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number.385ddd2bdf": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(left(hour24_minute_name, 2) as {{ dbt_resto.type_int() }}) = hour24_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_b2bda4da1dd7849f530f27ba2d107024",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number.385ddd2bdf",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_b2bda4da1dd7849f530f27ba2d107024\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_b2bda4da1dd7849f530f27ba2d107024.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number",
            "alias": "dbt_utils_expression_is_true_v_b2bda4da1dd7849f530f27ba2d107024",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_b2bda4da1dd7849f530f27ba2d107024.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_b2bda4da1dd7849f530f27ba2d107024"
            },
            "created_at": 1694070226.2483735,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(left(hour24_minute_name, 2) as int) = hour24_number)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number.c0ba22106c": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(right(left(hour24_minute_name, 4),2) as {{ dbt_resto.type_int() }}) = minute_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_5662b75e43ddaef5a41141e2f47e5f87",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number.c0ba22106c",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_5662b75e43ddaef5a41141e2f47e5f87\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_5662b75e43ddaef5a41141e2f47e5f87.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number",
            "alias": "dbt_utils_expression_is_true_v_5662b75e43ddaef5a41141e2f47e5f87",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_5662b75e43ddaef5a41141e2f47e5f87.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_5662b75e43ddaef5a41141e2f47e5f87"
            },
            "created_at": 1694070226.2523613,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(right(left(hour24_minute_name, 4),2) as int) = minute_number)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9.a46539940d": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "{{ dbt_resto.len('hour_minute_name') }} = 9",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.len"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_4e3392fe53efbc734425976581ec596e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9.a46539940d",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_4e3392fe53efbc734425976581ec596e\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_4e3392fe53efbc734425976581ec596e.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9",
            "alias": "dbt_utils_expression_is_true_v_4e3392fe53efbc734425976581ec596e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_4e3392fe53efbc734425976581ec596e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_4e3392fe53efbc734425976581ec596e"
            },
            "created_at": 1694070226.2573245,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(len(hour_minute_name) = 9)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_.e82de94636": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "left(right(hour_minute_name, 5), 2) = '00'",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_1fb7fb39cfc6098842fd2f8cfe0c65d6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_.e82de94636",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_1fb7fb39cfc6098842fd2f8cfe0c65d6\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_1fb7fb39cfc6098842fd2f8cfe0c65d6.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_",
            "alias": "dbt_utils_expression_is_true_v_1fb7fb39cfc6098842fd2f8cfe0c65d6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_1fb7fb39cfc6098842fd2f8cfe0c65d6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_1fb7fb39cfc6098842fd2f8cfe0c65d6"
            },
            "created_at": 1694070226.262361,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(left(right(hour_minute_name, 5), 2) = '00')\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_.9e4f0d9cfa": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "right(hour_minute_name, 2) in ('AM','PM')",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_9fa30f9c8546ed53af3cdb0cf5763fe7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_.9e4f0d9cfa",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_9fa30f9c8546ed53af3cdb0cf5763fe7\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_9fa30f9c8546ed53af3cdb0cf5763fe7.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_",
            "alias": "dbt_utils_expression_is_true_v_9fa30f9c8546ed53af3cdb0cf5763fe7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_9fa30f9c8546ed53af3cdb0cf5763fe7.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_9fa30f9c8546ed53af3cdb0cf5763fe7"
            },
            "created_at": 1694070226.26536,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(right(hour_minute_name, 2) in ('AM','PM'))\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number.888b8dfa28": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(left(hour_minute_name, 2) as {{ dbt_resto.type_int() }}) = hour_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_667c6adfd894aab71a2d8e5a02dc8d85",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "hour_number != 0",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number.888b8dfa28",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"hour_number != 0\",alias=\"dbt_utils_expression_is_true_v_667c6adfd894aab71a2d8e5a02dc8d85\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_667c6adfd894aab71a2d8e5a02dc8d85.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number",
            "alias": "dbt_utils_expression_is_true_v_667c6adfd894aab71a2d8e5a02dc8d85",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_667c6adfd894aab71a2d8e5a02dc8d85.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "hour_number != 0",
                "alias": "dbt_utils_expression_is_true_v_667c6adfd894aab71a2d8e5a02dc8d85"
            },
            "created_at": 1694070226.2703724,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where hour_number != 0) dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(left(hour_minute_name, 2) as int) = hour_number)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12.1ba9d98873": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(left(hour_minute_name, 2) as {{ dbt_resto.type_int() }}) = 12",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_29bd5bdde1f412f54aa1a2fc684488b6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "hour_number = 0",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12.1ba9d98873",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"hour_number = 0\",alias=\"dbt_utils_expression_is_true_v_29bd5bdde1f412f54aa1a2fc684488b6\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_29bd5bdde1f412f54aa1a2fc684488b6.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12",
            "alias": "dbt_utils_expression_is_true_v_29bd5bdde1f412f54aa1a2fc684488b6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_29bd5bdde1f412f54aa1a2fc684488b6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "hour_number = 0",
                "alias": "dbt_utils_expression_is_true_v_29bd5bdde1f412f54aa1a2fc684488b6"
            },
            "created_at": 1694070226.2753701,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where hour_number = 0) dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(left(hour_minute_name, 2) as int) = 12)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number.12cbae0313": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "cast(right(left(hour_minute_name, 4),2) as {{ dbt_resto.type_int() }}) = minute_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_minute')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_resto.type_int"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_minute"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_v_6a5e142ec514ce422992e395e5f7312f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number"
            ],
            "unique_id": "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number.12cbae0313",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_v_6a5e142ec514ce422992e395e5f7312f\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_expression_is_true_v_6a5e142ec514ce422992e395e5f7312f.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_minute.yml",
            "name": "dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number",
            "alias": "dbt_utils_expression_is_true_v_6a5e142ec514ce422992e395e5f7312f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_minute"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_minute.yml\\dbt_utils_expression_is_true_v_6a5e142ec514ce422992e395e5f7312f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_v_6a5e142ec514ce422992e395e5f7312f"
            },
            "created_at": 1694070226.2803698,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"resto\".\"verify_get_time_dimension_minute\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(cast(right(left(hour_minute_name, 4),2) as int) = minute_number)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.verify_get_time_dimension_minute"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_second_time_key.3e38a35f21": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_second')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_second_time_key"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_second_time_key.3e38a35f21",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_second_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_second.yml",
            "name": "not_null_verify_get_time_dimension_second_time_key",
            "alias": "not_null_verify_get_time_dimension_second_time_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_second.yml\\not_null_verify_get_time_dimension_second_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.2863607,
            "compiled_code": "\n    \n    \n\n\n\nselect time_key\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_second\"\nwhere time_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_second"
        },
        "test.integration_tests.unique_verify_get_time_dimension_second_time_key.06079d47be": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_second')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "unique_verify_get_time_dimension_second_time_key"
            ],
            "unique_id": "test.integration_tests.unique_verify_get_time_dimension_second_time_key.06079d47be",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "unique_verify_get_time_dimension_second_time_key.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_second.yml",
            "name": "unique_verify_get_time_dimension_second_time_key",
            "alias": "unique_verify_get_time_dimension_second_time_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_second.yml\\unique_verify_get_time_dimension_second_time_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.287361,
            "compiled_code": "\n    \n    \n\nselect\n    time_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_second\"\nwhere time_key is not null\ngroup by time_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_second"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0.94566f4d0a": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 235959,
                    "column_name": "time_key",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_second')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_e72c7b5f428d2d9abfc36120b4a34a13",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0.94566f4d0a",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_e72c7b5f428d2d9abfc36120b4a34a13\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_e72c7b5f428d2d9abfc36120b4a34a13.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_second.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0",
            "alias": "dbt_utils_accepted_range_verif_e72c7b5f428d2d9abfc36120b4a34a13",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_second.yml\\dbt_utils_accepted_range_verif_e72c7b5f428d2d9abfc36120b4a34a13.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_e72c7b5f428d2d9abfc36120b4a34a13"
            },
            "created_at": 1694070226.2893732,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_second\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not time_key >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not time_key <= 235959\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "time_key",
            "file_key_name": "models.verify_get_time_dimension_second"
        },
        "test.integration_tests.not_null_verify_get_time_dimension_second_second_number.c30800f56b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "second_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_second')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "not_null_verify_get_time_dimension_second_second_number"
            ],
            "unique_id": "test.integration_tests.not_null_verify_get_time_dimension_second_second_number.c30800f56b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "not_null_verify_get_time_dimension_second_second_number.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_second.yml",
            "name": "not_null_verify_get_time_dimension_second_second_number",
            "alias": "not_null_verify_get_time_dimension_second_second_number",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_second.yml\\not_null_verify_get_time_dimension_second_second_number.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.2934234,
            "compiled_code": "\n    \n    \n\n\n\nselect second_number\nfrom \"msdb\".\"resto\".\"verify_get_time_dimension_second\"\nwhere second_number is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "second_number",
            "file_key_name": "models.verify_get_time_dimension_second"
        },
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0.ce810077c6": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 59,
                    "column_name": "second_number",
                    "model": "{{ get_where_subquery(ref('verify_get_time_dimension_second')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.integration_tests.verify_get_time_dimension_second"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_verif_8f5e17e4f94e32886e6dd2bcfc608580",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "integration_tests",
                "sql",
                "datetime",
                "dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0"
            ],
            "unique_id": "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0.ce810077c6",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_verif_8f5e17e4f94e32886e6dd2bcfc608580\") }}",
            "language": "sql",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "dbt_utils_accepted_range_verif_8f5e17e4f94e32886e6dd2bcfc608580.sql",
            "original_file_path": "models\\sql\\datetime\\verify_get_time_dimension_second.yml",
            "name": "dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0",
            "alias": "dbt_utils_accepted_range_verif_8f5e17e4f94e32886e6dd2bcfc608580",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "verify_get_time_dimension_second"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\integration_tests\\models\\sql\\datetime\\verify_get_time_dimension_second.yml\\dbt_utils_accepted_range_verif_8f5e17e4f94e32886e6dd2bcfc608580.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_accepted_range_verif_8f5e17e4f94e32886e6dd2bcfc608580"
            },
            "created_at": 1694070226.2954297,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"msdb\".\"resto\".\"verify_get_time_dimension_second\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not second_number >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not second_number <= 59\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "second_number",
            "file_key_name": "models.verify_get_time_dimension_second"
        },
        "test.dbt_resto.not_null_dim_box_box_key.b16bc11428": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_key",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_key"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_key.b16bc11428",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_key",
            "alias": "not_null_dim_box_box_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3190355,
            "compiled_code": "\n    \n    \n\n\n\nselect box_key\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_key",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.unique_dim_box_box_key.882dfb24f6": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_key",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_dim_box_box_key"
            ],
            "unique_id": "test.dbt_resto.unique_dim_box_box_key.882dfb24f6",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_dim_box_box_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "unique_dim_box_box_key",
            "alias": "unique_dim_box_box_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\unique_dim_box_box_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.321034,
            "compiled_code": "\n    \n    \n\nselect\n    box_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_key is not null\ngroup by box_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_key",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_id.7cf1c755c0": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_id",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_id"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_id.7cf1c755c0",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_id.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_id",
            "alias": "not_null_dim_box_box_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3250287,
            "compiled_code": "\n    \n    \n\n\n\nselect box_id\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_id",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.unique_dim_box_box_id.bcbdf63964": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_id",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_dim_box_box_id"
            ],
            "unique_id": "test.dbt_resto.unique_dim_box_box_id.bcbdf63964",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_dim_box_box_id.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "unique_dim_box_box_id",
            "alias": "unique_dim_box_box_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\unique_dim_box_box_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3270402,
            "compiled_code": "\n    \n    \n\nselect\n    box_id as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_id is not null\ngroup by box_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_id",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_date.aadb37452c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_date",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_date"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_date.aadb37452c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_date",
            "alias": "not_null_dim_box_box_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.32904,
            "compiled_code": "\n    \n    \n\n\n\nselect box_date\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_date",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_numbers.6cd2b13759": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_numbers",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_numbers"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_numbers.6cd2b13759",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_numbers.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_numbers",
            "alias": "not_null_dim_box_box_result_numbers",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_numbers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3310308,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_numbers\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_numbers is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_numbers",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_number_1.62ad3f5049": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_number_1"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_number_1.62ad3f5049",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_number_1.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_number_1",
            "alias": "not_null_dim_box_box_result_number_1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_number_1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3330388,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_1\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_number_1 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2.831c1ec966": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_2",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_ee0119b633d1739121666efeed627adb",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2.831c1ec966",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_ee0119b633d1739121666efeed627adb\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_ee0119b633d1739121666efeed627adb.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2",
            "alias": "dbt_utils_expression_is_true_d_ee0119b633d1739121666efeed627adb",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_ee0119b633d1739121666efeed627adb.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_ee0119b633d1739121666efeed627adb"
            },
            "created_at": 1694070226.335046,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 != box_result_number_2)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3.d15be44956": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_3",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_bd7096f6e87524d0117bc5cb7b253cf4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3.d15be44956",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_bd7096f6e87524d0117bc5cb7b253cf4\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_bd7096f6e87524d0117bc5cb7b253cf4.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3",
            "alias": "dbt_utils_expression_is_true_d_bd7096f6e87524d0117bc5cb7b253cf4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_bd7096f6e87524d0117bc5cb7b253cf4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_bd7096f6e87524d0117bc5cb7b253cf4"
            },
            "created_at": 1694070226.3410404,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 != box_result_number_3)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4.87ac1d2e38": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_4",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_64d17680173bd2283c2991334390b9cd",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4.87ac1d2e38",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_64d17680173bd2283c2991334390b9cd\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_64d17680173bd2283c2991334390b9cd.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4",
            "alias": "dbt_utils_expression_is_true_d_64d17680173bd2283c2991334390b9cd",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_64d17680173bd2283c2991334390b9cd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_64d17680173bd2283c2991334390b9cd"
            },
            "created_at": 1694070226.3460417,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 != box_result_number_4)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5.b37ad70c7b": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_5",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_e8155779e8af983fd7326064317c042e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5.b37ad70c7b",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_e8155779e8af983fd7326064317c042e\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_e8155779e8af983fd7326064317c042e.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5",
            "alias": "dbt_utils_expression_is_true_d_e8155779e8af983fd7326064317c042e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_e8155779e8af983fd7326064317c042e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_e8155779e8af983fd7326064317c042e"
            },
            "created_at": 1694070226.3550398,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 != box_result_number_5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6.ce0ae89185": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_6",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_a5b6ab0b77e54b2d694d07080d0a5192",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6.ce0ae89185",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_a5b6ab0b77e54b2d694d07080d0a5192\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_a5b6ab0b77e54b2d694d07080d0a5192.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6",
            "alias": "dbt_utils_expression_is_true_d_a5b6ab0b77e54b2d694d07080d0a5192",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_a5b6ab0b77e54b2d694d07080d0a5192.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_a5b6ab0b77e54b2d694d07080d0a5192"
            },
            "created_at": 1694070226.3640616,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 != box_result_number_6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_number_2.9d962bb07f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_number_2"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_number_2.9d962bb07f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_number_2.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_number_2",
            "alias": "not_null_dim_box_box_result_number_2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_number_2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3700387,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_2\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_number_2 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3.f39d62bfe0": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_3",
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_65aa9e2c4fbb6cfaa8b587e0829535ea",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3.f39d62bfe0",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_65aa9e2c4fbb6cfaa8b587e0829535ea\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_65aa9e2c4fbb6cfaa8b587e0829535ea.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3",
            "alias": "dbt_utils_expression_is_true_d_65aa9e2c4fbb6cfaa8b587e0829535ea",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_65aa9e2c4fbb6cfaa8b587e0829535ea.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_65aa9e2c4fbb6cfaa8b587e0829535ea"
            },
            "created_at": 1694070226.372039,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_2 != box_result_number_3)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4.6340802cad": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_4",
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_9445e9cd071e09c30cf2ccad36ba6865",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4.6340802cad",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_9445e9cd071e09c30cf2ccad36ba6865\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_9445e9cd071e09c30cf2ccad36ba6865.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4",
            "alias": "dbt_utils_expression_is_true_d_9445e9cd071e09c30cf2ccad36ba6865",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_9445e9cd071e09c30cf2ccad36ba6865.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_9445e9cd071e09c30cf2ccad36ba6865"
            },
            "created_at": 1694070226.3770256,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_2 != box_result_number_4)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5.5ddd4797a1": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_5",
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_c9c6bd1806b4258b5efda8adfff7d849",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5.5ddd4797a1",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_c9c6bd1806b4258b5efda8adfff7d849\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_c9c6bd1806b4258b5efda8adfff7d849.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5",
            "alias": "dbt_utils_expression_is_true_d_c9c6bd1806b4258b5efda8adfff7d849",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_c9c6bd1806b4258b5efda8adfff7d849.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_c9c6bd1806b4258b5efda8adfff7d849"
            },
            "created_at": 1694070226.3820395,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_2 != box_result_number_5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6.55053d24e6": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_6",
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_4bb9d9d714f44c067392a63a124aab63",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6.55053d24e6",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_4bb9d9d714f44c067392a63a124aab63\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_4bb9d9d714f44c067392a63a124aab63.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6",
            "alias": "dbt_utils_expression_is_true_d_4bb9d9d714f44c067392a63a124aab63",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_4bb9d9d714f44c067392a63a124aab63.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_4bb9d9d714f44c067392a63a124aab63"
            },
            "created_at": 1694070226.3860307,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_2 != box_result_number_6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_number_3.0cc5d7108c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_3",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_number_3"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_number_3.0cc5d7108c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_number_3.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_number_3",
            "alias": "not_null_dim_box_box_result_number_3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_number_3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.3916712,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_3\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_number_3 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_3",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4.7d5c748bf7": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_4",
                    "column_name": "box_result_number_3",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_ec3bd1630904d31b189a0d4f47654e19",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4.7d5c748bf7",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_ec3bd1630904d31b189a0d4f47654e19\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_ec3bd1630904d31b189a0d4f47654e19.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4",
            "alias": "dbt_utils_expression_is_true_d_ec3bd1630904d31b189a0d4f47654e19",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_ec3bd1630904d31b189a0d4f47654e19.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_ec3bd1630904d31b189a0d4f47654e19"
            },
            "created_at": 1694070226.3966389,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_3 != box_result_number_4)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_3",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5.fbecf9fa91": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_5",
                    "column_name": "box_result_number_3",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_c31e0c547494d98847620e7cd923ef75",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5.fbecf9fa91",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_c31e0c547494d98847620e7cd923ef75\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_c31e0c547494d98847620e7cd923ef75.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5",
            "alias": "dbt_utils_expression_is_true_d_c31e0c547494d98847620e7cd923ef75",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_c31e0c547494d98847620e7cd923ef75.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_c31e0c547494d98847620e7cd923ef75"
            },
            "created_at": 1694070226.4006689,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_3 != box_result_number_5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_3",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6.3c13d3612a": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_6",
                    "column_name": "box_result_number_3",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_c8a9190e15b4043764713325d59a8322",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6.3c13d3612a",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_c8a9190e15b4043764713325d59a8322\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_c8a9190e15b4043764713325d59a8322.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6",
            "alias": "dbt_utils_expression_is_true_d_c8a9190e15b4043764713325d59a8322",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_c8a9190e15b4043764713325d59a8322.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_c8a9190e15b4043764713325d59a8322"
            },
            "created_at": 1694070226.4053106,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_3 != box_result_number_6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_3",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_number_4.b4a01fd9ed": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_4",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_number_4.b4a01fd9ed",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_number_4.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_number_4",
            "alias": "not_null_dim_box_box_result_number_4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_number_4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4113111,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_4\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_number_4 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_4",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5.66ed75e168": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_5",
                    "column_name": "box_result_number_4",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_075a4bb221f696ccb31405dc07ebc309",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5.66ed75e168",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_075a4bb221f696ccb31405dc07ebc309\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_075a4bb221f696ccb31405dc07ebc309.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5",
            "alias": "dbt_utils_expression_is_true_d_075a4bb221f696ccb31405dc07ebc309",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_075a4bb221f696ccb31405dc07ebc309.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_075a4bb221f696ccb31405dc07ebc309"
            },
            "created_at": 1694070226.4133124,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_4 != box_result_number_5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_4",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6.cfc0f21018": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_6",
                    "column_name": "box_result_number_4",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_d1d4a61e3317a9f3239a9b8888d862ee",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6.cfc0f21018",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_d1d4a61e3317a9f3239a9b8888d862ee\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_d1d4a61e3317a9f3239a9b8888d862ee.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6",
            "alias": "dbt_utils_expression_is_true_d_d1d4a61e3317a9f3239a9b8888d862ee",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_d1d4a61e3317a9f3239a9b8888d862ee.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_d1d4a61e3317a9f3239a9b8888d862ee"
            },
            "created_at": 1694070226.4173114,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_4 != box_result_number_6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_4",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_number_5.173e838274": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_5",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_number_5.173e838274",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_number_5.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_number_5",
            "alias": "not_null_dim_box_box_result_number_5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_number_5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4223144,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_5\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_number_5 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_5",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6.22aa7e5d89": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "!= box_result_number_6",
                    "column_name": "box_result_number_5",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_d_f6e16f9e8699ac30e218d9528b843925",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6.22aa7e5d89",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_f6e16f9e8699ac30e218d9528b843925\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_d_f6e16f9e8699ac30e218d9528b843925.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6",
            "alias": "dbt_utils_expression_is_true_d_f6e16f9e8699ac30e218d9528b843925",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\dbt_utils_expression_is_true_d_f6e16f9e8699ac30e218d9528b843925.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_d_f6e16f9e8699ac30e218d9528b843925"
            },
            "created_at": 1694070226.4252462,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"dim_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_5 != box_result_number_6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_5",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_box_box_result_number_6.b31bf8c462": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_6",
                    "model": "{{ get_where_subquery(ref('dim_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_box_box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_box_box_result_number_6.b31bf8c462",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_box_box_result_number_6.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_box.yml",
            "name": "not_null_dim_box_box_result_number_6",
            "alias": "not_null_dim_box_box_result_number_6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_box.yml\\not_null_dim_box_box_result_number_6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4312465,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_6\nfrom \"msdb\".\"mart\".\"dim_box\"\nwhere box_result_number_6 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_6",
            "file_key_name": "models.dim_box"
        },
        "test.dbt_resto.not_null_dim_date_date_key.881d0a31b6": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "date_key",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_date_key"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_date_key.881d0a31b6",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_date_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_date_key",
            "alias": "not_null_dim_date_date_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_date_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4372463,
            "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere date_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "date_key",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.unique_dim_date_date_key.0869fd48f9": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "date_key",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_dim_date_date_key"
            ],
            "unique_id": "test.dbt_resto.unique_dim_date_date_key.0869fd48f9",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_dim_date_date_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "unique_dim_date_date_key",
            "alias": "unique_dim_date_date_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\unique_dim_date_date_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4413266,
            "compiled_code": "\n    \n    \n\nselect\n    date_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere date_key is not null\ngroup by date_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "date_key",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_date_box_date.63ab3e2f98": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_date",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_box_date"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_box_date.63ab3e2f98",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_box_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_box_date",
            "alias": "not_null_dim_date_box_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_box_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4443285,
            "compiled_code": "\n    \n    \n\n\n\nselect box_date\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_date",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.unique_dim_date_box_date.00ea449b36": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_date",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_dim_date_box_date"
            ],
            "unique_id": "test.dbt_resto.unique_dim_date_box_date.00ea449b36",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_dim_date_box_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "unique_dim_date_box_date",
            "alias": "unique_dim_date_box_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\unique_dim_date_box_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4463325,
            "compiled_code": "\n    \n    \n\nselect\n    box_date as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_date is not null\ngroup by box_date\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_date",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_date_box_day.f3cabd7806": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_day",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_box_day"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_box_day.f3cabd7806",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_box_day.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_box_day",
            "alias": "not_null_dim_date_box_day",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_box_day.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4493554,
            "compiled_code": "\n    \n    \n\n\n\nselect box_day\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_day is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_day",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_date_box_week.c4fbb026af": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_week",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_box_week"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_box_week.c4fbb026af",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_box_week.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_box_week",
            "alias": "not_null_dim_date_box_week",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_box_week.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4532971,
            "compiled_code": "\n    \n    \n\n\n\nselect box_week\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_week is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_week",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_date_box_month.107d6bb62f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_month",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_box_month"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_box_month.107d6bb62f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_box_month.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_box_month",
            "alias": "not_null_dim_date_box_month",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_box_month.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4553041,
            "compiled_code": "\n    \n    \n\n\n\nselect box_month\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_month is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_month",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_date_box_month_name.070c5fdd5e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_month_name",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_box_month_name"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_box_month_name.070c5fdd5e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_box_month_name.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_box_month_name",
            "alias": "not_null_dim_date_box_month_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_box_month_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4592605,
            "compiled_code": "\n    \n    \n\n\n\nselect box_month_name\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_month_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_month_name",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_date_box_year.e2fc6c3a22": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_year",
                    "model": "{{ get_where_subquery(ref('dim_date')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_date_box_year"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_date_box_year.e2fc6c3a22",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_date_box_year.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_date.yml",
            "name": "not_null_dim_date_box_year",
            "alias": "not_null_dim_date_box_year",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_date.yml\\not_null_dim_date_box_year.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.4612603,
            "compiled_code": "\n    \n    \n\n\n\nselect box_year\nfrom \"msdb\".\"mart\".\"dim_date\"\nwhere box_year is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_year",
            "file_key_name": "models.dim_date"
        },
        "test.dbt_resto.not_null_dim_prize_prize_key.2f1a24a14a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_key",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_prize_prize_key"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_prize_prize_key.2f1a24a14a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_prize_prize_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "not_null_dim_prize_prize_key",
            "alias": "not_null_dim_prize_prize_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\not_null_dim_prize_prize_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5177152,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_key\nfrom \"msdb\".\"mart\".\"dim_prize\"\nwhere prize_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_key",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.unique_dim_prize_prize_key.89c819e56f": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "prize_key",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_dim_prize_prize_key"
            ],
            "unique_id": "test.dbt_resto.unique_dim_prize_prize_key.89c819e56f",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_dim_prize_prize_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "unique_dim_prize_prize_key",
            "alias": "unique_dim_prize_prize_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\unique_dim_prize_prize_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5197,
            "compiled_code": "\n    \n    \n\nselect\n    prize_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"dim_prize\"\nwhere prize_key is not null\ngroup by prize_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_key",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.not_null_dim_prize_prize_name.f334b496c0": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_name",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_prize_prize_name"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_prize_prize_name.f334b496c0",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_prize_prize_name.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "not_null_dim_prize_prize_name",
            "alias": "not_null_dim_prize_prize_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\not_null_dim_prize_prize_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5207093,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_name\nfrom \"msdb\".\"mart\".\"dim_prize\"\nwhere prize_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_name",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.a9ef660412": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "Jackpot 1",
                        "Jackpot 2",
                        "1st Prize",
                        "2nd Prize",
                        "3rd Prize"
                    ],
                    "column_name": "prize_name",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_dim_prize_8e42716fdcf658a4b79221eeb30200c7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize"
            ],
            "unique_id": "test.dbt_resto.accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.a9ef660412",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_prize_8e42716fdcf658a4b79221eeb30200c7\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "accepted_values_dim_prize_8e42716fdcf658a4b79221eeb30200c7.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize",
            "alias": "accepted_values_dim_prize_8e42716fdcf658a4b79221eeb30200c7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\accepted_values_dim_prize_8e42716fdcf658a4b79221eeb30200c7.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "accepted_values_dim_prize_8e42716fdcf658a4b79221eeb30200c7"
            },
            "created_at": 1694070226.5237348,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        prize_name as value_field,\n        count(*) as n_records\n\n    from \"msdb\".\"mart\".\"dim_prize\"\n    group by prize_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Jackpot 1','Jackpot 2','1st Prize','2nd Prize','3rd Prize'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_name",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.not_null_dim_prize_prize_order.bc63d43f80": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_order",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_dim_prize_prize_order"
            ],
            "unique_id": "test.dbt_resto.not_null_dim_prize_prize_order.bc63d43f80",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_dim_prize_prize_order.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "not_null_dim_prize_prize_order",
            "alias": "not_null_dim_prize_prize_order",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\not_null_dim_prize_prize_order.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5387223,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_order\nfrom \"msdb\".\"mart\".\"dim_prize\"\nwhere prize_order is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_order",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___1.05fc15ef2d": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= 1",
                    "column_name": "prize_order",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "prize_name = 'Jackpot 1'",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_prize_prize_order___1"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___1.05fc15ef2d",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"prize_name = 'Jackpot 1'\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_dim_prize_prize_order___1.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "dbt_utils_expression_is_true_dim_prize_prize_order___1",
            "alias": "dbt_utils_expression_is_true_dim_prize_prize_order___1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\dbt_utils_expression_is_true_dim_prize_prize_order___1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "prize_name = 'Jackpot 1'"
            },
            "created_at": 1694070226.5427017,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"mart\".\"dim_prize\" where prize_name = 'Jackpot 1') dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_order = 1)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_order",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___2.a272475871": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= 2",
                    "column_name": "prize_order",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "prize_name = 'Jackpot 2'",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_prize_prize_order___2"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___2.a272475871",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"prize_name = 'Jackpot 2'\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_dim_prize_prize_order___2.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "dbt_utils_expression_is_true_dim_prize_prize_order___2",
            "alias": "dbt_utils_expression_is_true_dim_prize_prize_order___2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\dbt_utils_expression_is_true_dim_prize_prize_order___2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "prize_name = 'Jackpot 2'"
            },
            "created_at": 1694070226.5486581,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"mart\".\"dim_prize\" where prize_name = 'Jackpot 2') dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_order = 2)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_order",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___3.6f39bdba6d": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= 3",
                    "column_name": "prize_order",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "prize_name = '1st Prize'",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_prize_prize_order___3"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___3.6f39bdba6d",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"prize_name = '1st Prize'\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_dim_prize_prize_order___3.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "dbt_utils_expression_is_true_dim_prize_prize_order___3",
            "alias": "dbt_utils_expression_is_true_dim_prize_prize_order___3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\dbt_utils_expression_is_true_dim_prize_prize_order___3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "prize_name = '1st Prize'"
            },
            "created_at": 1694070226.5546594,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"mart\".\"dim_prize\" where prize_name = '1st Prize') dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_order = 3)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_order",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___4.5d56b70d78": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= 4",
                    "column_name": "prize_order",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "prize_name = '2nd Prize'",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_prize_prize_order___4"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___4.5d56b70d78",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"prize_name = '2nd Prize'\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_dim_prize_prize_order___4.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "dbt_utils_expression_is_true_dim_prize_prize_order___4",
            "alias": "dbt_utils_expression_is_true_dim_prize_prize_order___4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\dbt_utils_expression_is_true_dim_prize_prize_order___4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "prize_name = '2nd Prize'"
            },
            "created_at": 1694070226.5617352,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"mart\".\"dim_prize\" where prize_name = '2nd Prize') dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_order = 4)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_order",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___5.81c9c5d1d7": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= 5",
                    "column_name": "prize_order",
                    "model": "{{ get_where_subquery(ref('dim_prize')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "prize_name = '3rd Prize'",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_dim_prize_prize_order___5"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___5.81c9c5d1d7",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"prize_name = '3rd Prize'\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_dim_prize_prize_order___5.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\dim_prize.yml",
            "name": "dbt_utils_expression_is_true_dim_prize_prize_order___5",
            "alias": "dbt_utils_expression_is_true_dim_prize_prize_order___5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\dim_prize.yml\\dbt_utils_expression_is_true_dim_prize_prize_order___5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "prize_name = '3rd Prize'"
            },
            "created_at": 1694070226.566723,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"mart\".\"dim_prize\" where prize_name = '3rd Prize') dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_order = 5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_order",
            "file_key_name": "models.dim_prize"
        },
        "test.dbt_resto.not_null_fact_number_number_value.4e75652b39": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "number_value",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_number_value"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_number_value.4e75652b39",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_number_value.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "not_null_fact_number_number_value",
            "alias": "not_null_fact_number_number_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\not_null_fact_number_number_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5827088,
            "compiled_code": "\n    \n    \n\n\n\nselect number_value\nfrom \"msdb\".\"mart\".\"fact_number\"\nwhere number_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "number_value",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.unique_fact_number_number_value.0b64375e98": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "number_value",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_fact_number_number_value"
            ],
            "unique_id": "test.dbt_resto.unique_fact_number_number_value.0b64375e98",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_fact_number_number_value.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "unique_fact_number_number_value",
            "alias": "unique_fact_number_number_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\unique_fact_number_number_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5866594,
            "compiled_code": "\n    \n    \n\nselect\n    number_value as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"fact_number\"\nwhere number_value is not null\ngroup by number_value\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "number_value",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55.6d015426a8": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55
                    ],
                    "column_name": "number_value",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_fact_number_831faa92d498c48891e6b7e856378a36",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55"
            ],
            "unique_id": "test.dbt_resto.accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55.6d015426a8",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_number_831faa92d498c48891e6b7e856378a36\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "accepted_values_fact_number_831faa92d498c48891e6b7e856378a36.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55",
            "alias": "accepted_values_fact_number_831faa92d498c48891e6b7e856378a36",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\accepted_values_fact_number_831faa92d498c48891e6b7e856378a36.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "accepted_values_fact_number_831faa92d498c48891e6b7e856378a36"
            },
            "created_at": 1694070226.591722,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        number_value as value_field,\n        count(*) as n_records\n\n    from \"msdb\".\"mart\".\"fact_number\"\n    group by number_value\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "number_value",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.not_null_fact_number_occurrence.33a1ae908b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "occurrence",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_occurrence"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_occurrence.33a1ae908b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_occurrence.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "not_null_fact_number_occurrence",
            "alias": "not_null_fact_number_occurrence",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\not_null_fact_number_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.5997314,
            "compiled_code": "\n    \n    \n\n\n\nselect occurrence\nfrom \"msdb\".\"mart\".\"fact_number\"\nwhere occurrence is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence___0.d698f93b85": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence___0.d698f93b85",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.601731,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.e977128d3c": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence_pos_1",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.e977128d3c",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.610237,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_1 >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_1",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence.fffe5fcf38": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= occurrence",
                    "column_name": "occurrence_pos_1",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_d610fa66717cbb353b163312a157897c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence.fffe5fcf38",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_d610fa66717cbb353b163312a157897c\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_d610fa66717cbb353b163312a157897c.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence",
            "alias": "dbt_utils_expression_is_true_f_d610fa66717cbb353b163312a157897c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_f_d610fa66717cbb353b163312a157897c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_d610fa66717cbb353b163312a157897c"
            },
            "created_at": 1694070226.6162827,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_1 <= occurrence)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_1",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.7e540350fc": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence_pos_2",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.7e540350fc",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.621238,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_2 >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_2",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence.a20273c523": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= occurrence",
                    "column_name": "occurrence_pos_2",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_0f3ffe0f19335c1cafe9b53bef58cc17",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence.a20273c523",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_0f3ffe0f19335c1cafe9b53bef58cc17\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_0f3ffe0f19335c1cafe9b53bef58cc17.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence",
            "alias": "dbt_utils_expression_is_true_f_0f3ffe0f19335c1cafe9b53bef58cc17",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_f_0f3ffe0f19335c1cafe9b53bef58cc17.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_0f3ffe0f19335c1cafe9b53bef58cc17"
            },
            "created_at": 1694070226.627292,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_2 <= occurrence)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_2",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.eae16a31a7": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence_pos_3",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.eae16a31a7",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.6313083,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_3 >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_3",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence.794270338d": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= occurrence",
                    "column_name": "occurrence_pos_3",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_10022526ab6cfa83e27ae865987182be",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence.794270338d",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_10022526ab6cfa83e27ae865987182be\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_10022526ab6cfa83e27ae865987182be.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence",
            "alias": "dbt_utils_expression_is_true_f_10022526ab6cfa83e27ae865987182be",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_f_10022526ab6cfa83e27ae865987182be.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_10022526ab6cfa83e27ae865987182be"
            },
            "created_at": 1694070226.6353183,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_3 <= occurrence)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_3",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.7ae8134db4": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence_pos_4",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.7ae8134db4",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.641289,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_4 >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_4",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence.d9203fae6e": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= occurrence",
                    "column_name": "occurrence_pos_4",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_1db96f77bd952a81fe3d0da1ecca0c6b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence.d9203fae6e",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_1db96f77bd952a81fe3d0da1ecca0c6b\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_1db96f77bd952a81fe3d0da1ecca0c6b.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence",
            "alias": "dbt_utils_expression_is_true_f_1db96f77bd952a81fe3d0da1ecca0c6b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_f_1db96f77bd952a81fe3d0da1ecca0c6b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_1db96f77bd952a81fe3d0da1ecca0c6b"
            },
            "created_at": 1694070226.6482885,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_4 <= occurrence)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_4",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.431ba40dca": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence_pos_5",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.431ba40dca",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.6542673,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_5 >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_5",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence.5ac56f6c49": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= occurrence",
                    "column_name": "occurrence_pos_5",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_e69fc6e3c0ec4b2bedeadb431473f899",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence.5ac56f6c49",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_e69fc6e3c0ec4b2bedeadb431473f899\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_e69fc6e3c0ec4b2bedeadb431473f899.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence",
            "alias": "dbt_utils_expression_is_true_f_e69fc6e3c0ec4b2bedeadb431473f899",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_f_e69fc6e3c0ec4b2bedeadb431473f899.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_e69fc6e3c0ec4b2bedeadb431473f899"
            },
            "created_at": 1694070226.660261,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_5 <= occurrence)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_5",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.faf1aadc8c": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence_pos_6",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.faf1aadc8c",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0",
            "alias": "dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.6652622,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_6 >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_6",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence.b1f0d38fd5": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= occurrence",
                    "column_name": "occurrence_pos_6",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_529ced9d7326d214b73010ccede34079",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence.b1f0d38fd5",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_529ced9d7326d214b73010ccede34079\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_529ced9d7326d214b73010ccede34079.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence",
            "alias": "dbt_utils_expression_is_true_f_529ced9d7326d214b73010ccede34079",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\dbt_utils_expression_is_true_f_529ced9d7326d214b73010ccede34079.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_529ced9d7326d214b73010ccede34079"
            },
            "created_at": 1694070226.670274,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence_pos_6 <= occurrence)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence_pos_6",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance__date_key__ref_dim_date_.c792e50556": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_a4fbca63604879ca2293c004eb277b10",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance__date_key__ref_dim_date_.c792e50556",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance is not null\",alias=\"relationships_fact_number_a4fbca63604879ca2293c004eb277b10\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_a4fbca63604879ca2293c004eb277b10.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_a4fbca63604879ca2293c004eb277b10",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_a4fbca63604879ca2293c004eb277b10.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance is not null",
                "alias": "relationships_fact_number_a4fbca63604879ca2293c004eb277b10"
            },
            "created_at": 1694070226.6752586,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance is not null) dbt_subquery\n    where last_appearance is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_.173746a33d": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance_pos_1",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_e4a774d475c829d6250d87119b772852",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance_pos_1 is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_.173746a33d",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance_pos_1 is not null\",alias=\"relationships_fact_number_e4a774d475c829d6250d87119b772852\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_e4a774d475c829d6250d87119b772852.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_e4a774d475c829d6250d87119b772852",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_e4a774d475c829d6250d87119b772852.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance_pos_1 is not null",
                "alias": "relationships_fact_number_e4a774d475c829d6250d87119b772852"
            },
            "created_at": 1694070226.683243,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance_pos_1 as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance_pos_1 is not null) dbt_subquery\n    where last_appearance_pos_1 is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance_pos_1",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_.02689b4e6a": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance_pos_2",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_1b7fae810383321eafb8560c59d2c906",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance_pos_2 is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_.02689b4e6a",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance_pos_2 is not null\",alias=\"relationships_fact_number_1b7fae810383321eafb8560c59d2c906\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_1b7fae810383321eafb8560c59d2c906.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_1b7fae810383321eafb8560c59d2c906",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_1b7fae810383321eafb8560c59d2c906.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance_pos_2 is not null",
                "alias": "relationships_fact_number_1b7fae810383321eafb8560c59d2c906"
            },
            "created_at": 1694070226.6882687,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance_pos_2 as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance_pos_2 is not null) dbt_subquery\n    where last_appearance_pos_2 is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance_pos_2",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_.2ab023fcfc": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance_pos_3",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_1b7749e5e80ab24773abd7c00aa1913e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance_pos_3 is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_.2ab023fcfc",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance_pos_3 is not null\",alias=\"relationships_fact_number_1b7749e5e80ab24773abd7c00aa1913e\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_1b7749e5e80ab24773abd7c00aa1913e.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_1b7749e5e80ab24773abd7c00aa1913e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_1b7749e5e80ab24773abd7c00aa1913e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance_pos_3 is not null",
                "alias": "relationships_fact_number_1b7749e5e80ab24773abd7c00aa1913e"
            },
            "created_at": 1694070226.6943004,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance_pos_3 as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance_pos_3 is not null) dbt_subquery\n    where last_appearance_pos_3 is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance_pos_3",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_.05d8a30d70": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance_pos_4",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_9d907b53d09872afe03d5c8b375e88b8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance_pos_4 is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_.05d8a30d70",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance_pos_4 is not null\",alias=\"relationships_fact_number_9d907b53d09872afe03d5c8b375e88b8\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_9d907b53d09872afe03d5c8b375e88b8.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_9d907b53d09872afe03d5c8b375e88b8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_9d907b53d09872afe03d5c8b375e88b8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance_pos_4 is not null",
                "alias": "relationships_fact_number_9d907b53d09872afe03d5c8b375e88b8"
            },
            "created_at": 1694070226.7003434,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance_pos_4 as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance_pos_4 is not null) dbt_subquery\n    where last_appearance_pos_4 is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance_pos_4",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_.d17efedb3f": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance_pos_5",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_3dea4e9b74c5eebcb20ec6394d65e046",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance_pos_5 is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_.d17efedb3f",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance_pos_5 is not null\",alias=\"relationships_fact_number_3dea4e9b74c5eebcb20ec6394d65e046\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_3dea4e9b74c5eebcb20ec6394d65e046.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_3dea4e9b74c5eebcb20ec6394d65e046",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_3dea4e9b74c5eebcb20ec6394d65e046.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance_pos_5 is not null",
                "alias": "relationships_fact_number_3dea4e9b74c5eebcb20ec6394d65e046"
            },
            "created_at": 1694070226.7049825,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance_pos_5 as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance_pos_5 is not null) dbt_subquery\n    where last_appearance_pos_5 is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance_pos_5",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_.ba3c81a09a": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "last_appearance_pos_6",
                    "model": "{{ get_where_subquery(ref('fact_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "relationships_fact_number_c536d88a405a00f233d468583ed95e69",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "last_appearance_pos_6 is not null",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_.ba3c81a09a",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"last_appearance_pos_6 is not null\",alias=\"relationships_fact_number_c536d88a405a00f233d468583ed95e69\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_number_c536d88a405a00f233d468583ed95e69.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number.yml",
            "name": "relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_",
            "alias": "relationships_fact_number_c536d88a405a00f233d468583ed95e69",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number.yml\\relationships_fact_number_c536d88a405a00f233d468583ed95e69.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "last_appearance_pos_6 is not null",
                "alias": "relationships_fact_number_c536d88a405a00f233d468583ed95e69"
            },
            "created_at": 1694070226.7150104,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select last_appearance_pos_6 as from_field\n    from (select * from \"msdb\".\"mart\".\"fact_number\" where last_appearance_pos_6 is not null) dbt_subquery\n    where last_appearance_pos_6 is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_appearance_pos_6",
            "file_key_name": "models.fact_number"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_date.b07673366c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_date",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_date"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_date.b07673366c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_date",
            "alias": "not_null_fact_number_forecast_forecast_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7329197,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_date\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_date",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.unique_fact_number_forecast_forecast_date.3b1034ba6c": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "forecast_date",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_fact_number_forecast_forecast_date"
            ],
            "unique_id": "test.dbt_resto.unique_fact_number_forecast_forecast_date.3b1034ba6c",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_fact_number_forecast_forecast_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "unique_fact_number_forecast_forecast_date",
            "alias": "unique_fact_number_forecast_forecast_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\unique_fact_number_forecast_forecast_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.735919,
            "compiled_code": "\n    \n    \n\nselect\n    forecast_date as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_date is not null\ngroup by forecast_date\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_date",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_date.82f507a41f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_date",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_date"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_date.82f507a41f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_date",
            "alias": "not_null_fact_number_forecast_last_box_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.73792,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_date\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_date",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_numbers.a45c6cfd86": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_numbers",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_numbers"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_numbers.a45c6cfd86",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_numbers.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_numbers",
            "alias": "not_null_fact_number_forecast_forecast_numbers",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_numbers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.741924,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_numbers\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_numbers is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_numbers",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_numbers.bb234c695a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_numbers",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_numbers"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_numbers.bb234c695a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_numbers.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_numbers",
            "alias": "not_null_fact_number_forecast_last_box_result_numbers",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_numbers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7449834,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_numbers\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_numbers is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_numbers",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_1.ded058c32e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_1",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_1"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_1.ded058c32e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_1.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_1",
            "alias": "not_null_fact_number_forecast_forecast_1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7479696,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_1\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_1 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_1",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_1.4df45fc79d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_number_1",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_number_1"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_1.4df45fc79d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_number_1.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_number_1",
            "alias": "not_null_fact_number_forecast_last_box_result_number_1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_number_1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.750947,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_number_1\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_number_1 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_number_1",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_2.7b02c6f0f4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_2",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_2"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_2.7b02c6f0f4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_2.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_2",
            "alias": "not_null_fact_number_forecast_forecast_2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7539446,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_2\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_2 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_2",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_2.267bedde94": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_number_2",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_number_2"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_2.267bedde94",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_number_2.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_number_2",
            "alias": "not_null_fact_number_forecast_last_box_result_number_2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_number_2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.75593,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_number_2\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_number_2 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_number_2",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_3.14f65ff8ea": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_3",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_3"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_3.14f65ff8ea",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_3.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_3",
            "alias": "not_null_fact_number_forecast_forecast_3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7596567,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_3\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_3 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_3",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_3.050bd49e30": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_number_3",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_number_3"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_3.050bd49e30",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_number_3.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_number_3",
            "alias": "not_null_fact_number_forecast_last_box_result_number_3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_number_3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7606559,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_number_3\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_number_3 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_number_3",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_4.a64f5e1198": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_4",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_4"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_4.a64f5e1198",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_4.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_4",
            "alias": "not_null_fact_number_forecast_forecast_4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7626565,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_4\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_4 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_4",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_4.05c88c48e3": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_number_4",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_4.05c88c48e3",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_number_4.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_number_4",
            "alias": "not_null_fact_number_forecast_last_box_result_number_4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_number_4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7646601,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_number_4\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_number_4 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_number_4",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_5.23b3cf8441": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_5",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_5"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_5.23b3cf8441",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_5.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_5",
            "alias": "not_null_fact_number_forecast_forecast_5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.767663,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_5\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_5 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_5",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_5.635349d956": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_number_5",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_5.635349d956",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_number_5.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_number_5",
            "alias": "not_null_fact_number_forecast_last_box_result_number_5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_number_5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7706587,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_number_5\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_number_5 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_number_5",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_forecast_6.f44d77e561": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_6",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_forecast_6"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_forecast_6.f44d77e561",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_forecast_6.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_forecast_6",
            "alias": "not_null_fact_number_forecast_forecast_6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_forecast_6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7736528,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_6\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere forecast_6 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_6",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_6.82a5a7c197": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "last_box_result_number_6",
                    "model": "{{ get_where_subquery(ref('fact_number_forecast')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_forecast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_forecast_last_box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_6.82a5a7c197",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_forecast_last_box_result_number_6.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml",
            "name": "not_null_fact_number_forecast_last_box_result_number_6",
            "alias": "not_null_fact_number_forecast_last_box_result_number_6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_forecast"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_forecast.yml\\not_null_fact_number_forecast_last_box_result_number_6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7766902,
            "compiled_code": "\n    \n    \n\n\n\nselect last_box_result_number_6\nfrom \"msdb\".\"mart\".\"fact_number_forecast\"\nwhere last_box_result_number_6 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "last_box_result_number_6",
            "file_key_name": "models.fact_number_forecast"
        },
        "test.dbt_resto.not_null_fact_number_scoring_fact_key.e0ef6c1363": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "fact_key",
                    "model": "{{ get_where_subquery(ref('fact_number_scoring')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_scoring"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_scoring_fact_key"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_scoring_fact_key.e0ef6c1363",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_scoring_fact_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml",
            "name": "not_null_fact_number_scoring_fact_key",
            "alias": "not_null_fact_number_scoring_fact_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_scoring"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml\\not_null_fact_number_scoring_fact_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7896845,
            "compiled_code": "\n    \n    \n\n\n\nselect fact_key\nfrom \"msdb\".\"mart\".\"fact_number_scoring\"\nwhere fact_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "fact_key",
            "file_key_name": "models.fact_number_scoring"
        },
        "test.dbt_resto.unique_fact_number_scoring_fact_key.61a385c67f": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "fact_key",
                    "model": "{{ get_where_subquery(ref('fact_number_scoring')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_scoring"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_fact_number_scoring_fact_key"
            ],
            "unique_id": "test.dbt_resto.unique_fact_number_scoring_fact_key.61a385c67f",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_fact_number_scoring_fact_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml",
            "name": "unique_fact_number_scoring_fact_key",
            "alias": "unique_fact_number_scoring_fact_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_scoring"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml\\unique_fact_number_scoring_fact_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7926884,
            "compiled_code": "\n    \n    \n\nselect\n    fact_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"fact_number_scoring\"\nwhere fact_key is not null\ngroup by fact_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "fact_key",
            "file_key_name": "models.fact_number_scoring"
        },
        "test.dbt_resto.not_null_fact_number_scoring_forecast_date.b50f468a17": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "forecast_date",
                    "model": "{{ get_where_subquery(ref('fact_number_scoring')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_scoring"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_scoring_forecast_date"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_scoring_forecast_date.b50f468a17",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_scoring_forecast_date.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml",
            "name": "not_null_fact_number_scoring_forecast_date",
            "alias": "not_null_fact_number_scoring_forecast_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_scoring"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml\\not_null_fact_number_scoring_forecast_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7946916,
            "compiled_code": "\n    \n    \n\n\n\nselect forecast_date\nfrom \"msdb\".\"mart\".\"fact_number_scoring\"\nwhere forecast_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "forecast_date",
            "file_key_name": "models.fact_number_scoring"
        },
        "test.dbt_resto.not_null_fact_number_scoring_number_value.0eeeee00c9": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "number_value",
                    "model": "{{ get_where_subquery(ref('fact_number_scoring')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_scoring"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_number_scoring_number_value"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_number_scoring_number_value.0eeeee00c9",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_number_scoring_number_value.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml",
            "name": "not_null_fact_number_scoring_number_value",
            "alias": "not_null_fact_number_scoring_number_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_scoring"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml\\not_null_fact_number_scoring_number_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.7956896,
            "compiled_code": "\n    \n    \n\n\n\nselect number_value\nfrom \"msdb\".\"mart\".\"fact_number_scoring\"\nwhere number_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "number_value",
            "file_key_name": "models.fact_number_scoring"
        },
        "test.dbt_resto.dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value.9c94cd6f52": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "forecast_date",
                        "number_value"
                    ],
                    "model": "{{ get_where_subquery(ref('fact_number_scoring')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_number_scoring"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_a2d76a6782bf311f50b51c861b95f193",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value.9c94cd6f52",
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a2d76a6782bf311f50b51c861b95f193\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_unique_combination_o_a2d76a6782bf311f50b51c861b95f193.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml",
            "name": "dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value",
            "alias": "dbt_utils_unique_combination_o_a2d76a6782bf311f50b51c861b95f193",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_number_scoring"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_number_scoring.yml\\dbt_utils_unique_combination_o_a2d76a6782bf311f50b51c861b95f193.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_unique_combination_o_a2d76a6782bf311f50b51c861b95f193"
            },
            "created_at": 1694070226.7976887,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        forecast_date, number_value\n    from \"msdb\".\"mart\".\"fact_number_scoring\"\n    group by forecast_date, number_value\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.fact_number_scoring"
        },
        "test.dbt_resto.not_null_fact_result_fact_result_key.d0d417d65b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "fact_result_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_fact_result_key"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_fact_result_key.d0d417d65b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_fact_result_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_fact_result_key",
            "alias": "not_null_fact_result_fact_result_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_fact_result_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8142846,
            "compiled_code": "\n    \n    \n\n\n\nselect fact_result_key\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere fact_result_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "fact_result_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.unique_fact_result_fact_result_key.8a94eb890a": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "fact_result_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_fact_result_fact_result_key"
            ],
            "unique_id": "test.dbt_resto.unique_fact_result_fact_result_key.8a94eb890a",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_fact_result_fact_result_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "unique_fact_result_fact_result_key",
            "alias": "unique_fact_result_fact_result_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\unique_fact_result_fact_result_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8172817,
            "compiled_code": "\n    \n    \n\nselect\n    fact_result_key as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere fact_result_key is not null\ngroup by fact_result_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "fact_result_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_box_key.cc5e732aa6": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_box_key"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_box_key.cc5e732aa6",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_box_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_box_key",
            "alias": "not_null_fact_result_box_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_box_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8192797,
            "compiled_code": "\n    \n    \n\n\n\nselect box_key\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere box_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.relationships_fact_result_box_key__box_key__ref_dim_box_.5c858aab5c": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_box')",
                    "field": "box_key",
                    "column_name": "box_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_box",
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_result_box_key__box_key__ref_dim_box_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_result_box_key__box_key__ref_dim_box_.5c858aab5c",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_result_box_key__box_key__ref_dim_box_.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "relationships_fact_result_box_key__box_key__ref_dim_box_",
            "alias": "relationships_fact_result_box_key__box_key__ref_dim_box_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_box"
                ],
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\relationships_fact_result_box_key__box_key__ref_dim_box_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8222353,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select box_key as from_field\n    from \"msdb\".\"mart\".\"fact_result\"\n    where box_key is not null\n),\n\nparent as (\n    select box_key as to_field\n    from \"msdb\".\"mart\".\"dim_box\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_prize_key.e4d5386aa4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_prize_key"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_prize_key.e4d5386aa4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_prize_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_prize_key",
            "alias": "not_null_fact_result_prize_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_prize_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8302317,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_key\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere prize_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.relationships_fact_result_prize_key__prize_key__ref_dim_prize_.785b3097aa": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_prize')",
                    "field": "prize_key",
                    "column_name": "prize_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_prize",
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_result_prize_key__prize_key__ref_dim_prize_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_result_prize_key__prize_key__ref_dim_prize_.785b3097aa",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_result_prize_key__prize_key__ref_dim_prize_.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "relationships_fact_result_prize_key__prize_key__ref_dim_prize_",
            "alias": "relationships_fact_result_prize_key__prize_key__ref_dim_prize_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_prize"
                ],
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\relationships_fact_result_prize_key__prize_key__ref_dim_prize_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8332312,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select prize_key as from_field\n    from \"msdb\".\"mart\".\"fact_result\"\n    where prize_key is not null\n),\n\nparent as (\n    select prize_key as to_field\n    from \"msdb\".\"mart\".\"dim_prize\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_date_key.4012645d7b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "date_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_date_key"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_date_key.4012645d7b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_date_key.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_date_key",
            "alias": "not_null_fact_result_date_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_date_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.841249,
            "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere date_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "date_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.relationships_fact_result_date_key__date_key__ref_dim_date_.d8736057f7": {
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('dim_date')",
                    "field": "date_key",
                    "column_name": "date_key",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "relationships_fact_result_date_key__date_key__ref_dim_date_"
            ],
            "unique_id": "test.dbt_resto.relationships_fact_result_date_key__date_key__ref_dim_date_.d8736057f7",
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "relationships_fact_result_date_key__date_key__ref_dim_date_.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "relationships_fact_result_date_key__date_key__ref_dim_date_",
            "alias": "relationships_fact_result_date_key__date_key__ref_dim_date_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_date"
                ],
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\relationships_fact_result_date_key__date_key__ref_dim_date_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8422472,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select date_key as from_field\n    from \"msdb\".\"mart\".\"fact_result\"\n    where date_key is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"msdb\".\"mart\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "date_key",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_no_of_won.e243af0b8f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "no_of_won",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_no_of_won"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_no_of_won.e243af0b8f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_no_of_won.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_no_of_won",
            "alias": "not_null_fact_result_no_of_won",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_no_of_won.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8472483,
            "compiled_code": "\n    \n    \n\n\n\nselect no_of_won\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere no_of_won is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "no_of_won",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_no_of_won___0.8228233c65": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "no_of_won",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_result_no_of_won___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_result_no_of_won___0.8228233c65",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_result_no_of_won___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "dbt_utils_expression_is_true_fact_result_no_of_won___0",
            "alias": "dbt_utils_expression_is_true_fact_result_no_of_won___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\dbt_utils_expression_is_true_fact_result_no_of_won___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.849253,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_result\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(no_of_won >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "no_of_won",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_prize_value.47fbd23e11": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_value",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_prize_value"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_prize_value.47fbd23e11",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_prize_value.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_prize_value",
            "alias": "not_null_fact_result_prize_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_prize_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8532465,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_value\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere prize_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_value",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_value___0.fd41678c63": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "prize_value",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_result_prize_value___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_value___0.fd41678c63",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_result_prize_value___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "dbt_utils_expression_is_true_fact_result_prize_value___0",
            "alias": "dbt_utils_expression_is_true_fact_result_prize_value___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\dbt_utils_expression_is_true_fact_result_prize_value___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.854251,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_result\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_value >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_value",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_prize_paid.24dad4f916": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_paid",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_prize_paid"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_prize_paid.24dad4f916",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_prize_paid.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_prize_paid",
            "alias": "not_null_fact_result_prize_paid",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_prize_paid.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8592467,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_paid\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere prize_paid is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_paid",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won.7b3266a018": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= prize_value * no_of_won",
                    "column_name": "prize_paid",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_06819c6a22eb912393f6abdaf44e8656",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won.7b3266a018",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_06819c6a22eb912393f6abdaf44e8656\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_f_06819c6a22eb912393f6abdaf44e8656.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won",
            "alias": "dbt_utils_expression_is_true_f_06819c6a22eb912393f6abdaf44e8656",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\dbt_utils_expression_is_true_f_06819c6a22eb912393f6abdaf44e8656.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_f_06819c6a22eb912393f6abdaf44e8656"
            },
            "created_at": 1694070226.8612502,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_result\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_paid = prize_value * no_of_won)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_paid",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_result_is_prize_taken.3931d16464": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "is_prize_taken",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_result_is_prize_taken"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_result_is_prize_taken.3931d16464",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_result_is_prize_taken.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "not_null_fact_result_is_prize_taken",
            "alias": "not_null_fact_result_is_prize_taken",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\not_null_fact_result_is_prize_taken.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8652503,
            "compiled_code": "\n    \n    \n\n\n\nselect is_prize_taken\nfrom \"msdb\".\"mart\".\"fact_result\"\nwhere is_prize_taken is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "is_prize_taken",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_is_prize_taken___1.4e05c4d270": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "= 1",
                    "column_name": "is_prize_taken",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": "no_of_won > 0",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_result_is_prize_taken___1"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_result_is_prize_taken___1.4e05c4d270",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"no_of_won > 0\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_result_is_prize_taken___1.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "dbt_utils_expression_is_true_fact_result_is_prize_taken___1",
            "alias": "dbt_utils_expression_is_true_fact_result_is_prize_taken___1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\dbt_utils_expression_is_true_fact_result_is_prize_taken___1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "where": "no_of_won > 0"
            },
            "created_at": 1694070226.8672562,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from (select * from \"msdb\".\"mart\".\"fact_result\" where no_of_won > 0) dbt_subquery where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(is_prize_taken = 1)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "is_prize_taken",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.accepted_values_fact_result_is_prize_taken__0__1.525fda6614": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        0,
                        1
                    ],
                    "column_name": "is_prize_taken",
                    "model": "{{ get_where_subquery(ref('fact_result')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_result"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "accepted_values_fact_result_is_prize_taken__0__1"
            ],
            "unique_id": "test.dbt_resto.accepted_values_fact_result_is_prize_taken__0__1.525fda6614",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "accepted_values_fact_result_is_prize_taken__0__1.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_result.yml",
            "name": "accepted_values_fact_result_is_prize_taken__0__1",
            "alias": "accepted_values_fact_result_is_prize_taken__0__1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_result"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_result.yml\\accepted_values_fact_result_is_prize_taken__0__1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8722425,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_prize_taken as value_field,\n        count(*) as n_records\n\n    from \"msdb\".\"mart\".\"fact_result\"\n    group by is_prize_taken\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "is_prize_taken",
            "file_key_name": "models.fact_result"
        },
        "test.dbt_resto.not_null_fact_set_number_box_result_numbers.b3ed62ae31": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_numbers",
                    "model": "{{ get_where_subquery(ref('fact_set_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_set_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_set_number_box_result_numbers"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_set_number_box_result_numbers.b3ed62ae31",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_set_number_box_result_numbers.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml",
            "name": "not_null_fact_set_number_box_result_numbers",
            "alias": "not_null_fact_set_number_box_result_numbers",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_set_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml\\not_null_fact_set_number_box_result_numbers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8822315,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_numbers\nfrom \"msdb\".\"mart\".\"fact_set_number\"\nwhere box_result_numbers is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_numbers",
            "file_key_name": "models.fact_set_number"
        },
        "test.dbt_resto.unique_fact_set_number_box_result_numbers.a4fb7c8414": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_result_numbers",
                    "model": "{{ get_where_subquery(ref('fact_set_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_set_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "unique_fact_set_number_box_result_numbers"
            ],
            "unique_id": "test.dbt_resto.unique_fact_set_number_box_result_numbers.a4fb7c8414",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_fact_set_number_box_result_numbers.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml",
            "name": "unique_fact_set_number_box_result_numbers",
            "alias": "unique_fact_set_number_box_result_numbers",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_set_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml\\unique_fact_set_number_box_result_numbers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.885234,
            "compiled_code": "\n    \n    \n\nselect\n    box_result_numbers as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"mart\".\"fact_set_number\"\nwhere box_result_numbers is not null\ngroup by box_result_numbers\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_numbers",
            "file_key_name": "models.fact_set_number"
        },
        "test.dbt_resto.not_null_fact_set_number_occurrence.404244b933": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "occurrence",
                    "model": "{{ get_where_subquery(ref('fact_set_number')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_set_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "not_null_fact_set_number_occurrence"
            ],
            "unique_id": "test.dbt_resto.not_null_fact_set_number_occurrence.404244b933",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_fact_set_number_occurrence.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml",
            "name": "not_null_fact_set_number_occurrence",
            "alias": "not_null_fact_set_number_occurrence",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_set_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml\\not_null_fact_set_number_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8882315,
            "compiled_code": "\n    \n    \n\n\n\nselect occurrence\nfrom \"msdb\".\"mart\".\"fact_set_number\"\nwhere occurrence is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence",
            "file_key_name": "models.fact_set_number"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_fact_set_number_occurrence___0.9b854b58c0": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "occurrence",
                    "model": "{{ get_where_subquery(ref('fact_set_number')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.fact_set_number"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "schema",
                "dbt_utils_expression_is_true_fact_set_number_occurrence___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_fact_set_number_occurrence___0.9b854b58c0",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_fact_set_number_occurrence___0.sql",
            "original_file_path": "models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml",
            "name": "dbt_utils_expression_is_true_fact_set_number_occurrence___0",
            "alias": "dbt_utils_expression_is_true_fact_set_number_occurrence___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fact_set_number"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\mart\\schema\\fact_set_number.yml\\dbt_utils_expression_is_true_fact_set_number_occurrence___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.8922658,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"mart\".\"fact_set_number\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(occurrence >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "occurrence",
            "file_key_name": "models.fact_set_number"
        },
        "test.dbt_resto.unique_staging_power655_box_sk_box.3cb514c8c1": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "sk_box",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "unique_staging_power655_box_sk_box"
            ],
            "unique_id": "test.dbt_resto.unique_staging_power655_box_sk_box.3cb514c8c1",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_staging_power655_box_sk_box.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "unique_staging_power655_box_sk_box",
            "alias": "unique_staging_power655_box_sk_box",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\unique_staging_power655_box_sk_box.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9088125,
            "compiled_code": "\n    \n    \n\nselect\n    sk_box as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere sk_box is not null\ngroup by sk_box\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "sk_box",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_sk_box.320d0ede5f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "sk_box",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_sk_box"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_sk_box.320d0ede5f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_sk_box.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_sk_box",
            "alias": "not_null_staging_power655_box_sk_box",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_sk_box.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9108143,
            "compiled_code": "\n    \n    \n\n\n\nselect sk_box\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere sk_box is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "sk_box",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.unique_staging_power655_box_box_date.492223151a": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_date",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "unique_staging_power655_box_box_date"
            ],
            "unique_id": "test.dbt_resto.unique_staging_power655_box_box_date.492223151a",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_staging_power655_box_box_date.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "unique_staging_power655_box_box_date",
            "alias": "unique_staging_power655_box_box_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\unique_staging_power655_box_box_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9118123,
            "compiled_code": "\n    \n    \n\nselect\n    box_date as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_date is not null\ngroup by box_date\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_date",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_date.e887270dc8": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_date",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_date"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_date.e887270dc8",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_date.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_date",
            "alias": "not_null_staging_power655_box_box_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.913814,
            "compiled_code": "\n    \n    \n\n\n\nselect box_date\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_date",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.unique_staging_power655_box_box_id.3e89c32e6d": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_id",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "unique_staging_power655_box_box_id"
            ],
            "unique_id": "test.dbt_resto.unique_staging_power655_box_box_id.3e89c32e6d",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_staging_power655_box_box_id.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "unique_staging_power655_box_box_id",
            "alias": "unique_staging_power655_box_box_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\unique_staging_power655_box_box_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9148126,
            "compiled_code": "\n    \n    \n\nselect\n    box_id as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_id is not null\ngroup by box_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_id",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_id.3dc86e3f2f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_id",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_id"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_id.3dc86e3f2f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_id.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_id",
            "alias": "not_null_staging_power655_box_box_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9158125,
            "compiled_code": "\n    \n    \n\n\n\nselect box_id\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_id",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.unique_staging_power655_box_box_name.6e48563e9d": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "box_name",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "unique_staging_power655_box_box_name"
            ],
            "unique_id": "test.dbt_resto.unique_staging_power655_box_box_name.6e48563e9d",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_staging_power655_box_box_name.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "unique_staging_power655_box_box_name",
            "alias": "unique_staging_power655_box_box_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\unique_staging_power655_box_box_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.917812,
            "compiled_code": "\n    \n    \n\nselect\n    box_name as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_name is not null\ngroup by box_name\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_name",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_name.bd7abb9e0a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_name",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_name"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_name.bd7abb9e0a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_name.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_name",
            "alias": "not_null_staging_power655_box_box_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9188118,
            "compiled_code": "\n    \n    \n\n\n\nselect box_name\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_name",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_numbers.18b8bc6699": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_numbers",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_numbers"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_numbers.18b8bc6699",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_numbers.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_numbers",
            "alias": "not_null_staging_power655_box_box_result_numbers",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_numbers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.920814,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_numbers\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_numbers is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_numbers",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_1.7c5d9b5b31": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_number_1"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_number_1.7c5d9b5b31",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_number_1.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_number_1",
            "alias": "not_null_staging_power655_box_box_result_number_1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_number_1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9228165,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_1\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_number_1 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1.3acb4bd34c": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 1",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_17f16d65c8f4dbd6f6b261fc3cd160d8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1.3acb4bd34c",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_17f16d65c8f4dbd6f6b261fc3cd160d8\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_17f16d65c8f4dbd6f6b261fc3cd160d8.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1",
            "alias": "dbt_utils_expression_is_true_s_17f16d65c8f4dbd6f6b261fc3cd160d8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_17f16d65c8f4dbd6f6b261fc3cd160d8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_17f16d65c8f4dbd6f6b261fc3cd160d8"
            },
            "created_at": 1694070226.925844,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 >= 1)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2.7b13eb09ac": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "< box_result_number_2",
                    "column_name": "box_result_number_1",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_02ee94c573026946f6b78ef69fc41c84",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2.7b13eb09ac",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_02ee94c573026946f6b78ef69fc41c84\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_02ee94c573026946f6b78ef69fc41c84.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2",
            "alias": "dbt_utils_expression_is_true_s_02ee94c573026946f6b78ef69fc41c84",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_02ee94c573026946f6b78ef69fc41c84.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_02ee94c573026946f6b78ef69fc41c84"
            },
            "created_at": 1694070226.9338377,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_1 < box_result_number_2)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_1",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_2.b230c47cb1": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_number_2"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_number_2.b230c47cb1",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_number_2.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_number_2",
            "alias": "not_null_staging_power655_box_box_result_number_2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_number_2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9408836,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_2\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_number_2 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3.1c61a3fc5a": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "< box_result_number_3",
                    "column_name": "box_result_number_2",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_2954c0c6a2e02e84518fe55f8e09ddd8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3.1c61a3fc5a",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_2954c0c6a2e02e84518fe55f8e09ddd8\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_2954c0c6a2e02e84518fe55f8e09ddd8.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3",
            "alias": "dbt_utils_expression_is_true_s_2954c0c6a2e02e84518fe55f8e09ddd8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_2954c0c6a2e02e84518fe55f8e09ddd8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_2954c0c6a2e02e84518fe55f8e09ddd8"
            },
            "created_at": 1694070226.9428847,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_2 < box_result_number_3)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_2",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_3.f0ee8d0c70": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_3",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_number_3"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_number_3.f0ee8d0c70",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_number_3.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_number_3",
            "alias": "not_null_staging_power655_box_box_result_number_3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_number_3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9478812,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_3\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_number_3 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_3",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4.e0d4af01ad": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "< box_result_number_4",
                    "column_name": "box_result_number_3",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_d89dd2dd24210e945fa5b41f3cb7b2f7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4.e0d4af01ad",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_d89dd2dd24210e945fa5b41f3cb7b2f7\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_d89dd2dd24210e945fa5b41f3cb7b2f7.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4",
            "alias": "dbt_utils_expression_is_true_s_d89dd2dd24210e945fa5b41f3cb7b2f7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_d89dd2dd24210e945fa5b41f3cb7b2f7.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_d89dd2dd24210e945fa5b41f3cb7b2f7"
            },
            "created_at": 1694070226.9498928,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_3 < box_result_number_4)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_3",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_4.91a668f9dd": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_4",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_number_4"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_number_4.91a668f9dd",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_number_4.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_number_4",
            "alias": "not_null_staging_power655_box_box_result_number_4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_number_4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9538896,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_4\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_number_4 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_4",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5.cf71112598": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "< box_result_number_5",
                    "column_name": "box_result_number_4",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_6f072d923ccd40f92998e02027962491",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5.cf71112598",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_6f072d923ccd40f92998e02027962491\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_6f072d923ccd40f92998e02027962491.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5",
            "alias": "dbt_utils_expression_is_true_s_6f072d923ccd40f92998e02027962491",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_6f072d923ccd40f92998e02027962491.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_6f072d923ccd40f92998e02027962491"
            },
            "created_at": 1694070226.9558651,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_4 < box_result_number_5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_4",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_5.5fa3608a1b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_5",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_number_5"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_number_5.5fa3608a1b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_number_5.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_number_5",
            "alias": "not_null_staging_power655_box_box_result_number_5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_number_5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.962882,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_5\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_number_5 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_5",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6.4a237c76aa": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "< box_result_number_6",
                    "column_name": "box_result_number_5",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_0a4f8da9080345fea685fd54c525133d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6.4a237c76aa",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_0a4f8da9080345fea685fd54c525133d\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_0a4f8da9080345fea685fd54c525133d.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6",
            "alias": "dbt_utils_expression_is_true_s_0a4f8da9080345fea685fd54c525133d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_0a4f8da9080345fea685fd54c525133d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_0a4f8da9080345fea685fd54c525133d"
            },
            "created_at": 1694070226.9658809,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_5 < box_result_number_6)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_5",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_6.eaa7e17e9c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_result_number_6",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_box_result_number_6"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_box_result_number_6.eaa7e17e9c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_box_result_number_6.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "not_null_staging_power655_box_box_result_number_6",
            "alias": "not_null_staging_power655_box_box_result_number_6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\not_null_staging_power655_box_box_result_number_6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9718802,
            "compiled_code": "\n    \n    \n\n\n\nselect box_result_number_6\nfrom \"msdb\".\"staging\".\"staging_power655_box\"\nwhere box_result_number_6 is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_6",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56.798e04cf35": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "<= 56",
                    "column_name": "box_result_number_6",
                    "model": "{{ get_where_subquery(ref('staging_power655_box')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_c7a8701f6f8c95a5b79655f60fdf9389",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56.798e04cf35",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_c7a8701f6f8c95a5b79655f60fdf9389\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_c7a8701f6f8c95a5b79655f60fdf9389.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56",
            "alias": "dbt_utils_expression_is_true_s_c7a8701f6f8c95a5b79655f60fdf9389",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box.yml\\dbt_utils_expression_is_true_s_c7a8701f6f8c95a5b79655f60fdf9389.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_c7a8701f6f8c95a5b79655f60fdf9389"
            },
            "created_at": 1694070226.9738808,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(box_result_number_6 <= 56)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_result_number_6",
            "file_key_name": "models.staging_power655_box"
        },
        "test.dbt_resto.unique_staging_power655_box_detail_sk_box_detail.456e98d763": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "sk_box_detail",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "unique_staging_power655_box_detail_sk_box_detail"
            ],
            "unique_id": "test.dbt_resto.unique_staging_power655_box_detail_sk_box_detail.456e98d763",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "unique_staging_power655_box_detail_sk_box_detail.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "unique_staging_power655_box_detail_sk_box_detail",
            "alias": "unique_staging_power655_box_detail_sk_box_detail",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\unique_staging_power655_box_detail_sk_box_detail.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9819007,
            "compiled_code": "\n    \n    \n\nselect\n    sk_box_detail as unique_field,\n    count(*) as n_records\n\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere sk_box_detail is not null\ngroup by sk_box_detail\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "sk_box_detail",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_sk_box_detail.e3db6f3e36": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "sk_box_detail",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_sk_box_detail"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_sk_box_detail.e3db6f3e36",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_sk_box_detail.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_sk_box_detail",
            "alias": "not_null_staging_power655_box_detail_sk_box_detail",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_sk_box_detail.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9838915,
            "compiled_code": "\n    \n    \n\n\n\nselect sk_box_detail\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere sk_box_detail is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "sk_box_detail",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_box_id.b294d9fa28": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "box_id",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_box_id"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_box_id.b294d9fa28",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_box_id.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_box_id",
            "alias": "not_null_staging_power655_box_detail_box_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_box_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.984886,
            "compiled_code": "\n    \n    \n\n\n\nselect box_id\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere box_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "box_id",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_name_raw.33b6e09a09": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_name_raw",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_prize_name_raw"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_prize_name_raw.33b6e09a09",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_prize_name_raw.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_prize_name_raw",
            "alias": "not_null_staging_power655_box_detail_prize_name_raw",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_prize_name_raw.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9868815,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_name_raw\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere prize_name_raw is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_name_raw",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_name.d7afedd3ef": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_name",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_prize_name"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_prize_name.d7afedd3ef",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_prize_name.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_prize_name",
            "alias": "not_null_staging_power655_box_detail_prize_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_prize_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.9878767,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_name\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere prize_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_name",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.8d59a2292d": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "Jackpot 1",
                        "Jackpot 2",
                        "1st Prize",
                        "2nd Prize",
                        "3rd Prize"
                    ],
                    "column_name": "prize_name",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_staging_power6_5de36d9ba4c0de74dccf230338059140",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize"
            ],
            "unique_id": "test.dbt_resto.accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.8d59a2292d",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_staging_power6_5de36d9ba4c0de74dccf230338059140\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "accepted_values_staging_power6_5de36d9ba4c0de74dccf230338059140.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize",
            "alias": "accepted_values_staging_power6_5de36d9ba4c0de74dccf230338059140",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\accepted_values_staging_power6_5de36d9ba4c0de74dccf230338059140.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "accepted_values_staging_power6_5de36d9ba4c0de74dccf230338059140"
            },
            "created_at": 1694070226.9909568,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        prize_name as value_field,\n        count(*) as n_records\n\n    from \"msdb\".\"staging\".\"staging_power655_box_detail\"\n    group by prize_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Jackpot 1','Jackpot 2','1st Prize','2nd Prize','3rd Prize'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_name",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_won.545ec818dd": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_won",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_prize_won"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_prize_won.545ec818dd",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_prize_won.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_prize_won",
            "alias": "not_null_staging_power655_box_detail_prize_won",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_prize_won.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070226.999951,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_won\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere prize_won is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_won",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0.8934b0ce2b": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": ">= 0",
                    "column_name": "prize_won",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_a86ff7c81a875fea5ef46be69c251c5b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0.8934b0ce2b",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_a86ff7c81a875fea5ef46be69c251c5b\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_a86ff7c81a875fea5ef46be69c251c5b.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0",
            "alias": "dbt_utils_expression_is_true_s_a86ff7c81a875fea5ef46be69c251c5b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\dbt_utils_expression_is_true_s_a86ff7c81a875fea5ef46be69c251c5b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_a86ff7c81a875fea5ef46be69c251c5b"
            },
            "created_at": 1694070227.001904,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box_detail\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_won >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_won",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_value_raw.ad9ac80702": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_value_raw",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_prize_value_raw"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_prize_value_raw.ad9ac80702",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_prize_value_raw.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_prize_value_raw",
            "alias": "not_null_staging_power655_box_detail_prize_value_raw",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_prize_value_raw.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070227.0104752,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_value_raw\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere prize_value_raw is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_value_raw",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_value.ea55561f78": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "prize_value",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "not_null_staging_power655_box_detail_prize_value"
            ],
            "unique_id": "test.dbt_resto.not_null_staging_power655_box_detail_prize_value.ea55561f78",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "not_null_staging_power655_box_detail_prize_value.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "not_null_staging_power655_box_detail_prize_value",
            "alias": "not_null_staging_power655_box_detail_prize_value",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\not_null_staging_power655_box_detail_prize_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1694070227.0135021,
            "compiled_code": "\n    \n    \n\n\n\nselect prize_value\nfrom \"msdb\".\"staging\".\"staging_power655_box_detail\"\nwhere prize_value is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_value",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0.8011cd1a8c": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "> 0",
                    "column_name": "prize_value",
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_f3e92afdbd10d0b0dc77fbbc1e6757c4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0.8011cd1a8c",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_f3e92afdbd10d0b0dc77fbbc1e6757c4\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_expression_is_true_s_f3e92afdbd10d0b0dc77fbbc1e6757c4.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0",
            "alias": "dbt_utils_expression_is_true_s_f3e92afdbd10d0b0dc77fbbc1e6757c4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\dbt_utils_expression_is_true_s_f3e92afdbd10d0b0dc77fbbc1e6757c4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_f3e92afdbd10d0b0dc77fbbc1e6757c4"
            },
            "created_at": 1694070227.016488,
            "compiled_code": "\n\nwith meet_condition as (\n    select * from \"msdb\".\"staging\".\"staging_power655_box_detail\" where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(prize_value > 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "prize_value",
            "file_key_name": "models.staging_power655_box_detail"
        },
        "test.dbt_resto.dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name.140f6e3dc8": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "box_id",
                        "prize_name"
                    ],
                    "model": "{{ get_where_subquery(ref('staging_power655_box_detail')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_resto.staging_power655_box_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_f0cfb3708e2ec964c7b58638885174dd",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "msdb",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "staging",
                "dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name"
            ],
            "unique_id": "test.dbt_resto.dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name.140f6e3dc8",
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f0cfb3708e2ec964c7b58638885174dd\") }}",
            "language": "sql",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "dbt_utils_unique_combination_o_f0cfb3708e2ec964c7b58638885174dd.sql",
            "original_file_path": "models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml",
            "name": "dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name",
            "alias": "dbt_utils_unique_combination_o_f0cfb3708e2ec964c7b58638885174dd",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staging_power655_box_detail"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dbt_resto\\models\\vietlot\\power655\\staging\\staging_power655_box_detail.yml\\dbt_utils_unique_combination_o_f0cfb3708e2ec964c7b58638885174dd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_unique_combination_o_f0cfb3708e2ec964c7b58638885174dd"
            },
            "created_at": 1694070227.023492,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        box_id, prize_name\n    from \"msdb\".\"staging\".\"staging_power655_box_detail\"\n    group by box_id, prize_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.staging_power655_box_detail"
        }
    },
    "sources": {
        "source.dbt_resto.power655_raw.power655_data": {
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "power655_raw",
                "power655_data"
            ],
            "database": "msdb",
            "schema": "landing",
            "unique_id": "source.dbt_resto.power655_raw.power655_data",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "models\\vietlot\\power655\\sources.yml",
            "original_file_path": "models\\vietlot\\power655\\sources.yml",
            "name": "power655_data",
            "source_name": "power655_raw",
            "source_description": "",
            "loader": "",
            "identifier": "power655_data",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"msdb\".\"landing\".\"power655_data\"",
            "created_at": 1694070498.943808
        }
    },
    "macros": {
        "macro.integration_tests.generate_schema_name": {
            "unique_id": "macro.integration_tests.generate_schema_name",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "macros\\generate_schema_name.sql",
            "original_file_path": "macros\\generate_schema_name.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n  {%- set default_schema = target.schema -%}\r\n  {%- if custom_schema_name is none -%}\r\n\r\n      {{ default_schema }}\r\n\r\n  {%- else -%}\r\n\r\n      {{ custom_schema_name | trim }}\r\n\r\n  {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5128448,
            "supported_languages": null
        },
        "macro.integration_tests.sqlserver__get_indexes": {
            "unique_id": "macro.integration_tests.sqlserver__get_indexes",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "macros\\sql\\sqlserver__get_indexes.sql",
            "original_file_path": "macros\\sql\\sqlserver__get_indexes.sql",
            "name": "sqlserver__get_indexes",
            "macro_sql": "{% macro sqlserver__get_indexes(relation) %}\r\n\r\nselect  i.[name] as index_name,\r\n        substring(column_names, 1, len(column_names)-1) as [columns],\r\n        case when i.[type] = 1 then 'Clustered index'\r\n            when i.[type] = 2 then 'Nonclustered unique index'\r\n            when i.[type] = 3 then 'XML index'\r\n            when i.[type] = 4 then 'Spatial index'\r\n            when i.[type] = 5 then 'Clustered columnstore index'\r\n            when i.[type] = 6 then 'Nonclustered columnstore index'\r\n            when i.[type] = 7 then 'Nonclustered hash index'\r\n            end as index_type,\r\n        case when i.is_unique = 1 then 'Unique'\r\n            else 'Not unique' end as [unique],\r\n        schema_name(t.schema_id) + '.' + t.[name] as table_view,\r\n        case when t.[type] = 'U' then 'Table'\r\n            when t.[type] = 'V' then 'View'\r\n            end as [object_type]\r\n\r\nfrom    \"{{ relation.database }}\".sys.objects t\r\njoin    \"{{ relation.database }}\".sys.indexes i\r\n  on    t.object_id = i.object_id\r\ncross apply (\r\n  select  col.[name] + ', '\r\n  from    \"{{ relation.database }}\".sys.index_columns ic\r\n  join    \"{{ relation.database }}\".sys.columns col\r\n    on    ic.object_id = col.object_id\r\n    and   ic.column_id = col.column_id\r\n  where   ic.object_id = t.object_id\r\n    and   ic.index_id = i.index_id\r\n  order by key_ordinal\r\n  for xml path ('')\r\n) D (column_names)\r\n\r\nwhere   t.is_ms_shipped <> 1\r\n  and   index_id > 0\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5138416,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_show_grant_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_show_grant_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "sqlserver__get_show_grant_sql",
            "macro_sql": "{% macro sqlserver__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5168595,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_grant_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_grant_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "sqlserver__get_grant_sql",
            "macro_sql": "\n\n\n{%- macro sqlserver__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5168595,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_revoke_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_revoke_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "sqlserver__get_revoke_sql",
            "macro_sql": "{%- macro sqlserver__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5178583,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.get_provision_sql": {
            "unique_id": "macro.dbt_sqlserver.get_provision_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_provision_sql",
            "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.51882,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__apply_grants": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__apply_grants",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "sqlserver__apply_grants",
            "macro_sql": "{% macro sqlserver__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5208206,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_columns_in_relation": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_relation",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "sqlserver__get_columns_in_relation",
            "macro_sql": "{% macro sqlserver__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n    with\n        regular_db_cols as (\n            select\n                ordinal_position,\n                column_name,\n                data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from [{{ relation.database }}].INFORMATION_SCHEMA.COLUMNS\n            where table_name = '{{ relation.identifier }}'\n              and table_schema = '{{ relation.schema }}'\n        ),\n\n        temp_db_cols as (\n            select\n                ordinal_position,\n                column_name collate database_default as column_name,\n                data_type collate database_default as data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from tempdb.INFORMATION_SCHEMA.COLUMNS\n            where table_name like '{{ relation.identifier }}%'\n        ),\n\n        all_cols as (\n            select *\n            from regular_db_cols\n            union\n            select *\n            from temp_db_cols\n        )\n\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from\n        all_cols\n    order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5248427,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_columns_in_query": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_query",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "sqlserver__get_columns_in_query",
            "macro_sql": "{% macro sqlserver__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5268757,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__alter_column_type": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "sqlserver__alter_column_type",
            "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') -%}\n\n    alter {{ relation.type }} {{ relation }} add {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter {{ relation.type }} {{ relation }} drop column {{ column_name }};\n    exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n\n  {%- endcall -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5278773,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__current_timestamp": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__current_timestamp",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "sqlserver__current_timestamp",
            "macro_sql": "{% macro sqlserver__current_timestamp() -%}\n  SYSDATETIME()\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5288916,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "sqlserver__create_clustered_columnstore_index",
            "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n  {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n  {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n  {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n  use [{{ relation.database }}];\n  if EXISTS (\n        SELECT * FROM\n        sys.indexes WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n  DROP index {{full_relation}}.{{cci_name}}\n  CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5358653,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.drop_xml_indexes": {
            "unique_id": "macro.dbt_sqlserver.drop_xml_indexes",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "drop_xml_indexes",
            "macro_sql": "{% macro drop_xml_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n\n{{ log(\"Running drop_xml_indexes() macro...\") }}\n\ndeclare @drop_xml_indexes nvarchar(max);\nselect @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n\tfrom sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'XML'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_xml_indexes;\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5358653,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.drop_spatial_indexes": {
            "unique_id": "macro.dbt_sqlserver.drop_spatial_indexes",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "drop_spatial_indexes",
            "macro_sql": "{% macro drop_spatial_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ log(\"Running drop_spatial_indexes() macro...\") }}\n\ndeclare @drop_spatial_indexes nvarchar(max);\nselect @drop_spatial_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'Spatial'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_spatial_indexes;\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5368674,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.drop_fk_constraints": {
            "unique_id": "macro.dbt_sqlserver.drop_fk_constraints",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "drop_fk_constraints",
            "macro_sql": "{% macro drop_fk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n{{ log(\"Running drop_fk_constraints() macro...\") }}\n\ndeclare @drop_fk_constraints nvarchar(max);\nselect @drop_fk_constraints = (\n    select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n    from sys.foreign_keys\n    inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n    where sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5368674,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.drop_pk_constraints": {
            "unique_id": "macro.dbt_sqlserver.drop_pk_constraints",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "drop_pk_constraints",
            "macro_sql": "{% macro drop_pk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_xml_indexes() }}\n\n{{ drop_spatial_indexes() }}\n\n{{ drop_fk_constraints() }}\n\n{{ log(\"Running drop_pk_constraints() macro...\") }}\n\ndeclare @drop_pk_constraints nvarchar(max);\nselect @drop_pk_constraints = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n    from sys.indexes\n    inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n    where sys.indexes.is_primary_key = 1\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.drop_xml_indexes",
                    "macro.dbt_sqlserver.drop_spatial_indexes",
                    "macro.dbt_sqlserver.drop_fk_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5378733,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.drop_all_indexes_on_table": {
            "unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "drop_all_indexes_on_table",
            "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_pk_constraints() }}\n\n{{ log(\"Dropping remaining indexes...\") }}\n\ndeclare @drop_remaining_indexes_last nvarchar(max);\nselect @drop_remaining_indexes_last = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.drop_pk_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5378733,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.create_clustered_index": {
            "unique_id": "macro.dbt_sqlserver.create_clustered_index",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "create_clustered_index",
            "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n\n{{ log(\"Creating clustered index...\") }}\n\n{% set idx_name = this.table + '__clustered_index_on_' + columns|join('_') %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\n\ncreate\n{% if unique -%}\nunique\n{% endif %}\nclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\nend\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5398202,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.create_nonclustered_index": {
            "unique_id": "macro.dbt_sqlserver.create_nonclustered_index",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "create_nonclustered_index",
            "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n{{ log(\"Creating nonclustered index...\") }}\n\n{% if includes -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") + '_includes_' + includes|join('_')|replace(\" \", \"_\") %}\n{% else -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") %}\n{% endif %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\ncreate nonclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n      {% if includes -%}\n        include ({{ '[' + includes|join(\"], [\") + ']' }})\n      {% endif %}\nend\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5418727,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_catalog": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "sqlserver__get_catalog",
            "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas\n    ),\n\n    tables as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables\n    ),\n\n    tables_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views\n    ),\n\n    views_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n            column_name,\n            ordinal_position as column_index,\n            data_type as column_type\n        from INFORMATION_SCHEMA.COLUMNS\n\n    )\n\n    select\n        cols.table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n             join cols on tv.schema_name = cols.table_schema and tv.table_name = cols.table_name\n    order by column_index\n\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5438683,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__information_schema_name": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_name",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "sqlserver__information_schema_name",
            "macro_sql": "{% macro sqlserver__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5438683,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__list_schemas": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__list_schemas",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "sqlserver__list_schemas",
            "macro_sql": "{% macro sqlserver__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    USE {{ database }};\n    select  name as [schema]\n    from sys.schemas\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5448709,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__check_schema_exists": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__check_schema_exists",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "sqlserver__check_schema_exists",
            "macro_sql": "{% macro sqlserver__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    --USE {{ database_name }}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5448709,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__list_relations_without_caching": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__list_relations_without_caching",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "sqlserver__list_relations_without_caching",
            "macro_sql": "{% macro sqlserver__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from [{{ schema_relation.database }}].INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5458703,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__make_temp_relation": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__make_temp_relation",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "sqlserver__make_temp_relation",
            "macro_sql": "{% macro sqlserver__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = '#' ~  base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5478384,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__drop_relation": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "sqlserver__drop_relation",
            "macro_sql": "{% macro sqlserver__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ sqlserver__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_sqlserver.sqlserver__drop_relation_script"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5488338,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__drop_relation_script": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation_script",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "sqlserver__drop_relation_script",
            "macro_sql": "{% macro sqlserver__drop_relation_script(relation) -%}\n  {% if relation.type == 'view' -%}\n   {% set object_id_type = 'V' %}\n   {% elif relation.type == 'table'%}\n   {% set object_id_type = 'U' %}\n   {%- else -%} invalid target name\n   {% endif %}\n  USE [{{ relation.database }}];\n  if object_id ('{{ relation.include(database=False) }}','{{ object_id_type }}') is not null\n      begin\n      drop {{ relation.type }} {{ relation.include(database=False) }}\n      end\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5498323,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__rename_relation": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__rename_relation",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "sqlserver__rename_relation",
            "macro_sql": "{% macro sqlserver__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    USE [{{ to_relation.database }}];\n    EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n    IF EXISTS(\n    SELECT *\n    FROM sys.indexes\n    WHERE name='{{ from_relation.schema }}_{{ from_relation.identifier }}_cci' and object_id = OBJECT_ID('{{ from_relation.schema }}.{{ to_relation.identifier }}'))\n    EXEC sp_rename N'{{ from_relation.schema }}.{{ to_relation.identifier }}.{{ from_relation.schema }}_{{ from_relation.identifier }}_cci', N'{{ from_relation.schema }}_{{ to_relation.identifier }}_cci', N'INDEX'\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5508332,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__create_schema": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__create_schema",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "sqlserver__create_schema",
            "macro_sql": "{% macro sqlserver__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.without_identifier().schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.without_identifier().schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5518332,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__drop_schema": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "sqlserver__drop_schema",
            "macro_sql": "{% macro sqlserver__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      IF EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n      BEGIN\n      EXEC('DROP SCHEMA {{ relation.schema }}')\n      END  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.list_relations_without_caching",
                    "macro.dbt.drop_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5528326,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql",
            "name": "sqlserver__get_incremental_default_sql",
            "macro_sql": "{% macro sqlserver__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_delete_insert_sql",
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5538328,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_merge_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_merge_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "sqlserver__get_merge_sql",
            "macro_sql": "{% macro sqlserver__get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, predicates) }};\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5548325,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "sqlserver__get_delete_insert_merge_sql",
            "macro_sql": "{% macro sqlserver__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n\n      {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n      {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not string %}\n      delete from {{ target }}\n          where exists (\n                SELECT NULL\n                FROM\n                  {{ source }}\n                WHERE\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n      {% else %}\n      delete from {{ target }}\n          where (\n                {{ unique_key }}) in (\n      select ({{ unique_key }})\n      from {{ source }}\n          );\n\n      {% endif %}\n      {% endif %}\n\n      insert into {{ target }} ({{ dest_cols_csv }})\n          (\n      select {{ dest_cols_csv }}\n      from {{ source }}\n          )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5578685,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "sqlserver__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro sqlserver__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5588682,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__create_table_as": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "sqlserver__create_table_as",
            "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n   {%- set as_columnstore = config.get('as_columnstore', default=true) -%}\n   {% set tmp_relation = relation.incorporate(\n   path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n   type='view')-%}\n   {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {{ sqlserver__drop_relation_script(relation) }}\n\n   USE [{{ relation.database }}];\n   EXEC('create view {{ tmp_relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n\n   SELECT * INTO {{ relation }} FROM\n    {{ tmp_relation }}\n\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {% if not temporary and as_columnstore -%}\n   {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_sqlserver.sqlserver__drop_relation_script",
                    "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.561873,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__create_view_exec": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_exec",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "sqlserver__create_view_exec",
            "macro_sql": "{% macro sqlserver__create_view_exec(relation, sql) -%}\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    execute('create view {{ relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5628364,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__create_view_as": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "sqlserver__create_view_as",
            "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n    USE [{{ relation.database }}];\n    {{ sqlserver__create_view_exec(relation, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__create_view_exec"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5628364,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.calc_batch_size": {
            "unique_id": "macro.dbt_sqlserver.calc_batch_size",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "calc_batch_size",
            "macro_sql": "{% macro calc_batch_size(num_columns,max_batch_size) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% if num_columns * max_batch_size < 2100 %}\n    {% set batch_size = max_batch_size %}\n    {% else %}\n    {% set batch_size = (2100 / num_columns)|int %}\n    {% endif %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5658324,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_binding_char": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "sqlserver__get_binding_char",
            "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5658324,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_batch_size": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "sqlserver__get_batch_size",
            "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5658324,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.basic_load_csv_rows": {
            "unique_id": "macro.dbt_sqlserver.basic_load_csv_rows",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "basic_load_csv_rows",
            "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5678325,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__load_csv_rows": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "sqlserver__load_csv_rows",
            "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set max_batch_size = get_batch_size() %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(cols_sql|length, max_batch_size) %}\n\n  {{ return(basic_load_csv_rows(model, batch_size, agate_table) )}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt_sqlserver.calc_batch_size",
                    "macro.dbt_sqlserver.basic_load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5688324,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__post_snapshot": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__post_snapshot",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "name": "sqlserver__post_snapshot",
            "macro_sql": "{% macro sqlserver__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5698333,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__create_columns": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__create_columns",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "name": "sqlserver__create_columns",
            "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5698333,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_true_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_true_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "name": "sqlserver__get_true_sql",
            "macro_sql": "{% macro sqlserver__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5708334,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "sqlserver__snapshot_merge_sql",
            "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) %}\n  {{ default__snapshot_merge_sql(target, source, insert_cols) }};\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5708334,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "sqlserver__snapshot_hash_arguments",
            "macro_sql": "{% macro sqlserver__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(max)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5718324,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "sqlserver__snapshot_string_as_time",
            "macro_sql": "{% macro sqlserver__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2, '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5728228,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__get_test_sql": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "sqlserver__get_test_sql",
            "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.573864,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.materialization_test_sqlserver": {
            "unique_id": "macro.dbt_sqlserver.materialization_test_sqlserver",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\materializations\\tests\\test.sql",
            "original_file_path": "macros\\materializations\\tests\\test.sql",
            "name": "materialization_test_sqlserver",
            "macro_sql": "{%- materialization test, adapter='sqlserver' -%}\n\n  {% set relations = [] %}\n\n  {% set identifier = model['alias'] %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n\n  {% if old_relation %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% elif not old_relation %}\n    {% do adapter.create_schema(target_relation) %}\n  {% endif %}\n\n  {% call statement(auto_begin=True) %}\n      {{ create_table_as(False, target_relation, sql) }}\n  {% endcall %}\n\n  {% set main_sql %}\n      select *\n      from {{ target_relation }}\n  {% endset %}\n\n  {{ adapter.commit() }}\n\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {% if should_store_failures() %}\n    {% do relations.append(target_relation) %}\n  {% elif not should_store_failures() %}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql",
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5778751,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_sqlserver.sqlserver__any_value": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__any_value",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "name": "sqlserver__any_value",
            "macro_sql": "{% macro sqlserver__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.578834,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__array_construct": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__array_construct",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "name": "sqlserver__array_construct",
            "macro_sql": "{% macro sqlserver__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.578834,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__cast_bool_to_text": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__cast_bool_to_text",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "name": "sqlserver__cast_bool_to_text",
            "macro_sql": "{% macro sqlserver__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5798802,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__concat": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__concat",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "name": "sqlserver__concat",
            "macro_sql": "{% macro sqlserver__concat(fields) -%}\n    concat({{ fields|join(', ') }}, '')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5798802,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__dateadd": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__dateadd",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "name": "sqlserver__dateadd",
            "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime)\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5808737,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__date_trunc": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__date_trunc",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "name": "sqlserver__date_trunc",
            "macro_sql": "{% macro sqlserver__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5808737,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__hash": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__hash",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "name": "sqlserver__hash",
            "macro_sql": "{% macro sqlserver__hash(field) %}\n    convert(varchar(50), hashbytes('md5', {{field}}), 2)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5818732,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__last_day": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__last_day",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "sqlserver__last_day",
            "macro_sql": "{% macro sqlserver__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5828736,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__length": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__length",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "name": "sqlserver__length",
            "macro_sql": "{% macro sqlserver__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5828736,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__listagg": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__listagg",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "name": "sqlserver__listagg",
            "macro_sql": "{% macro sqlserver__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.58393,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__position": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__position",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "name": "sqlserver__position",
            "macro_sql": "{% macro sqlserver__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.58393,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__safe_cast": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__safe_cast",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "name": "sqlserver__safe_cast",
            "macro_sql": "{% macro sqlserver__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5849228,
            "supported_languages": null
        },
        "macro.dbt_sqlserver.sqlserver__split_part": {
            "unique_id": "macro.dbt_sqlserver.sqlserver__split_part",
            "package_name": "dbt_sqlserver",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\sqlserver",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "sqlserver__split_part",
            "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n\n    LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5849228,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "unique_id": "macro.dbt.copy_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5879326,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "unique_id": "macro.dbt.default__copy_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5879326,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5879326,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5879326,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "unique_id": "macro.dbt.should_revoke",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5898852,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "unique_id": "macro.dbt.get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5909243,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5909243,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "unique_id": "macro.dbt.get_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5919375,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "unique_id": "macro.dbt.default__get_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.592931,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "unique_id": "macro.dbt.get_revoke_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5939302,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5939302,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5948827,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5968797,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "unique_id": "macro.dbt.call_dcl_statements",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5968797,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5968797,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "unique_id": "macro.dbt.apply_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.5983858,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "unique_id": "macro.dbt.default__apply_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6003935,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6033964,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6033964,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6043952,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6053944,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.606401,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6073987,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6094775,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6094775,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.611456,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6124809,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6124809,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.613461,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6144814,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6144814,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6154783,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6174724,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6174724,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6184666,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6184666,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6184666,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6194665,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6194665,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6204596,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6204596,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6204596,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.622471,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.622471,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6234598,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6234598,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6244588,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6254587,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "unique_id": "macro.dbt.make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6294563,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6304574,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6304574,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6314573,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "unique_id": "macro.dbt.make_backup_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6314573,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "unique_id": "macro.dbt.default__make_backup_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6324608,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6324608,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6334631,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6334631,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6334631,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6344633,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6344633,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6344633,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6364632,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "unique_id": "macro.dbt.load_cached_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6364632,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6364632,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6374626,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6384764,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6384764,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6384764,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.639397,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6404448,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6404448,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.64144,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.64144,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.64144,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.64144,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.642445,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt.default__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.642445,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6454458,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6474447,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6494439,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6494439,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6524413,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.653444,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.653444,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\accepted_values.sql",
            "original_file_path": "macros\\generic_test_sql\\accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6554446,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\not_null.sql",
            "original_file_path": "macros\\generic_test_sql\\not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6563957,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\relationships.sql",
            "original_file_path": "macros\\generic_test_sql\\relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6584623,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\unique.sql",
            "original_file_path": "macros\\generic_test_sql\\unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6584623,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6604695,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "unique_id": "macro.dbt.default__generate_alias_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "name": "default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6604695,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6624565,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6634574,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6644564,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "unique_id": "macro.dbt.default__generate_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6654582,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6664565,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6674573,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6684625,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6704695,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.674474,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6754687,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6754687,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6764708,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6774704,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6824758,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "unique_id": "macro.dbt.diff_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6845663,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "unique_id": "macro.dbt.diff_column_data_types",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6865613,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "unique_id": "macro.dbt.get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.6875565,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.690533,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7071354,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.710215,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7222056,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7251766,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7261853,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7271845,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7281837,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.729184,
            "supported_languages": null
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.736184,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "unique_id": "macro.dbt.check_for_schema_changes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7381775,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "unique_id": "macro.dbt.sync_column_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7431915,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "unique_id": "macro.dbt.process_schema_changes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7461936,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7501907,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.751209,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.751209,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7529557,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7529557,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.754027,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7550206,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7559767,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7559767,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7570155,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "unique_id": "macro.dbt.get_insert_into_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7580302,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7590144,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7590144,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7600145,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7610154,
            "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\table.sql",
            "original_file_path": "macros\\materializations\\models\\table\\table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7660131,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7690177,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.770013,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.770013,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7710254,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7710254,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\helpers.sql",
            "original_file_path": "macros\\materializations\\models\\view\\helpers.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7720182,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\helpers.sql",
            "original_file_path": "macros\\materializations\\models\\view\\helpers.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7729652,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\view.sql",
            "original_file_path": "macros\\materializations\\models\\view\\view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7780137,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7840781,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7850726,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7860675,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7870789,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "unique_id": "macro.dbt.get_csv_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7870789,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "unique_id": "macro.dbt.default__get_csv_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7870789,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "unique_id": "macro.dbt.get_binding_char",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.788075,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "unique_id": "macro.dbt.default__get_binding_char",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.788075,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "unique_id": "macro.dbt.get_batch_size",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.788075,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "unique_id": "macro.dbt.default__get_batch_size",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.788075,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7901003,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.79109,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.7950878,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\seed.sql",
            "original_file_path": "macros\\materializations\\seeds\\seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.804736,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8137493,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8137493,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8147564,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8147564,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "unique_id": "macro.dbt.get_true_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8157468,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "unique_id": "macro.dbt.default__get_true_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8157468,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8167448,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.818748,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.818748,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.81976,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8207364,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.830734,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8317375,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8327377,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.837739,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.837739,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.837739,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8396714,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.840671,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.840671,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8426704,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8456702,
            "supported_languages": null
        },
        "macro.dbt.get_test_sql": {
            "unique_id": "macro.dbt.get_test_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8466704,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "unique_id": "macro.dbt.default__get_test_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8466704,
            "supported_languages": null
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\test.sql",
            "original_file_path": "macros\\materializations\\tests\\test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8506706,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_where_subquery": {
            "unique_id": "macro.dbt.get_where_subquery",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "name": "get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8516705,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "unique_id": "macro.dbt.default__get_where_subquery",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "name": "default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8526707,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "unique_id": "macro.dbt.build_ref_function",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.85467,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "unique_id": "macro.dbt.build_source_function",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8556705,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "unique_id": "macro.dbt.build_config_dict",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8566713,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "unique_id": "macro.dbt.py_script_postfix",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8577456,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "unique_id": "macro.dbt.py_script_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8577456,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "unique_id": "macro.dbt.any_value",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8587391,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "unique_id": "macro.dbt.default__any_value",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8587391,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "unique_id": "macro.dbt.array_append",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_append.sql",
            "original_file_path": "macros\\utils\\array_append.sql",
            "name": "array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8597546,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "unique_id": "macro.dbt.default__array_append",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_append.sql",
            "original_file_path": "macros\\utils\\array_append.sql",
            "name": "default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8597546,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "unique_id": "macro.dbt.array_concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_concat.sql",
            "original_file_path": "macros\\utils\\array_concat.sql",
            "name": "array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.860747,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "unique_id": "macro.dbt.default__array_concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_concat.sql",
            "original_file_path": "macros\\utils\\array_concat.sql",
            "name": "default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.860747,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "unique_id": "macro.dbt.array_construct",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "name": "array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8617477,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "unique_id": "macro.dbt.default__array_construct",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "name": "default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.862742,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "unique_id": "macro.dbt.bool_or",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\bool_or.sql",
            "original_file_path": "macros\\utils\\bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.862742,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "unique_id": "macro.dbt.default__bool_or",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\bool_or.sql",
            "original_file_path": "macros\\utils\\bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.863743,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "unique_id": "macro.dbt.cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.864755,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.864755,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "unique_id": "macro.dbt.concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.864755,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "unique_id": "macro.dbt.default__concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8657365,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "unique_id": "macro.dbt.type_string",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.86674,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "unique_id": "macro.dbt.default__type_string",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8677373,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "unique_id": "macro.dbt.type_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8677373,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "unique_id": "macro.dbt.default__type_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8677373,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "unique_id": "macro.dbt.type_float",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.868737,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "unique_id": "macro.dbt.default__type_float",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.868737,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "unique_id": "macro.dbt.type_numeric",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.868737,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "unique_id": "macro.dbt.default__type_numeric",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.868737,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "unique_id": "macro.dbt.type_bigint",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8697348,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "unique_id": "macro.dbt.default__type_bigint",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8697348,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "unique_id": "macro.dbt.type_int",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8697348,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "unique_id": "macro.dbt.default__type_int",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8707387,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "unique_id": "macro.dbt.type_boolean",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8707387,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "unique_id": "macro.dbt.default__type_boolean",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8707387,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "unique_id": "macro.dbt.dateadd",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.871736,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "unique_id": "macro.dbt.default__dateadd",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8726716,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "unique_id": "macro.dbt.datediff",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8737447,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "unique_id": "macro.dbt.default__datediff",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8747385,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "unique_id": "macro.dbt.date_trunc",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8757367,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "unique_id": "macro.dbt.default__date_trunc",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8757367,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "unique_id": "macro.dbt.escape_single_quotes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\utils\\escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.876736,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\utils\\escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8777344,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "unique_id": "macro.dbt.except",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8787348,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "unique_id": "macro.dbt.default__except",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8787348,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "unique_id": "macro.dbt.hash",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.879746,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "unique_id": "macro.dbt.default__hash",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8807454,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "unique_id": "macro.dbt.intersect",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\intersect.sql",
            "original_file_path": "macros\\utils\\intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8817441,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "unique_id": "macro.dbt.default__intersect",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\intersect.sql",
            "original_file_path": "macros\\utils\\intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8817441,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "unique_id": "macro.dbt.last_day",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8827496,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "unique_id": "macro.dbt.default_last_day",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.883755,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "unique_id": "macro.dbt.default__last_day",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.883755,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "unique_id": "macro.dbt.length",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8848448,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "unique_id": "macro.dbt.default__length",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.885833,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "unique_id": "macro.dbt.listagg",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8878372,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "unique_id": "macro.dbt.default__listagg",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8888395,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "unique_id": "macro.dbt.string_literal",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\literal.sql",
            "original_file_path": "macros\\utils\\literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8897638,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "unique_id": "macro.dbt.default__string_literal",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\literal.sql",
            "original_file_path": "macros\\utils\\literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8897638,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "unique_id": "macro.dbt.position",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.890826,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "unique_id": "macro.dbt.default__position",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.890826,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "unique_id": "macro.dbt.replace",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\replace.sql",
            "original_file_path": "macros\\utils\\replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8918252,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "unique_id": "macro.dbt.default__replace",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\replace.sql",
            "original_file_path": "macros\\utils\\replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8918252,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "unique_id": "macro.dbt.right",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8928385,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "unique_id": "macro.dbt.default__right",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8928385,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "unique_id": "macro.dbt.safe_cast",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8938248,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "unique_id": "macro.dbt.default__safe_cast",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8938248,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "unique_id": "macro.dbt.split_part",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sqlserver.sqlserver__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.894828,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "unique_id": "macro.dbt.default__split_part",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.894828,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "unique_id": "macro.dbt._split_part_negative",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.895881,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8968346,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8968346,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8978364,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8978364,
            "supported_languages": null
        },
        "macro.dbt_date.get_base_dates": {
            "unique_id": "macro.dbt_date.get_base_dates",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "name": "get_base_dates",
            "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_base_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.8994431,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_base_dates": {
            "unique_id": "macro.dbt_date.default__get_base_dates",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "name": "default__get_base_dates",
            "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_utils.date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.901523,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__get_base_dates": {
            "unique_id": "macro.dbt_date.bigquery__get_base_dates",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "name": "bigquery__get_base_dates",
            "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_utils.date_spine",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9025311,
            "supported_languages": null
        },
        "macro.dbt_date.get_date_dimension": {
            "unique_id": "macro.dbt_date.get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\get_date_dimension.sql",
            "original_file_path": "macros\\get_date_dimension.sql",
            "name": "get_date_dimension",
            "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_date_dimension"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9135287,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_date_dimension": {
            "unique_id": "macro.dbt_date.default__get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\get_date_dimension.sql",
            "original_file_path": "macros\\get_date_dimension.sql",
            "name": "default__get_date_dimension",
            "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9175165,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__get_date_dimension": {
            "unique_id": "macro.dbt_date.postgres__get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\get_date_dimension.sql",
            "original_file_path": "macros\\get_date_dimension.sql",
            "name": "postgres__get_date_dimension",
            "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.922462,
            "supported_languages": null
        },
        "macro.dbt_date.convert_timezone": {
            "unique_id": "macro.dbt_date.convert_timezone",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "name": "convert_timezone",
            "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9244516,
            "supported_languages": null
        },
        "macro.dbt_date.default__convert_timezone": {
            "unique_id": "macro.dbt_date.default__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "name": "default__convert_timezone",
            "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.925451,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__convert_timezone": {
            "unique_id": "macro.dbt_date.bigquery__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "name": "bigquery__convert_timezone",
            "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.925451,
            "supported_languages": null
        },
        "macro.dbt_date.spark__convert_timezone": {
            "unique_id": "macro.dbt_date.spark__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "name": "spark__convert_timezone",
            "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9264514,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__convert_timezone": {
            "unique_id": "macro.dbt_date.postgres__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "name": "postgres__convert_timezone",
            "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9264514,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__convert_timezone": {
            "unique_id": "macro.dbt_date.redshift__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "name": "redshift__convert_timezone",
            "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.927509,
            "supported_languages": null
        },
        "macro.dbt_date.date_part": {
            "unique_id": "macro.dbt_date.date_part",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "name": "date_part",
            "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.927509,
            "supported_languages": null
        },
        "macro.dbt_date.default__date_part": {
            "unique_id": "macro.dbt_date.default__date_part",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "name": "default__date_part",
            "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9285016,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__date_part": {
            "unique_id": "macro.dbt_date.bigquery__date_part",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "name": "bigquery__date_part",
            "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9285016,
            "supported_languages": null
        },
        "macro.dbt_date.day_name": {
            "unique_id": "macro.dbt_date.day_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "name": "day_name",
            "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__day_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9295018,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_name": {
            "unique_id": "macro.dbt_date.default__day_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "name": "default__day_name",
            "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9295018,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_name": {
            "unique_id": "macro.dbt_date.snowflake__day_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "name": "snowflake__day_name",
            "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.930502,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_name": {
            "unique_id": "macro.dbt_date.bigquery__day_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "name": "bigquery__day_name",
            "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.930502,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_name": {
            "unique_id": "macro.dbt_date.postgres__day_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "name": "postgres__day_name",
            "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.931508,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_month": {
            "unique_id": "macro.dbt_date.day_of_month",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_month.sql",
            "original_file_path": "macros\\calendar_date\\day_of_month.sql",
            "name": "day_of_month",
            "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.931508,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_month": {
            "unique_id": "macro.dbt_date.redshift__day_of_month",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_month.sql",
            "original_file_path": "macros\\calendar_date\\day_of_month.sql",
            "name": "redshift__day_of_month",
            "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.931508,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_week": {
            "unique_id": "macro.dbt_date.day_of_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "name": "day_of_week",
            "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__day_of_week"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9345021,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_week": {
            "unique_id": "macro.dbt_date.default__day_of_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "name": "default__day_of_week",
            "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9355016,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_of_week": {
            "unique_id": "macro.dbt_date.snowflake__day_of_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "name": "snowflake__day_of_week",
            "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.936495,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_of_week": {
            "unique_id": "macro.dbt_date.bigquery__day_of_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "name": "bigquery__day_of_week",
            "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.936495,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_week": {
            "unique_id": "macro.dbt_date.postgres__day_of_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "name": "postgres__day_of_week",
            "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9374948,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_week": {
            "unique_id": "macro.dbt_date.redshift__day_of_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "name": "redshift__day_of_week",
            "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9385,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_year": {
            "unique_id": "macro.dbt_date.day_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "name": "day_of_year",
            "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__day_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9394531,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_year": {
            "unique_id": "macro.dbt_date.default__day_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "name": "default__day_of_year",
            "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9394531,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_year": {
            "unique_id": "macro.dbt_date.postgres__day_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "name": "postgres__day_of_year",
            "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.940518,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_year": {
            "unique_id": "macro.dbt_date.redshift__day_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "name": "redshift__day_of_year",
            "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.940518,
            "supported_languages": null
        },
        "macro.dbt_date.from_unixtimestamp": {
            "unique_id": "macro.dbt_date.from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "name": "from_unixtimestamp",
            "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__from_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9464002,
            "supported_languages": null
        },
        "macro.dbt_date.default__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.default__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "name": "default__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9464002,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "name": "postgres__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9474695,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "name": "snowflake__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9484694,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "name": "bigquery__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9494724,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_end": {
            "unique_id": "macro.dbt_date.iso_week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "name": "iso_week_end",
            "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.95047,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_end": {
            "unique_id": "macro.dbt_date._iso_week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "name": "_iso_week_end",
            "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.95047,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_end": {
            "unique_id": "macro.dbt_date.default__iso_week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "name": "default__iso_week_end",
            "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.95047,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_end": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "name": "snowflake__iso_week_end",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.951471,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_of_year": {
            "unique_id": "macro.dbt_date.iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "name": "iso_week_of_year",
            "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9524713,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_of_year": {
            "unique_id": "macro.dbt_date._iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "name": "_iso_week_of_year",
            "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9524713,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_of_year": {
            "unique_id": "macro.dbt_date.default__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "name": "default__iso_week_of_year",
            "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9524713,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_of_year": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "name": "snowflake__iso_week_of_year",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9534702,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_of_year": {
            "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "name": "postgres__iso_week_of_year",
            "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9534702,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_start": {
            "unique_id": "macro.dbt_date.iso_week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "name": "iso_week_start",
            "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9544728,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_start": {
            "unique_id": "macro.dbt_date._iso_week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "name": "_iso_week_start",
            "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9544728,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_start": {
            "unique_id": "macro.dbt_date.default__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "name": "default__iso_week_start",
            "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9554708,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_start": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "name": "snowflake__iso_week_start",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9554708,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_start": {
            "unique_id": "macro.dbt_date.postgres__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "name": "postgres__iso_week_start",
            "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.956413,
            "supported_languages": null
        },
        "macro.dbt_date.last_month": {
            "unique_id": "macro.dbt_date.last_month",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\last_month.sql",
            "original_file_path": "macros\\calendar_date\\last_month.sql",
            "name": "last_month",
            "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9574075,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_name": {
            "unique_id": "macro.dbt_date.last_month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\last_month_name.sql",
            "original_file_path": "macros\\calendar_date\\last_month_name.sql",
            "name": "last_month_name",
            "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.958471,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_number": {
            "unique_id": "macro.dbt_date.last_month_number",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\last_month_number.sql",
            "original_file_path": "macros\\calendar_date\\last_month_number.sql",
            "name": "last_month_number",
            "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9594693,
            "supported_languages": null
        },
        "macro.dbt_date.last_week": {
            "unique_id": "macro.dbt_date.last_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\last_week.sql",
            "original_file_path": "macros\\calendar_date\\last_week.sql",
            "name": "last_week",
            "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9604208,
            "supported_languages": null
        },
        "macro.dbt_date.month_name": {
            "unique_id": "macro.dbt_date.month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "name": "month_name",
            "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__month_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9624722,
            "supported_languages": null
        },
        "macro.dbt_date.default__month_name": {
            "unique_id": "macro.dbt_date.default__month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "name": "default__month_name",
            "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9624722,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__month_name": {
            "unique_id": "macro.dbt_date.bigquery__month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "name": "bigquery__month_name",
            "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9634511,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__month_name": {
            "unique_id": "macro.dbt_date.snowflake__month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "name": "snowflake__month_name",
            "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9644713,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__month_name": {
            "unique_id": "macro.dbt_date.postgres__month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "name": "postgres__month_name",
            "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9654696,
            "supported_languages": null
        },
        "macro.dbt_date.next_month": {
            "unique_id": "macro.dbt_date.next_month",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\next_month.sql",
            "original_file_path": "macros\\calendar_date\\next_month.sql",
            "name": "next_month",
            "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9664643,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_name": {
            "unique_id": "macro.dbt_date.next_month_name",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\next_month_name.sql",
            "original_file_path": "macros\\calendar_date\\next_month_name.sql",
            "name": "next_month_name",
            "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.967471,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_number": {
            "unique_id": "macro.dbt_date.next_month_number",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\next_month_number.sql",
            "original_file_path": "macros\\calendar_date\\next_month_number.sql",
            "name": "next_month_number",
            "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.96847,
            "supported_languages": null
        },
        "macro.dbt_date.next_week": {
            "unique_id": "macro.dbt_date.next_week",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\next_week.sql",
            "original_file_path": "macros\\calendar_date\\next_week.sql",
            "name": "next_week",
            "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.96847,
            "supported_languages": null
        },
        "macro.dbt_date.now": {
            "unique_id": "macro.dbt_date.now",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\now.sql",
            "original_file_path": "macros\\calendar_date\\now.sql",
            "name": "now",
            "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.convert_timezone",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9694955,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_ago": {
            "unique_id": "macro.dbt_date.n_days_ago",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\n_days_ago.sql",
            "original_file_path": "macros\\calendar_date\\n_days_ago.sql",
            "name": "n_days_ago",
            "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9714699,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_away": {
            "unique_id": "macro.dbt_date.n_days_away",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\n_days_away.sql",
            "original_file_path": "macros\\calendar_date\\n_days_away.sql",
            "name": "n_days_away",
            "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9724877,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_ago": {
            "unique_id": "macro.dbt_date.n_months_ago",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\n_months_ago.sql",
            "original_file_path": "macros\\calendar_date\\n_months_ago.sql",
            "name": "n_months_ago",
            "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9744081,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_away": {
            "unique_id": "macro.dbt_date.n_months_away",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\n_months_away.sql",
            "original_file_path": "macros\\calendar_date\\n_months_away.sql",
            "name": "n_months_away",
            "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9754074,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_ago": {
            "unique_id": "macro.dbt_date.n_weeks_ago",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\n_weeks_ago.sql",
            "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql",
            "name": "n_weeks_ago",
            "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.976407,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_away": {
            "unique_id": "macro.dbt_date.n_weeks_away",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\n_weeks_away.sql",
            "original_file_path": "macros\\calendar_date\\n_weeks_away.sql",
            "name": "n_weeks_away",
            "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.977407,
            "supported_languages": null
        },
        "macro.dbt_date.periods_since": {
            "unique_id": "macro.dbt_date.periods_since",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\periods_since.sql",
            "original_file_path": "macros\\calendar_date\\periods_since.sql",
            "name": "periods_since",
            "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff",
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9784071,
            "supported_languages": null
        },
        "macro.dbt_date.today": {
            "unique_id": "macro.dbt_date.today",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\today.sql",
            "original_file_path": "macros\\calendar_date\\today.sql",
            "name": "today",
            "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9784071,
            "supported_languages": null
        },
        "macro.dbt_date.tomorrow": {
            "unique_id": "macro.dbt_date.tomorrow",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\tomorrow.sql",
            "original_file_path": "macros\\calendar_date\\tomorrow.sql",
            "name": "tomorrow",
            "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.979407,
            "supported_languages": null
        },
        "macro.dbt_date.to_unixtimestamp": {
            "unique_id": "macro.dbt_date.to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "name": "to_unixtimestamp",
            "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__to_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.980407,
            "supported_languages": null
        },
        "macro.dbt_date.default__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.default__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "name": "default__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9814074,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "name": "snowflake__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9814074,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "name": "bigquery__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9814074,
            "supported_languages": null
        },
        "macro.dbt_date.week_end": {
            "unique_id": "macro.dbt_date.week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "name": "week_end",
            "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9824073,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_end": {
            "unique_id": "macro.dbt_date.default__week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "name": "default__week_end",
            "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9834075,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_end": {
            "unique_id": "macro.dbt_date.snowflake__week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "name": "snowflake__week_end",
            "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9834075,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_end": {
            "unique_id": "macro.dbt_date.postgres__week_end",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "name": "postgres__week_end",
            "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9844148,
            "supported_languages": null
        },
        "macro.dbt_date.week_of_year": {
            "unique_id": "macro.dbt_date.week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "name": "week_of_year",
            "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9854147,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_of_year": {
            "unique_id": "macro.dbt_date.default__week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "name": "default__week_of_year",
            "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9854147,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_of_year": {
            "unique_id": "macro.dbt_date.postgres__week_of_year",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "name": "postgres__week_of_year",
            "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9854147,
            "supported_languages": null
        },
        "macro.dbt_date.week_start": {
            "unique_id": "macro.dbt_date.week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "name": "week_start",
            "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9864144,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_start": {
            "unique_id": "macro.dbt_date.default__week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "name": "default__week_start",
            "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9874148,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_start": {
            "unique_id": "macro.dbt_date.snowflake__week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "name": "snowflake__week_start",
            "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9874148,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_start": {
            "unique_id": "macro.dbt_date.postgres__week_start",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "name": "postgres__week_start",
            "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9884148,
            "supported_languages": null
        },
        "macro.dbt_date.yesterday": {
            "unique_id": "macro.dbt_date.yesterday",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\calendar_date\\yesterday.sql",
            "original_file_path": "macros\\calendar_date\\yesterday.sql",
            "name": "yesterday",
            "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9894161,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_periods": {
            "unique_id": "macro.dbt_date.get_fiscal_periods",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\fiscal_date\\get_fiscal_periods.sql",
            "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql",
            "name": "get_fiscal_periods",
            "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_fiscal_year_dates",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.991482,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_year_dates": {
            "unique_id": "macro.dbt_date.get_fiscal_year_dates",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "name": "get_fiscal_year_dates",
            "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_fiscal_year_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9934773,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_fiscal_year_dates": {
            "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
            "package_name": "dbt_date",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_date",
            "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "name": "default__get_fiscal_year_dates",
            "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9944804,
            "supported_languages": null
        },
        "macro.dbt_resto.get_table_alias": {
            "unique_id": "macro.dbt_resto.get_table_alias",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\config\\get_table_alias.sql",
            "original_file_path": "macros\\config\\get_table_alias.sql",
            "name": "get_table_alias",
            "macro_sql": "{% macro get_table_alias(relation) %}\r\n  {{ adapter.dispatch('get_table_alias', 'dbt_resto') (relation) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__get_table_alias"
                ]
            },
            "description": "Suffix the table name with your configured variable `table_suffix`.\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\config\\get_table_alias.yml",
            "arguments": [
                {
                    "name": "relation",
                    "type": "relation object",
                    "description": "Model object to alias"
                }
            ],
            "created_at": 1694070227.031514,
            "supported_languages": null
        },
        "macro.dbt_resto.default__get_table_alias": {
            "unique_id": "macro.dbt_resto.default__get_table_alias",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\config\\get_table_alias.sql",
            "original_file_path": "macros\\config\\get_table_alias.sql",
            "name": "default__get_table_alias",
            "macro_sql": "{% macro default__get_table_alias(relation) -%}\r\n  {{ relation.table ~ var('table_suffix','') }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\config\\get_table_alias.yml",
            "arguments": [],
            "created_at": 1694070227.032498,
            "supported_languages": null
        },
        "macro.dbt_resto.test_if_column_value_to_match_regex": {
            "unique_id": "macro.dbt_resto.test_if_column_value_to_match_regex",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "original_file_path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "name": "test_if_column_value_to_match_regex",
            "macro_sql": "{% test if_column_value_to_match_regex(model, column_name, regex_expr) %}\r\n  {{ return(adapter.dispatch('if_column_value_to_match_regex', 'dbt_resto')(model, column_name, regex_expr)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__if_column_value_to_match_regex"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.9964802,
            "supported_languages": null
        },
        "macro.dbt_resto.default__if_column_value_to_match_regex": {
            "unique_id": "macro.dbt_resto.default__if_column_value_to_match_regex",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "original_file_path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "name": "default__if_column_value_to_match_regex",
            "macro_sql": "{% macro default__if_column_value_to_match_regex(model, column_name, regex_expr) %}\r\n\r\n  {% set expression -%}\r\n    regexp_instr({{ column_name }}, '{{ regex_expr }}') > 0\r\n  {%- endset %}\r\n\r\n  with exceptions as (\r\n    select  {{column_name}}\r\n    from    {{model}}\r\n    where   not({{expression}})\r\n  )\r\n  select * from exceptions\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.99748,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__if_column_value_to_match_regex": {
            "unique_id": "macro.dbt_resto.sqlserver__if_column_value_to_match_regex",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "original_file_path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "name": "sqlserver__if_column_value_to_match_regex",
            "macro_sql": "{% macro sqlserver__if_column_value_to_match_regex(model, column_name, regex_expr) %}\r\n\r\n  select 'NOT SUPPORTED!' where 1 = 0\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.99748,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__if_column_value_to_match_regex": {
            "unique_id": "macro.dbt_resto.postgres__if_column_value_to_match_regex",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "original_file_path": "macros\\generic_test\\if_column_value_to_match_regex.sql",
            "name": "postgres__if_column_value_to_match_regex",
            "macro_sql": "{% macro postgres__if_column_value_to_match_regex(model, column_name, regex_expr) %}\r\n\r\n  {% set expression -%}\r\n    (select array_agg(i) from (select (regexp_matches({{ column_name }}, '{{ regex_expr }}', 'g'))[1] i) as t)::varchar\r\n  {%- endset %}\r\n\r\n  with exceptions as (\r\n    select  {{ column_name }},\r\n            {{ expression }} as {{ column_name }}_matched\r\n\r\n    from    {{ model }}\r\n  )\r\n  select  *\r\n  from    exceptions\r\n  where   {{ column_name }} is not null\r\n    and   (\r\n                {{ column_name }}_matched is null\r\n            or  length({{ column_name }}_matched) = 0\r\n          )\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.99748,
            "supported_languages": null
        },
        "macro.dbt_resto.create_materialized_view_as": {
            "unique_id": "macro.dbt_resto.create_materialized_view_as",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "original_file_path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "name": "create_materialized_view_as",
            "macro_sql": "{% macro create_materialized_view_as(relation, sql) -%}\r\n  {{ adapter.dispatch('create_materialized_view_as', 'dbt_resto')(relation, sql) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__create_materialized_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.999051,
            "supported_languages": null
        },
        "macro.dbt_resto.default__create_materialized_view_as": {
            "unique_id": "macro.dbt_resto.default__create_materialized_view_as",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "original_file_path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "name": "default__create_materialized_view_as",
            "macro_sql": "{% macro default__create_materialized_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n  create materialized view {{ relation }} as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070223.999051,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__create_materialized_view_as": {
            "unique_id": "macro.dbt_resto.sqlserver__create_materialized_view_as",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "original_file_path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "name": "sqlserver__create_materialized_view_as",
            "macro_sql": "{% macro sqlserver__create_materialized_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n  {%- set temp_view_sql -%}\r\n    create view {{ relation.include(database=False) }} with schemabinding as (\r\n      {{ sql }}\r\n    );\r\n  {%- endset -%}\r\n\r\n  {%- set temp_view_sql = temp_view_sql.replace(\"'\", \"''\") -%}\r\n  use [{{ relation.database }}];\r\n  {{ sql_header if sql_header is not none }}\r\n  execute('{{ temp_view_sql }}');\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0001385,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__create_materialized_view_as": {
            "unique_id": "macro.dbt_resto.postgres__create_materialized_view_as",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "original_file_path": "macros\\materialization\\model\\materialized_view\\create_materialized_view_as.sql",
            "name": "postgres__create_materialized_view_as",
            "macro_sql": "{% macro postgres__create_materialized_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n  drop materialized view if exists {{ relation }};\r\n  create materialized view {{ relation }} as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0011358,
            "supported_languages": null
        },
        "macro.dbt_resto.materialization_materialized_view_default": {
            "unique_id": "macro.dbt_resto.materialization_materialized_view_default",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\materialization\\model\\materialized_view\\materialized_view.sql",
            "original_file_path": "macros\\materialization\\model\\materialized_view\\materialized_view.sql",
            "name": "materialization_materialized_view_default",
            "macro_sql": "{% materialization materialized_view, default -%}\r\n\r\n  {#-- 1. Prepare the database for the new model #}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = this -%}\r\n\r\n  {#-- 2. Run pre-hooks #}\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  {#-- 3. Execute any sql required to implement the desired materialization #}\r\n  {%- if old_relation -%}\r\n    {% do adapter.drop_relation(old_relation) %}\r\n  {%- endif -%}\r\n\r\n  -- BEGIN transaction\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% call statement('main') -%}\r\n    {{ dbt_resto.create_materialized_view_as(target_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ adapter.commit() }}\r\n  -- COMMIT transaction\r\n\r\n  {#-- 4. Run post-model hooks #}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {#-- 5. Clean up the database as required #}\r\n  -- Nothing to clean up\r\n\r\n  {#-- 6. Update the Relation cache #}\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt_resto.create_materialized_view_as",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.004109,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_resto.materialization_materialized_view_sqlserver": {
            "unique_id": "macro.dbt_resto.materialization_materialized_view_sqlserver",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\materialization\\model\\materialized_view\\sqlserver__materialized_view.sql",
            "original_file_path": "macros\\materialization\\model\\materialized_view\\sqlserver__materialized_view.sql",
            "name": "materialization_materialized_view_sqlserver",
            "macro_sql": "{% materialization materialized_view, adapter='sqlserver' -%}\r\n\r\n  {#-- 1. Prepare the database for the new model #}\r\n  {%- set unique_key = config.get('unique_key') -%}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set ix_name = 'ix_' + identifier + '_' + unique_key-%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = this -%}\r\n\r\n  {#-- 2. Run pre-hooks #}\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  {#-- 3. Execute any sql required to implement the desired materialization #}\r\n  {%- if old_relation -%}\r\n    {% do adapter.drop_relation(old_relation) %}\r\n  {%- endif -%}\r\n\r\n  -- BEGIN transaction\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% call statement('main') -%}\r\n    {{ dbt_resto.create_materialized_view_as(target_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  {% call statement('unique index') -%}\r\n    create unique clustered index {{ ix_name }} on {{ target_relation }} ({{ unique_key }})\r\n  {%- endcall %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ adapter.commit() }}\r\n  -- COMMIT transaction\r\n\r\n  {#-- 4. Run post-model hooks #}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {#-- 5. Clean up the database as required #}\r\n  -- Nothing to clean up\r\n\r\n  {#-- 6. Update the Relation cache #}\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt_resto.create_materialized_view_as",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0070624,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_resto.generate_schema_name": {
            "unique_id": "macro.dbt_resto.generate_schema_name",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\override_default\\generate_schema_name.sql",
            "original_file_path": "macros\\override_default\\generate_schema_name.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n  {%- set default_schema = target.schema -%}\r\n  {%- if custom_schema_name is none -%}\r\n\r\n      {{ default_schema }}\r\n\r\n  {%- else -%}\r\n\r\n      {{ custom_schema_name | trim }}\r\n\r\n  {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "Override the schema strategy. MAKE-A-COPY to your local project under `your-project/macros/` directory.\nIf the model has no config `schema` then it will use target.schema to be its schema name, else will use the exact schema name configured.\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\override_default\\generate_schema_name.yml",
            "arguments": [
                {
                    "name": "custom_schema_name",
                    "type": "string",
                    "description": "Default dbt argument - the configed schema of the model"
                },
                {
                    "name": "node",
                    "type": null,
                    "description": "Default dbt argument - not used"
                }
            ],
            "created_at": 1694070227.0344882,
            "supported_languages": null
        },
        "macro.dbt_resto.hash": {
            "unique_id": "macro.dbt_resto.hash",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\hash.sql",
            "original_file_path": "macros\\sql\\hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(fields) -%}\r\n\r\n  {%- set field_concat %}\r\n\r\n    concat('',\r\n    {%- for item in fields %}\r\n      coalesce(cast({{ item }} as {{ dbt_resto.type_string() }}), '') {% if not loop.last %},{% endif %}\r\n    {%- endfor %})\r\n\r\n  {%- endset %}\r\n  {{ adapter.dispatch('hash', 'dbt_resto') (field_concat) }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_string",
                    "macro.dbt_resto.sqlserver__hash"
                ]
            },
            "description": "Get hash value from list of fields\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\hash.yml",
            "arguments": [
                {
                    "name": "fields",
                    "type": "list",
                    "description": "List of fields"
                }
            ],
            "created_at": 1694070227.035489,
            "supported_languages": null
        },
        "macro.dbt_resto.default__hash": {
            "unique_id": "macro.dbt_resto.default__hash",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\hash.sql",
            "original_file_path": "macros\\sql\\hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\r\n    md5(cast({{field}} as {{dbt_resto.type_string()}}))\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\hash.yml",
            "arguments": [],
            "created_at": 1694070227.035489,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__hash": {
            "unique_id": "macro.dbt_resto.sqlserver__hash",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\hash.sql",
            "original_file_path": "macros\\sql\\hash.sql",
            "name": "sqlserver__hash",
            "macro_sql": "{% macro sqlserver__hash(field) -%}\r\n    convert(varchar(32), hashbytes('MD5',  coalesce(cast({{field}} as varchar ), '')), 2)\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\hash.yml",
            "arguments": [],
            "created_at": 1694070227.0365028,
            "supported_languages": null
        },
        "macro.dbt_resto.len": {
            "unique_id": "macro.dbt_resto.len",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\len.sql",
            "original_file_path": "macros\\sql\\len.sql",
            "name": "len",
            "macro_sql": "{% macro len(column) %}\r\n  {{ return(adapter.dispatch('len', 'dbt_resto')(column)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__len"
                ]
            },
            "description": "Get length of column value\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\len.yml",
            "arguments": [
                {
                    "name": "column",
                    "type": "string",
                    "description": "Column name"
                }
            ],
            "created_at": 1694070227.0375154,
            "supported_languages": null
        },
        "macro.dbt_resto.default__len": {
            "unique_id": "macro.dbt_resto.default__len",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\len.sql",
            "original_file_path": "macros\\sql\\len.sql",
            "name": "default__len",
            "macro_sql": "{% macro default__len(column) -%}\r\n\r\n  len({{ column }})\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\len.yml",
            "arguments": [],
            "created_at": 1694070227.0385118,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__len": {
            "unique_id": "macro.dbt_resto.postgres__len",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\len.sql",
            "original_file_path": "macros\\sql\\len.sql",
            "name": "postgres__len",
            "macro_sql": "{% macro postgres__len(column) -%}\r\n\r\n  length({{ column }})\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\len.yml",
            "arguments": [],
            "created_at": 1694070227.0385118,
            "supported_languages": null
        },
        "macro.dbt_resto.dateadd": {
            "unique_id": "macro.dbt_resto.dateadd",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\dateadd.sql",
            "original_file_path": "macros\\sql\\datetime\\dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, column) %}\r\n  {{ return(adapter.dispatch('dateadd', 'dbt_resto')(datepart, interval, column)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__dateadd"
                ]
            },
            "description": "Add value to the date value.\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\dateadd.yml",
            "arguments": [
                {
                    "name": "datepart",
                    "type": "string",
                    "description": "Date part name to extract e.g. day, month, year, etc"
                },
                {
                    "name": "interval",
                    "type": "nmuber",
                    "description": "Value to add. Can be negative"
                },
                {
                    "name": "column",
                    "type": "string",
                    "description": "Datetime column"
                }
            ],
            "created_at": 1694070227.0424352,
            "supported_languages": null
        },
        "macro.dbt_resto.default__dateadd": {
            "unique_id": "macro.dbt_resto.default__dateadd",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\dateadd.sql",
            "original_file_path": "macros\\sql\\datetime\\dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, column) -%}\r\n\r\n  dateadd({{ datepart }}, {{ interval }}, {{ column }})\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\dateadd.yml",
            "arguments": [],
            "created_at": 1694070227.0434368,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__dateadd": {
            "unique_id": "macro.dbt_resto.postgres__dateadd",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\dateadd.sql",
            "original_file_path": "macros\\sql\\datetime\\dateadd.sql",
            "name": "postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, column) -%}\r\n\r\n  cast({{ column }} as {{ dbt_resto.type_date() }}) + {{ interval }} * interval '1 {{ datepart }}'\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.type_date"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\dateadd.yml",
            "arguments": [],
            "created_at": 1694070227.0434368,
            "supported_languages": null
        },
        "macro.dbt_resto.datepart": {
            "unique_id": "macro.dbt_resto.datepart",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\datepart.sql",
            "original_file_path": "macros\\sql\\datetime\\datepart.sql",
            "name": "datepart",
            "macro_sql": "{% macro datepart(column, part='day') %}\r\n    {{ adapter.dispatch('datepart', 'dbt_resto') (column, part) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__datepart"
                ]
            },
            "description": "Get date part.\n\nCurrently supporting the list of date parts:\n  * year\n  * month\n  * day\n  * dayofweek\n  * dayofyear (date first = 1-Monday)\n  * week\n  * quarter\n  * hour\n  * minute\n  * second\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\datepart.yml",
            "arguments": [
                {
                    "name": "column",
                    "type": "string",
                    "description": "Datetime column"
                },
                {
                    "name": "part",
                    "type": "string",
                    "description": "Date part name to extract e.g. day, month, year, etc"
                }
            ],
            "created_at": 1694070227.047442,
            "supported_languages": null
        },
        "macro.dbt_resto.default__datepart": {
            "unique_id": "macro.dbt_resto.default__datepart",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\datepart.sql",
            "original_file_path": "macros\\sql\\datetime\\datepart.sql",
            "name": "default__datepart",
            "macro_sql": "{% macro default__datepart(column, part) %}\r\n\r\n  date_part({{ part }}, {{ column }})\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\datepart.yml",
            "arguments": [],
            "created_at": 1694070227.0484421,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__datepart": {
            "unique_id": "macro.dbt_resto.sqlserver__datepart",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\datepart.sql",
            "original_file_path": "macros\\sql\\datetime\\datepart.sql",
            "name": "sqlserver__datepart",
            "macro_sql": "{% macro sqlserver__datepart(column, part) %}\r\n\r\n  {%- set mapped_part = part -%}\r\n  {%- if part == 'dayofweek' -%}\r\n    {%- set mapped_part = 'weekday' -%}\r\n  {%- endif -%}\r\n  {%- if part == 'week' -%}\r\n    {%- set mapped_part = 'iso_week' -%}\r\n  {%- endif -%}\r\n  datepart({{ mapped_part }}, {{ column }})\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\datepart.yml",
            "arguments": [],
            "created_at": 1694070227.0484421,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__datepart": {
            "unique_id": "macro.dbt_resto.postgres__datepart",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\datepart.sql",
            "original_file_path": "macros\\sql\\datetime\\datepart.sql",
            "name": "postgres__datepart",
            "macro_sql": "{% macro postgres__datepart(column, part) %}\r\n\r\n  {%- set mapped_part = part -%}\r\n  {%- if part == 'dayofweek' -%}\r\n    {%- set mapped_part = 'dow' -%}\r\n  {%- endif -%}\r\n  {%- if part == 'dayofyear' -%}\r\n    {%- set mapped_part = 'doy' -%}\r\n  {%- endif -%}\r\n  date_part('{{ mapped_part }}', {{ column }})\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\datepart.yml",
            "arguments": [],
            "created_at": 1694070227.0494418,
            "supported_languages": null
        },
        "macro.dbt_resto.get_base_times": {
            "unique_id": "macro.dbt_resto.get_base_times",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_base_times.sql",
            "original_file_path": "macros\\sql\\datetime\\get_base_times.sql",
            "name": "get_base_times",
            "macro_sql": "{% macro get_base_times(level='hour', base='1970-01-01') %}\r\n    {{ adapter.dispatch('get_base_times', 'dbt_resto') (level, base) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__get_base_times"
                ]
            },
            "description": "Prepare the select statement of the datetime values in each level = hour, minute.\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_base_times.yml",
            "arguments": [
                {
                    "name": "level",
                    "type": "string",
                    "description": "Level of 'hour' or 'minute'"
                },
                {
                    "name": "base",
                    "type": "string",
                    "description": "Base date value where the time part will be concatenated into"
                }
            ],
            "created_at": 1694070227.054441,
            "supported_languages": null
        },
        "macro.dbt_resto.default__get_base_times": {
            "unique_id": "macro.dbt_resto.default__get_base_times",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_base_times.sql",
            "original_file_path": "macros\\sql\\datetime\\get_base_times.sql",
            "name": "default__get_base_times",
            "macro_sql": "{% macro default__get_base_times(level, base) %}\r\n\r\n  {%- if level == 'second' %}\r\n    {# 1 day = 86400 seconds #}\r\n    with E1(N) as\r\n    (\r\n      select 1 union all select 1 union all select 1 union all\r\n      select 1 union all select 1 union all select 1 union all\r\n      select 1 union all select 1 union all select 1 union all select 1\r\n    ) --10E+1 or 10 rows\r\n    ,E2(N) as\r\n    (\r\n      select 1 from E1 a, E1 b\r\n    ) --10E+2 or 100 rows\r\n    ,E3(N) as\r\n    (\r\n      select 1 from E2 a, E2 b\r\n    ) --10E+4 or 10,000 rows\r\n    ,E4(N) as\r\n    (\r\n      select 1 FROM E3 a, E3 b\r\n    ) --10E+8 or 100,000,000 rows\r\n    ,EALL as (\r\n      select  {% if target.type == 'sqlserver' %} top 86400 {% endif %}\r\n              N,\r\n              row_number() over (order by N) as value\r\n      from    E4\r\n      order by 2\r\n      {% if target.type != 'sqlserver' %} limit 86400 {% endif %}\r\n    )\r\n    select  {{ dbt_resto.dateadd(\"second\", \"value\", \"'\" ~ base ~ \"'\") }} as time_value\r\n    from    EALL\r\n\r\n  {%- elif level == 'minute' %}\r\n\r\n    {# 1 day = 1440 minutes #}\r\n    {%- for value in range(0, 1440) %}\r\n      select {{ dbt_resto.dateadd(\"minute\", value, \"'\" ~ base ~ \"'\") }} as time_value\r\n      {%- if not loop.last %}\r\n        union all\r\n      {%- endif %}\r\n    {%- endfor %}\r\n\r\n  {%- else %}\r\n\r\n    {# 1 day = 24 hours #}\r\n    {%- for value in range(0, 24) %}\r\n      select {{ dbt_resto.dateadd(\"hour\", value, \"'\" ~ base ~ \"'\") }} as time_value\r\n      {%- if not loop.last %}\r\n        union all\r\n      {%- endif %}\r\n    {%- endfor %}\r\n\r\n  {%- endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_base_times.yml",
            "arguments": [],
            "created_at": 1694070227.0554411,
            "supported_languages": null
        },
        "macro.dbt_resto.get_time_dimension": {
            "unique_id": "macro.dbt_resto.get_time_dimension",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_time_dimension.sql",
            "original_file_path": "macros\\sql\\datetime\\get_time_dimension.sql",
            "name": "get_time_dimension",
            "macro_sql": "{% macro get_time_dimension(level='hour') %}\r\n  {{ adapter.dispatch('get_time_dimension', 'dbt_resto') (level, kwargs) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__get_time_dimension"
                ]
            },
            "description": "Prepare the select statement of all columns required in a time dimension table.\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_time_dimension.yml",
            "arguments": [
                {
                    "name": "level",
                    "type": "string",
                    "description": "Level of 'hour' or 'minute'"
                }
            ],
            "created_at": 1694070227.057473,
            "supported_languages": null
        },
        "macro.dbt_resto.default__get_time_dimension": {
            "unique_id": "macro.dbt_resto.default__get_time_dimension",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_time_dimension.sql",
            "original_file_path": "macros\\sql\\datetime\\get_time_dimension.sql",
            "name": "default__get_time_dimension",
            "macro_sql": "{% macro default__get_time_dimension(level, kwargs) %}\r\n\r\nwith base_times as (\r\n{%- if target.type in ['sqlserver'] and level == 'second' %}\r\n\r\n  {%- set base_table = kwargs.get('base_table') -%}\r\n  {#-- get_base_times producs WITH statement but SQL Server wont accept WITH inside WITH #}\r\n  select  dateadd(second, value, '{{ base }}') as time_value\r\n  from    {{ base_table }}\r\n\r\n{%- else %}\r\n\r\n  {{ dbt_resto.get_base_times(level) }}\r\n\r\n{%- endif %}\r\n)\r\n\r\nselect    time_value,--string of HH:MM:SS\r\n          concat(\r\n            {{ dbt_resto.get_time_key('time_value', ['hour','minute','second'], False) }},\r\n            ' ',\r\n            case\r\n              when cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }}) between 12 and 23\r\n                then  'PM'\r\n              else    'AM'\r\n            end\r\n          ) as time_string, --string of HH:MM:SS AM/PM\r\n          {{ dbt_resto.get_time_key('time_value', ['hour','minute','second']) }} as time24_string,--string of HH:MM:SS\r\n\r\n          case\r\n            when cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }}) > 12\r\n              then  cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }}) - 12\r\n            else    cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }})\r\n          end as hour_number,\r\n          concat(\r\n            {{ dbt_resto.get_time_key('time_value', ['hour'], False) }},\r\n            ' ',\r\n            case\r\n              when cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }}) between 12 and 23\r\n                then  'PM'\r\n              else    'AM'\r\n            end\r\n          ) as hour_name, --string of HH:00:00 AM/PM\r\n          cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }}) as hour24_number,\r\n          {{ dbt_resto.get_time_key('time_value', ['hour']) }} as hour24_name, --string of HH:00:00\r\n\r\n          {%- if level in ['minute', 'second'] %}\r\n\r\n          cast({{ dbt_resto.datepart('time_value', 'minute') }} as {{ dbt_resto.type_int() }}) as minute_number,\r\n          concat(\r\n            {{ dbt_resto.get_time_key('time_value', ['hour','minute'], False) }},\r\n            ' ',\r\n            case\r\n              when cast({{ dbt_resto.datepart('time_value', 'hour') }} as {{ dbt_resto.type_int() }}) between 12 and 23\r\n                then  'PM'\r\n              else    'AM'\r\n            end\r\n          ) as hour_minute_name, --string of HH:MM:00 AM/PM\r\n          {{ dbt_resto.get_time_key('time_value', ['hour','minute']) }} as hour24_minute_name, --string of HH:MM:00\r\n\r\n          {%- endif %}\r\n\r\n          {%- if level in ['second'] %}\r\n\r\n          cast({{ dbt_resto.datepart('time_value', 'second') }} as {{ dbt_resto.type_int() }}) as second_number,\r\n\r\n          {%- endif %}\r\n\r\n          cast({{ dbt_resto.get_time_key('time_value') }} as {{ dbt_resto.type_bigint() }}) as time_key --number of HHMMSS\r\n\r\nfrom      base_times\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.get_base_times",
                    "macro.dbt_resto.get_time_key",
                    "macro.dbt_resto.datepart",
                    "macro.dbt_resto.type_int",
                    "macro.dbt_resto.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_time_dimension.yml",
            "arguments": [],
            "created_at": 1694070227.0584323,
            "supported_languages": null
        },
        "macro.dbt_resto.get_time_key": {
            "unique_id": "macro.dbt_resto.get_time_key",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_time_key.sql",
            "original_file_path": "macros\\sql\\datetime\\get_time_key.sql",
            "name": "get_time_key",
            "macro_sql": "{% macro get_time_key(column, parts=['hour','minute','second'], h24=True) %}\r\n  {{ adapter.dispatch('get_time_key', 'dbt_resto') (column, parts, h24) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__get_time_key"
                ]
            },
            "description": "Convert the time part to the string of {HOUR}{MINUTE}{SECOND} e.g. 092733\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_time_key.yml",
            "arguments": [
                {
                    "name": "column",
                    "type": "string",
                    "description": "Datetime column"
                },
                {
                    "name": "parts",
                    "type": "list ['hour', 'minute', 'second']",
                    "description": "Indicates to place 00 where the part is missing"
                },
                {
                    "name": "h24",
                    "type": "boolean",
                    "description": "Indicates if the hour is in format of 24h. Default is true"
                }
            ],
            "created_at": 1694070227.0624938,
            "supported_languages": null
        },
        "macro.dbt_resto.default__get_time_key": {
            "unique_id": "macro.dbt_resto.default__get_time_key",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_time_key.sql",
            "original_file_path": "macros\\sql\\datetime\\get_time_key.sql",
            "name": "default__get_time_key",
            "macro_sql": "{% macro default__get_time_key(column, parts, h24) %}\r\n\r\n  {%- set pattern -%}\r\n    {%- if 'hour' in parts -%} HH {%- if h24 -%} 24 {%- else -%} 12 {%- endif -%} {%- else -%} 00 {%- endif -%}\r\n    {%- if 'minute' in parts -%} MI {%- else -%} 00 {%- endif -%}\r\n    {%- if 'second' in parts -%} SS {%- else -%} 00 {%- endif -%}\r\n  {%- endset -%}\r\n  to_varchar({{ column }}, '{{ pattern }}')\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_time_key.yml",
            "arguments": [],
            "created_at": 1694070227.0634885,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__get_time_key": {
            "unique_id": "macro.dbt_resto.sqlserver__get_time_key",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_time_key.sql",
            "original_file_path": "macros\\sql\\datetime\\get_time_key.sql",
            "name": "sqlserver__get_time_key",
            "macro_sql": "{% macro sqlserver__get_time_key(column, parts, h24) %}\r\n\r\n  {%- set pattern -%}\r\n    {%- if 'hour' in parts -%} {%- if h24 -%} HH {%- else -%} hh {%- endif -%} {%- else -%} 00 {%- endif -%}\r\n    {%- if 'minute' in parts -%} mm {%- else -%} 00 {%- endif -%}\r\n    {%- if 'second' in parts -%} ss {%- else -%} 00 {%- endif -%}\r\n  {%- endset -%}\r\n  format({{ column }}, '{{ pattern }}')\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_time_key.yml",
            "arguments": [],
            "created_at": 1694070227.064483,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__get_time_key": {
            "unique_id": "macro.dbt_resto.postgres__get_time_key",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\get_time_key.sql",
            "original_file_path": "macros\\sql\\datetime\\get_time_key.sql",
            "name": "postgres__get_time_key",
            "macro_sql": "{% macro postgres__get_time_key(column, parts, h24) %}\r\n\r\n  {%- set pattern -%}\r\n    {%- if 'hour' in parts -%} HH {%- if h24 -%} 24 {%- else -%} 12 {%- endif -%} {%- else -%} 00 {%- endif -%}\r\n    {%- if 'minute' in parts -%} MI {%- else -%} 00 {%- endif -%}\r\n    {%- if 'second' in parts -%} SS {%- else -%} 00 {%- endif -%}\r\n  {%- endset -%}\r\n  to_char({{ column }}, '{{ pattern }}')\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\get_time_key.yml",
            "arguments": [],
            "created_at": 1694070227.0654824,
            "supported_languages": null
        },
        "macro.dbt_resto.str_to_date": {
            "unique_id": "macro.dbt_resto.str_to_date",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\str_to_date.sql",
            "original_file_path": "macros\\sql\\datetime\\str_to_date.sql",
            "name": "str_to_date",
            "macro_sql": "{% macro str_to_date(column_name, pattern='yyyymmdd') %}\r\n  {{ return(adapter.dispatch('str_to_date', 'dbt_resto')(column_name, pattern)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__str_to_date"
                ]
            },
            "description": "Convert a string formatted in a specific pattern to the date value.\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\str_to_date.yml",
            "arguments": [
                {
                    "name": "column_name",
                    "type": "string",
                    "description": "Column name which holds the date string"
                },
                {
                    "name": "pattern",
                    "type": "string",
                    "description": "The date pattern. Default to yyyymmdd."
                }
            ],
            "created_at": 1694070227.068474,
            "supported_languages": null
        },
        "macro.dbt_resto.default__str_to_date": {
            "unique_id": "macro.dbt_resto.default__str_to_date",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\str_to_date.sql",
            "original_file_path": "macros\\sql\\datetime\\str_to_date.sql",
            "name": "default__str_to_date",
            "macro_sql": "{% macro default__str_to_date(column_name, pattern) -%}\r\n\r\n  try_to_date({{column_name}}::varchar, '{{pattern|upper}}')\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\str_to_date.yml",
            "arguments": [],
            "created_at": 1694070227.0694747,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__str_to_date": {
            "unique_id": "macro.dbt_resto.sqlserver__str_to_date",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\str_to_date.sql",
            "original_file_path": "macros\\sql\\datetime\\str_to_date.sql",
            "name": "sqlserver__str_to_date",
            "macro_sql": "{% macro sqlserver__str_to_date(column_name, pattern) -%}\r\n\r\n  try_convert(date, convert(varchar, {{column_name}}), {{ dbt_resto.sqlserver__get_format_number(pattern) }})\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__get_format_number"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\str_to_date.yml",
            "arguments": [],
            "created_at": 1694070227.0704749,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__get_format_number": {
            "unique_id": "macro.dbt_resto.sqlserver__get_format_number",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\str_to_date.sql",
            "original_file_path": "macros\\sql\\datetime\\str_to_date.sql",
            "name": "sqlserver__get_format_number",
            "macro_sql": "{% macro sqlserver__get_format_number(pattern) %}\r\n\r\n  {#--https://www.mssqltips.com/sqlservertip/1145/date-and-time-conversions-using-sql-server/#}\r\n  {% if pattern == 'mm/dd/yy' %}      {{ return(1) }}   {% endif %}\r\n  {% if pattern == 'yy.mm.dd' %}      {{ return(2) }}   {% endif %}\r\n  {% if pattern == 'dd/mm/yy' %}      {{ return(3) }}   {% endif %}\r\n  {% if pattern == 'dd.mm.yy' %}      {{ return(4) }}   {% endif %}\r\n  {% if pattern == 'dd-mm-yy' %}      {{ return(5) }}   {% endif %}\r\n  {% if pattern == 'dd-Mon-yy' %}     {{ return(6) }}   {% endif %}\r\n  {% if pattern == 'Mon dd, yy' %}    {{ return(7) }}   {% endif %}\r\n  {% if pattern == 'mm-dd-yy' %}      {{ return(10) }}  {% endif %}\r\n  {% if pattern == 'yy/mm/dd' %}      {{ return(11) }}  {% endif %}\r\n  {% if pattern == 'yymmdd' %}        {{ return(12) }}  {% endif %}\r\n  {% if pattern == 'yyyy-mm-dd' %}    {{ return(23) }}  {% endif %}\r\n  {% if pattern == 'mm/dd/yyyy' %}    {{ return(101) }} {% endif %}\r\n  {% if pattern == 'yyyy.mm.dd' %}    {{ return(102) }} {% endif %}\r\n  {% if pattern == 'dd/mm/yyyy' %}    {{ return(103) }} {% endif %}\r\n  {% if pattern == 'dd.mm.yyyy' %}    {{ return(104) }} {% endif %}\r\n  {% if pattern == 'dd-mm-yyyy' %}    {{ return(105) }} {% endif %}\r\n  {% if pattern == 'dd Mon yyyy' %}   {{ return(106) }} {% endif %}\r\n  {% if pattern == 'Mon dd, yyyy' %}  {{ return(107) }} {% endif %}\r\n  {% if pattern == 'mm-dd-yyyy' %}    {{ return(110) }} {% endif %}\r\n  {% if pattern == 'yyyy/mm/dd' %}    {{ return(111) }} {% endif %}\r\n                    {#--'yyyymmdd'#}  {{ return(112) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\str_to_date.yml",
            "arguments": [],
            "created_at": 1694070227.0714755,
            "supported_languages": null
        },
        "macro.dbt_resto.postgres__str_to_date": {
            "unique_id": "macro.dbt_resto.postgres__str_to_date",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\str_to_date.sql",
            "original_file_path": "macros\\sql\\datetime\\str_to_date.sql",
            "name": "postgres__str_to_date",
            "macro_sql": "{% macro postgres__str_to_date(column_name, pattern) -%}\r\n\r\n  {{ generate_schema_name(target.schema) }}.try_to_date({{column_name}}, '{{ pattern }}', null::date)\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\str_to_date.yml",
            "arguments": [],
            "created_at": 1694070227.0714755,
            "supported_languages": null
        },
        "macro.dbt_resto.compile__try_cast": {
            "unique_id": "macro.dbt_resto.compile__try_cast",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\datetime\\compile\\compile__try_cast.sql",
            "original_file_path": "macros\\sql\\datetime\\compile\\compile__try_cast.sql",
            "name": "compile__try_cast",
            "macro_sql": "{% macro compile__try_cast() -%}\r\n\r\n  create or replace function {{ generate_schema_name(target.schema) }}.try_to_date(_in text, _inpat text, inout _out anyelement)\r\n  language plpgsql as\r\n  $func$\r\n  begin\r\n    execute format('SELECT to_date(%L, %L)', $1, $2)\r\n    into  _out;\r\n  exception when others then\r\n    null;\r\n  end\r\n  $func$;\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.generate_schema_name"
                ]
            },
            "description": "Provide func to try_to_date only for Postgres SQL",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\datetime\\compile\\compile__try_cast.yml",
            "arguments": [],
            "created_at": 1694070227.0735078,
            "supported_languages": null
        },
        "macro.dbt_resto.random": {
            "unique_id": "macro.dbt_resto.random",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\number\\random.sql",
            "original_file_path": "macros\\sql\\number\\random.sql",
            "name": "random",
            "macro_sql": "{% macro random() %}\r\n    {{ adapter.dispatch('random', 'dbt_resto') () }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__random"
                ]
            },
            "description": "Get a number randomly between 0 and 1 e.g. 0.3625049184\n",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\number\\random.yml",
            "arguments": [],
            "created_at": 1694070227.074488,
            "supported_languages": null
        },
        "macro.dbt_resto.default__random": {
            "unique_id": "macro.dbt_resto.default__random",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\number\\random.sql",
            "original_file_path": "macros\\sql\\number\\random.sql",
            "name": "default__random",
            "macro_sql": "{% macro default__random() %}\r\n\r\n  abs(random()) / pow(10,19)\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\number\\random.yml",
            "arguments": [],
            "created_at": 1694070227.0754879,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__random": {
            "unique_id": "macro.dbt_resto.sqlserver__random",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\number\\random.sql",
            "original_file_path": "macros\\sql\\number\\random.sql",
            "name": "sqlserver__random",
            "macro_sql": "{% macro sqlserver__random() %}\r\n\r\n  rand(cast(newid() as varbinary))\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": false,
                "node_color": null
            },
            "patch_path": "dbt_resto://macros\\sql\\number\\random.yml",
            "arguments": [],
            "created_at": 1694070227.0754879,
            "supported_languages": null
        },
        "macro.dbt_resto.type_string": {
            "unique_id": "macro.dbt_resto.type_string",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_string",
            "macro_sql": "\r\n\r\n{%- macro type_string() -%}\r\n  {{ return(adapter.dispatch('type_string', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.046255,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_string": {
            "unique_id": "macro.dbt_resto.default__type_string",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\r\n    varchar\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.046255,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__type_string": {
            "unique_id": "macro.dbt_resto.sqlserver__type_string",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "sqlserver__type_string",
            "macro_sql": "\r\n\r\n{%- macro sqlserver__type_string() -%}\r\n    nvarchar\r\n{%- endmacro -%}\r\n\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0472589,
            "supported_languages": null
        },
        "macro.dbt_resto.type_date": {
            "unique_id": "macro.dbt_resto.type_date",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_date",
            "macro_sql": "\r\n\r\n{%- macro type_date() -%}\r\n  {{ return(adapter.dispatch('type_date', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__type_date"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0472589,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_date": {
            "unique_id": "macro.dbt_resto.default__type_date",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_date",
            "macro_sql": "{% macro default__type_date() -%}\r\n  date\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0482547,
            "supported_languages": null
        },
        "macro.dbt_resto.type_timestamp": {
            "unique_id": "macro.dbt_resto.type_timestamp",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\r\n\r\n{%- macro type_timestamp() -%}\r\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.sqlserver__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0482547,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_timestamp": {
            "unique_id": "macro.dbt_resto.default__type_timestamp",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() -%}\r\n  timestamp\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0482547,
            "supported_languages": null
        },
        "macro.dbt_resto.sqlserver__type_timestamp": {
            "unique_id": "macro.dbt_resto.sqlserver__type_timestamp",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "sqlserver__type_timestamp",
            "macro_sql": "{% macro sqlserver__type_timestamp() -%}\r\n  datetime\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0492725,
            "supported_languages": null
        },
        "macro.dbt_resto.type_float": {
            "unique_id": "macro.dbt_resto.type_float",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_float",
            "macro_sql": "\r\n\r\n{%- macro type_float() -%}\r\n  {{ return(adapter.dispatch('type_float', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0492725,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_float": {
            "unique_id": "macro.dbt_resto.default__type_float",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() -%}\r\n  float\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0492725,
            "supported_languages": null
        },
        "macro.dbt_resto.type_numeric": {
            "unique_id": "macro.dbt_resto.type_numeric",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_numeric",
            "macro_sql": "\r\n\r\n{%- macro type_numeric() -%}\r\n  {{ return(adapter.dispatch('type_numeric', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.050261,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_numeric": {
            "unique_id": "macro.dbt_resto.default__type_numeric",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() -%}\r\n  numeric(28, 6)\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.050261,
            "supported_languages": null
        },
        "macro.dbt_resto.type_bigint": {
            "unique_id": "macro.dbt_resto.type_bigint",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_bigint",
            "macro_sql": "\r\n\r\n{%- macro type_bigint() -%}\r\n  {{ return(adapter.dispatch('type_bigint', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0512543,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_bigint": {
            "unique_id": "macro.dbt_resto.default__type_bigint",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() -%}\r\n  bigint\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0512543,
            "supported_languages": null
        },
        "macro.dbt_resto.type_int": {
            "unique_id": "macro.dbt_resto.type_int",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "type_int",
            "macro_sql": "\r\n\r\n{%- macro type_int() -%}\r\n  {{ return(adapter.dispatch('type_int', 'dbt_resto')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_resto.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0522552,
            "supported_languages": null
        },
        "macro.dbt_resto.default__type_int": {
            "unique_id": "macro.dbt_resto.default__type_int",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "macros\\sql\\type\\datatypes.sql",
            "original_file_path": "macros\\sql\\type\\datatypes.sql",
            "name": "default__type_int",
            "macro_sql": "{% macro default__type_int() -%}\r\n  int\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0522552,
            "supported_languages": null
        },
        "macro.dbt_utils.any_value": {
            "unique_id": "macro.dbt_utils.any_value",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\any_value.sql",
            "original_file_path": "macros\\cross_db_utils\\any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0532644,
            "supported_languages": null
        },
        "macro.dbt_utils.default__any_value": {
            "unique_id": "macro.dbt_utils.default__any_value",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\any_value.sql",
            "original_file_path": "macros\\cross_db_utils\\any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0541902,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__any_value": {
            "unique_id": "macro.dbt_utils.postgres__any_value",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\any_value.sql",
            "original_file_path": "macros\\cross_db_utils\\any_value.sql",
            "name": "postgres__any_value",
            "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0541902,
            "supported_languages": null
        },
        "macro.dbt_utils.array_append": {
            "unique_id": "macro.dbt_utils.array_append",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0561945,
            "supported_languages": null
        },
        "macro.dbt_utils.default__array_append": {
            "unique_id": "macro.dbt_utils.default__array_append",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0561945,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__array_append": {
            "unique_id": "macro.dbt_utils.bigquery__array_append",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "bigquery__array_append",
            "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0561945,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__array_append": {
            "unique_id": "macro.dbt_utils.redshift__array_append",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "redshift__array_append",
            "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.057254,
            "supported_languages": null
        },
        "macro.dbt_utils.array_concat": {
            "unique_id": "macro.dbt_utils.array_concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0581946,
            "supported_languages": null
        },
        "macro.dbt_utils.default__array_concat": {
            "unique_id": "macro.dbt_utils.default__array_concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0581946,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__array_concat": {
            "unique_id": "macro.dbt_utils.bigquery__array_concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "bigquery__array_concat",
            "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0592527,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__array_concat": {
            "unique_id": "macro.dbt_utils.redshift__array_concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "redshift__array_concat",
            "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0592527,
            "supported_languages": null
        },
        "macro.dbt_utils.array_construct": {
            "unique_id": "macro.dbt_utils.array_construct",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "array_construct",
            "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.060257,
            "supported_languages": null
        },
        "macro.dbt_utils.default__array_construct": {
            "unique_id": "macro.dbt_utils.default__array_construct",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.060257,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__array_construct": {
            "unique_id": "macro.dbt_utils.snowflake__array_construct",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "snowflake__array_construct",
            "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0612528,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__array_construct": {
            "unique_id": "macro.dbt_utils.redshift__array_construct",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "redshift__array_construct",
            "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0612528,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__array_construct": {
            "unique_id": "macro.dbt_utils.bigquery__array_construct",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "bigquery__array_construct",
            "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0612528,
            "supported_languages": null
        },
        "macro.dbt_utils.bool_or": {
            "unique_id": "macro.dbt_utils.bool_or",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0622542,
            "supported_languages": null
        },
        "macro.dbt_utils.default__bool_or": {
            "unique_id": "macro.dbt_utils.default__bool_or",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0622542,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__bool_or": {
            "unique_id": "macro.dbt_utils.snowflake__bool_or",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "snowflake__bool_or",
            "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0622542,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__bool_or": {
            "unique_id": "macro.dbt_utils.bigquery__bool_or",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "bigquery__bool_or",
            "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.063253,
            "supported_languages": null
        },
        "macro.dbt_utils.cast_array_to_string": {
            "unique_id": "macro.dbt_utils.cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "cast_array_to_string",
            "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_array_to_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.063253,
            "supported_languages": null
        },
        "macro.dbt_utils.default__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.default__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "default__cast_array_to_string",
            "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0642657,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.postgres__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "postgres__cast_array_to_string",
            "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0642657,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.redshift__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "redshift__cast_array_to_string",
            "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0642657,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "bigquery__cast_array_to_string",
            "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0652533,
            "supported_languages": null
        },
        "macro.dbt_utils.cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0652533,
            "supported_languages": null
        },
        "macro.dbt_utils.default__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0662515,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "redshift__cast_bool_to_text",
            "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0662515,
            "supported_languages": null
        },
        "macro.dbt_utils.concat": {
            "unique_id": "macro.dbt_utils.concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0662515,
            "supported_languages": null
        },
        "macro.dbt_utils.default__concat": {
            "unique_id": "macro.dbt_utils.default__concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0672553,
            "supported_languages": null
        },
        "macro.dbt_utils.current_timestamp": {
            "unique_id": "macro.dbt_utils.current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0682707,
            "supported_languages": null
        },
        "macro.dbt_utils.default__current_timestamp": {
            "unique_id": "macro.dbt_utils.default__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0682707,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__current_timestamp": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "redshift__current_timestamp",
            "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0682707,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0682707,
            "supported_languages": null
        },
        "macro.dbt_utils.current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "current_timestamp_in_utc",
            "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.069259,
            "supported_languages": null
        },
        "macro.dbt_utils.default__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "default__current_timestamp_in_utc",
            "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.069259,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "snowflake__current_timestamp_in_utc",
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.069259,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "postgres__current_timestamp_in_utc",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.069259,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "redshift__current_timestamp_in_utc",
            "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.070251,
            "supported_languages": null
        },
        "macro.dbt_utils.type_string": {
            "unique_id": "macro.dbt_utils.type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.071251,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_string": {
            "unique_id": "macro.dbt_utils.default__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.071251,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__type_string": {
            "unique_id": "macro.dbt_utils.redshift__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "redshift__type_string",
            "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.071251,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__type_string": {
            "unique_id": "macro.dbt_utils.postgres__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "postgres__type_string",
            "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0722525,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__type_string": {
            "unique_id": "macro.dbt_utils.snowflake__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "snowflake__type_string",
            "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0722525,
            "supported_languages": null
        },
        "macro.dbt_utils.type_timestamp": {
            "unique_id": "macro.dbt_utils.type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0722525,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_timestamp": {
            "unique_id": "macro.dbt_utils.default__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0731924,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__type_timestamp": {
            "unique_id": "macro.dbt_utils.postgres__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "postgres__type_timestamp",
            "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0731924,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__type_timestamp": {
            "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "snowflake__type_timestamp",
            "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0731924,
            "supported_languages": null
        },
        "macro.dbt_utils.type_float": {
            "unique_id": "macro.dbt_utils.type_float",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0742617,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_float": {
            "unique_id": "macro.dbt_utils.default__type_float",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0742617,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_float": {
            "unique_id": "macro.dbt_utils.bigquery__type_float",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_float",
            "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0742617,
            "supported_languages": null
        },
        "macro.dbt_utils.type_numeric": {
            "unique_id": "macro.dbt_utils.type_numeric",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0752633,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_numeric": {
            "unique_id": "macro.dbt_utils.default__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0752633,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_numeric": {
            "unique_id": "macro.dbt_utils.bigquery__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_numeric",
            "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0752633,
            "supported_languages": null
        },
        "macro.dbt_utils.type_bigint": {
            "unique_id": "macro.dbt_utils.type_bigint",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.076252,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_bigint": {
            "unique_id": "macro.dbt_utils.default__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.076252,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_bigint": {
            "unique_id": "macro.dbt_utils.bigquery__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_bigint",
            "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.076252,
            "supported_languages": null
        },
        "macro.dbt_utils.type_int": {
            "unique_id": "macro.dbt_utils.type_int",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0772505,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_int": {
            "unique_id": "macro.dbt_utils.default__type_int",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_int",
            "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0772505,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_int": {
            "unique_id": "macro.dbt_utils.bigquery__type_int",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_int",
            "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0772505,
            "supported_languages": null
        },
        "macro.dbt_utils.dateadd": {
            "unique_id": "macro.dbt_utils.dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0792553,
            "supported_languages": null
        },
        "macro.dbt_utils.default__dateadd": {
            "unique_id": "macro.dbt_utils.default__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.08026,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__dateadd": {
            "unique_id": "macro.dbt_utils.bigquery__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "bigquery__dateadd",
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.08026,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__dateadd": {
            "unique_id": "macro.dbt_utils.postgres__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0812583,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__dateadd": {
            "unique_id": "macro.dbt_utils.redshift__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "redshift__dateadd",
            "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0812583,
            "supported_languages": null
        },
        "macro.dbt_utils.datediff": {
            "unique_id": "macro.dbt_utils.datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.088326,
            "supported_languages": null
        },
        "macro.dbt_utils.default__datediff": {
            "unique_id": "macro.dbt_utils.default__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.088326,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__datediff": {
            "unique_id": "macro.dbt_utils.bigquery__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "bigquery__datediff",
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0892618,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__datediff": {
            "unique_id": "macro.dbt_utils.postgres__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "postgres__datediff",
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0933342,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__datediff": {
            "unique_id": "macro.dbt_utils.redshift__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "redshift__datediff",
            "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.094325,
            "supported_languages": null
        },
        "macro.dbt_utils.date_trunc": {
            "unique_id": "macro.dbt_utils.date_trunc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0953333,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_trunc": {
            "unique_id": "macro.dbt_utils.default__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0953333,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__date_trunc": {
            "unique_id": "macro.dbt_utils.bigquery__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "bigquery__date_trunc",
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0953333,
            "supported_languages": null
        },
        "macro.dbt_utils.escape_single_quotes": {
            "unique_id": "macro.dbt_utils.escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0963461,
            "supported_languages": null
        },
        "macro.dbt_utils.default__escape_single_quotes": {
            "unique_id": "macro.dbt_utils.default__escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0963461,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__escape_single_quotes": {
            "unique_id": "macro.dbt_utils.snowflake__escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "snowflake__escape_single_quotes",
            "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0973434,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__escape_single_quotes": {
            "unique_id": "macro.dbt_utils.bigquery__escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "bigquery__escape_single_quotes",
            "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0973434,
            "supported_languages": null
        },
        "macro.dbt_utils.except": {
            "unique_id": "macro.dbt_utils.except",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0983336,
            "supported_languages": null
        },
        "macro.dbt_utils.default__except": {
            "unique_id": "macro.dbt_utils.default__except",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0983336,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__except": {
            "unique_id": "macro.dbt_utils.bigquery__except",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "bigquery__except",
            "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0983336,
            "supported_languages": null
        },
        "macro.dbt_utils.hash": {
            "unique_id": "macro.dbt_utils.hash",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0983336,
            "supported_languages": null
        },
        "macro.dbt_utils.default__hash": {
            "unique_id": "macro.dbt_utils.default__hash",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0993245,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__hash": {
            "unique_id": "macro.dbt_utils.bigquery__hash",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "bigquery__hash",
            "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.0993245,
            "supported_languages": null
        },
        "macro.dbt_utils.identifier": {
            "unique_id": "macro.dbt_utils.identifier",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "identifier",
            "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__identifier"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1006966,
            "supported_languages": null
        },
        "macro.dbt_utils.default__identifier": {
            "unique_id": "macro.dbt_utils.default__identifier",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "default__identifier",
            "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1006966,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__identifier": {
            "unique_id": "macro.dbt_utils.bigquery__identifier",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "bigquery__identifier",
            "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1006966,
            "supported_languages": null
        },
        "macro.dbt_utils.intersect": {
            "unique_id": "macro.dbt_utils.intersect",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1017716,
            "supported_languages": null
        },
        "macro.dbt_utils.default__intersect": {
            "unique_id": "macro.dbt_utils.default__intersect",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1017716,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__intersect": {
            "unique_id": "macro.dbt_utils.bigquery__intersect",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "bigquery__intersect",
            "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1017716,
            "supported_languages": null
        },
        "macro.dbt_utils.last_day": {
            "unique_id": "macro.dbt_utils.last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1027718,
            "supported_languages": null
        },
        "macro.dbt_utils.default_last_day": {
            "unique_id": "macro.dbt_utils.default_last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1037579,
            "supported_languages": null
        },
        "macro.dbt_utils.default__last_day": {
            "unique_id": "macro.dbt_utils.default__last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1037579,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__last_day": {
            "unique_id": "macro.dbt_utils.postgres__last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "postgres__last_day",
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1047587,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__last_day": {
            "unique_id": "macro.dbt_utils.redshift__last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "redshift__last_day",
            "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1047587,
            "supported_languages": null
        },
        "macro.dbt_utils.length": {
            "unique_id": "macro.dbt_utils.length",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1057608,
            "supported_languages": null
        },
        "macro.dbt_utils.default__length": {
            "unique_id": "macro.dbt_utils.default__length",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1066985,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__length": {
            "unique_id": "macro.dbt_utils.redshift__length",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "redshift__length",
            "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1066985,
            "supported_languages": null
        },
        "macro.dbt_utils.listagg": {
            "unique_id": "macro.dbt_utils.listagg",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1097574,
            "supported_languages": null
        },
        "macro.dbt_utils.default__listagg": {
            "unique_id": "macro.dbt_utils.default__listagg",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.110758,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__listagg": {
            "unique_id": "macro.dbt_utils.bigquery__listagg",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "bigquery__listagg",
            "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1117623,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__listagg": {
            "unique_id": "macro.dbt_utils.postgres__listagg",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "postgres__listagg",
            "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1127596,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__listagg": {
            "unique_id": "macro.dbt_utils.redshift__listagg",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "redshift__listagg",
            "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1147563,
            "supported_languages": null
        },
        "macro.dbt_utils.string_literal": {
            "unique_id": "macro.dbt_utils.string_literal",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\literal.sql",
            "original_file_path": "macros\\cross_db_utils\\literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.115704,
            "supported_languages": null
        },
        "macro.dbt_utils.default__string_literal": {
            "unique_id": "macro.dbt_utils.default__string_literal",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\literal.sql",
            "original_file_path": "macros\\cross_db_utils\\literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.115704,
            "supported_languages": null
        },
        "macro.dbt_utils.position": {
            "unique_id": "macro.dbt_utils.position",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1167018,
            "supported_languages": null
        },
        "macro.dbt_utils.default__position": {
            "unique_id": "macro.dbt_utils.default__position",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1167018,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__position": {
            "unique_id": "macro.dbt_utils.bigquery__position",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "bigquery__position",
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1167018,
            "supported_languages": null
        },
        "macro.dbt_utils.replace": {
            "unique_id": "macro.dbt_utils.replace",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\replace.sql",
            "original_file_path": "macros\\cross_db_utils\\replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1177013,
            "supported_languages": null
        },
        "macro.dbt_utils.default__replace": {
            "unique_id": "macro.dbt_utils.default__replace",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\replace.sql",
            "original_file_path": "macros\\cross_db_utils\\replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1177013,
            "supported_languages": null
        },
        "macro.dbt_utils.right": {
            "unique_id": "macro.dbt_utils.right",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1187012,
            "supported_languages": null
        },
        "macro.dbt_utils.default__right": {
            "unique_id": "macro.dbt_utils.default__right",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1187012,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__right": {
            "unique_id": "macro.dbt_utils.bigquery__right",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "bigquery__right",
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1197011,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__right": {
            "unique_id": "macro.dbt_utils.snowflake__right",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "snowflake__right",
            "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1197011,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_cast": {
            "unique_id": "macro.dbt_utils.safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.120701,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_cast": {
            "unique_id": "macro.dbt_utils.default__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.120701,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__safe_cast": {
            "unique_id": "macro.dbt_utils.snowflake__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "snowflake__safe_cast",
            "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.120701,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__safe_cast": {
            "unique_id": "macro.dbt_utils.bigquery__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "bigquery__safe_cast",
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1217008,
            "supported_languages": null
        },
        "macro.dbt_utils.split_part": {
            "unique_id": "macro.dbt_utils.split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1237602,
            "supported_languages": null
        },
        "macro.dbt_utils.default__split_part": {
            "unique_id": "macro.dbt_utils.default__split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1237602,
            "supported_languages": null
        },
        "macro.dbt_utils._split_part_negative": {
            "unique_id": "macro.dbt_utils._split_part_negative",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.124761,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__split_part": {
            "unique_id": "macro.dbt_utils.postgres__split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "postgres__split_part",
            "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part",
                    "macro.dbt_utils._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1257615,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__split_part": {
            "unique_id": "macro.dbt_utils.redshift__split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "redshift__split_part",
            "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part",
                    "macro.dbt_utils._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1257615,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__split_part": {
            "unique_id": "macro.dbt_utils.bigquery__split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "bigquery__split_part",
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1267579,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "unique_id": "macro.dbt_utils.width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1287587,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1297584,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "unique_id": "macro.dbt_utils.redshift__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "redshift__width_bucket",
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1307569,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1317358,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_is_ephemeral.sql",
            "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql",
            "name": "_is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.132737,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "unique_id": "macro.dbt_utils._is_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_is_relation.sql",
            "original_file_path": "macros\\cross_db_utils\\_is_relation.sql",
            "name": "_is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1337354,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "name": "test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1357362,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "name": "default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1357362,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "name": "test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1367347,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "name": "default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1377373,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "name": "test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.138736,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "name": "default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1397018,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "unique_id": "macro.dbt_utils.test_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "name": "test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.140757,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "unique_id": "macro.dbt_utils.default__test_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "name": "default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1437423,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "name": "test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1447458,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "name": "default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.145744,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1477458,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "name": "default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.148744,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "name": "test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1497495,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "name": "default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1497495,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "name": "test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1557448,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "name": "default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1607609,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "name": "test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.162737,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "name": "default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1637616,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "unique_id": "macro.dbt_utils.test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "name": "test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.165759,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "name": "default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.165759,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "name": "test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1677582,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "name": "default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1687574,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "unique_id": "macro.dbt_utils.test_recency",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "name": "test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1707575,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "unique_id": "macro.dbt_utils.default__test_recency",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "name": "default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.171765,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "name": "test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.173762,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "name": "default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1757581,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "name": "test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1777575,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "name": "default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.179758,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_where": {
            "unique_id": "macro.dbt_utils.test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_not_null_where.sql",
            "original_file_path": "macros\\generic_tests\\test_not_null_where.sql",
            "name": "test_not_null_where",
            "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1807566,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_where": {
            "unique_id": "macro.dbt_utils.default__test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_not_null_where.sql",
            "original_file_path": "macros\\generic_tests\\test_not_null_where.sql",
            "name": "default__test_not_null_where",
            "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1817582,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_where": {
            "unique_id": "macro.dbt_utils.test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_unique_where.sql",
            "original_file_path": "macros\\generic_tests\\test_unique_where.sql",
            "name": "test_unique_where",
            "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1827564,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_where": {
            "unique_id": "macro.dbt_utils.default__test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_unique_where.sql",
            "original_file_path": "macros\\generic_tests\\test_unique_where.sql",
            "name": "default__test_unique_where",
            "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1837568,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1858318,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "name": "default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1878319,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "unique_id": "macro.dbt_utils.log_info",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "name": "log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.188832,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "unique_id": "macro.dbt_utils.default__log_info",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "name": "default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.189764,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "name": "pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.189764,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "name": "default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1908557,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "unique_id": "macro.dbt_utils.pretty_time",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "name": "pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1908557,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "name": "default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1918259,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "unique_id": "macro.dbt_utils.slugify",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\slugify.sql",
            "original_file_path": "macros\\jinja_helpers\\slugify.sql",
            "name": "slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1928375,
            "supported_languages": null
        },
        "macro.dbt_utils.get_period_boundaries": {
            "unique_id": "macro.dbt_utils.get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "get_period_boundaries",
            "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_boundaries"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.1993995,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_period_boundaries": {
            "unique_id": "macro.dbt_utils.default__get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "default__get_period_boundaries",
            "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2004902,
            "supported_languages": null
        },
        "macro.dbt_utils.get_period_sql": {
            "unique_id": "macro.dbt_utils.get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "get_period_sql",
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.201472,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_period_sql": {
            "unique_id": "macro.dbt_utils.default__get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "default__get_period_sql",
            "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2024758,
            "supported_languages": null
        },
        "macro.dbt_utils.materialization_insert_by_period_default": {
            "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "materialization_insert_by_period_default",
            "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_utils.get_period_boundaries",
                    "macro.dbt_utils.log_info",
                    "macro.dbt_utils.get_period_sql",
                    "macro.dbt.noop_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2144697,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_utils.get_intervals_between": {
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2174733,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.219469,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "unique_id": "macro.dbt_utils.date_spine",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.219469,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "unique_id": "macro.dbt_utils.default__date_spine",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2214694,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "unique_id": "macro.dbt_utils.deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2284548,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2284548,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2294655,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2294655,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2304559,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2304559,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2324703,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.233461,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "unique_id": "macro.dbt_utils.generate_series",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.234473,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "unique_id": "macro.dbt_utils.default__generate_series",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2354722,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "unique_id": "macro.dbt_utils.get_column_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2374578,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2434783,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "name": "get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2444737,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "name": "default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2474682,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2484705,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.25147,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2534702,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2564077,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2584214,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2614195,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2634203,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2644193,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2654204,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "_bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2664187,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2674186,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2674186,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2684207,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2684207,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2684207,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "bigquery__get_table_types_sql",
            "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.269419,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "unique_id": "macro.dbt_utils.group_by",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.269419,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "unique_id": "macro.dbt_utils.default__group_by",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2704194,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2714188,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "unique_id": "macro.dbt_utils.haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.273414,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2744715,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2774715,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "unique_id": "macro.dbt_utils.nullcheck",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2794712,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.280469,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2814684,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2824707,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "unique_id": "macro.dbt_utils.pivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2855484,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "unique_id": "macro.dbt_utils.default__pivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2885463,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "unique_id": "macro.dbt_utils.safe_add",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "safe_add",
            "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2905548,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "unique_id": "macro.dbt_utils.default__safe_add",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2915604,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "unique_id": "macro.dbt_utils.star",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2945633,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "unique_id": "macro.dbt_utils.default__star",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.2985842,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "unique_id": "macro.dbt_utils.surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3012526,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.hash",
                    "macro.dbt_utils.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3052375,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "unique_id": "macro.dbt_utils.union_relations",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3112462,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "unique_id": "macro.dbt_utils.default__union_relations",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3222117,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "unique_id": "macro.dbt_utils.unpivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3255897,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "unique_id": "macro.dbt_utils.default__unpivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.328597,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "unique_id": "macro.dbt_utils.get_url_host",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3295975,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3306031,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3315911,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3325896,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "unique_id": "macro.dbt_utils.get_url_path",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3335981,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "package_name": "dbt_utils",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.position",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.right",
                    "macro.dbt_utils.length",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1694070224.3345292,
            "supported_languages": null
        }
    },
    "docs": {
        "integration_tests.__overview__": {
            "unique_id": "integration_tests.__overview__",
            "package_name": "integration_tests",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
            "path": "overview.md",
            "original_file_path": "models\\overview.md",
            "name": "__overview__",
            "block_contents": "# dbt-resto\r\nThis is dbt package for FUN!\r\n\r\nSupported warehouses: SQL Server\r\n\r\n## Technical documentation\r\n\r\nPlease visit the Github [README](https://github.com/datnguye/dbt-resto/blob/main/README.md)"
        },
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "C:\\Users\\DAT\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\dbt-resto-tests-MAtrBDts-py3.9\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "overview.md",
            "original_file_path": "docs\\overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {
        "exposure.dbt_resto.power655_forecast": {
            "fqn": [
                "dbt_resto",
                "vietlot",
                "power655",
                "mart",
                "power655_forecast"
            ],
            "unique_id": "exposure.dbt_resto.power655_forecast",
            "package_name": "dbt_resto",
            "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests\\dbt_packages\\dbt_resto",
            "path": "vietlot\\power655\\mart\\exposures.yml",
            "original_file_path": "models\\vietlot\\power655\\mart\\exposures.yml",
            "name": "power655_forecast",
            "type": "dashboard",
            "owner": {
                "email": "datnguyen.it09@gmail.com",
                "name": "Dat Nguyen"
            },
            "resource_type": "exposure",
            "description": "Forecasting of Power 6/55\n",
            "label": "Power655 Forecast",
            "maturity": "high",
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "unrendered_config": {},
            "url": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_resto.power655_raw.power655_data",
                    "model.dbt_resto.dim_box",
                    "model.dbt_resto.dim_prize",
                    "model.dbt_resto.dim_date",
                    "model.dbt_resto.fact_number",
                    "model.dbt_resto.fact_result"
                ]
            },
            "refs": [
                [
                    "dim_box"
                ],
                [
                    "dim_prize"
                ],
                [
                    "dim_date"
                ],
                [
                    "fact_number"
                ],
                [
                    "fact_result"
                ]
            ],
            "sources": [
                [
                    "power655_raw",
                    "power655_data"
                ]
            ],
            "created_at": 1694070498.940804
        }
    },
    "metrics": {},
    "selectors": {},
    "disabled": {
        "test.integration_tests.dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_text_only___a_zA_z_.1dcd22b156": [
            {
                "test_metadata": {
                    "name": "if_column_value_to_match_regex",
                    "kwargs": {
                        "regex_expr": "[a-zA-z]",
                        "column_name": "text_only",
                        "model": "{{ get_where_subquery(ref('verify_if_column_value_to_match_regex')) }}"
                    },
                    "namespace": "dbt_resto"
                },
                "resource_type": "test",
                "depends_on": {
                    "macros": [
                        "macro.dbt_resto.test_if_column_value_to_match_regex",
                        "macro.dbt.get_where_subquery"
                    ],
                    "nodes": []
                },
                "config": {
                    "enabled": false,
                    "alias": "dbt_resto_if_column_value_to_m_5cc0f7b6961bf9ec9820a1c02025e708",
                    "schema": "dbt_test__audit",
                    "database": null,
                    "tags": [],
                    "meta": {},
                    "materialized": "test",
                    "severity": "ERROR",
                    "store_failures": null,
                    "where": null,
                    "limit": null,
                    "fail_calc": "count(*)",
                    "warn_if": "!= 0",
                    "error_if": "!= 0"
                },
                "database": "msdb",
                "schema": "dbt_test__audit",
                "fqn": [
                    "integration_tests",
                    "generic_test",
                    "dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_text_only___a_zA_z_"
                ],
                "unique_id": "test.integration_tests.dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_text_only___a_zA_z_.1dcd22b156",
                "raw_code": "{{ dbt_resto.test_if_column_value_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,alias=\"dbt_resto_if_column_value_to_m_5cc0f7b6961bf9ec9820a1c02025e708\") }}",
                "language": "sql",
                "package_name": "integration_tests",
                "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
                "path": "dbt_resto_if_column_value_to_m_5cc0f7b6961bf9ec9820a1c02025e708.sql",
                "original_file_path": "models\\generic_test\\schema.yml",
                "name": "dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_text_only___a_zA_z_",
                "alias": "dbt_resto_if_column_value_to_m_5cc0f7b6961bf9ec9820a1c02025e708",
                "checksum": {
                    "name": "none",
                    "checksum": ""
                },
                "tags": [],
                "refs": [
                    [
                        "verify_if_column_value_to_match_regex"
                    ]
                ],
                "sources": [],
                "metrics": [],
                "description": "",
                "columns": {},
                "meta": {},
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "patch_path": null,
                "compiled_path": null,
                "build_path": null,
                "deferred": false,
                "unrendered_config": {
                    "enabled": false,
                    "alias": "dbt_resto_if_column_value_to_m_5cc0f7b6961bf9ec9820a1c02025e708"
                },
                "created_at": 1694070226.0271075,
                "config_call_dict": {
                    "enabled": false,
                    "alias": "dbt_resto_if_column_value_to_m_5cc0f7b6961bf9ec9820a1c02025e708"
                },
                "column_name": "text_only",
                "file_key_name": "models.verify_if_column_value_to_match_regex"
            }
        ],
        "test.integration_tests.dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_number_only___0_9_.dc9b90d79c": [
            {
                "test_metadata": {
                    "name": "if_column_value_to_match_regex",
                    "kwargs": {
                        "regex_expr": "[0-9]",
                        "column_name": "number_only",
                        "model": "{{ get_where_subquery(ref('verify_if_column_value_to_match_regex')) }}"
                    },
                    "namespace": "dbt_resto"
                },
                "resource_type": "test",
                "depends_on": {
                    "macros": [
                        "macro.dbt_resto.test_if_column_value_to_match_regex",
                        "macro.dbt.get_where_subquery"
                    ],
                    "nodes": []
                },
                "config": {
                    "enabled": false,
                    "alias": "dbt_resto_if_column_value_to_m_d8bb460a2bbfe14f7484f1c8865cdc55",
                    "schema": "dbt_test__audit",
                    "database": null,
                    "tags": [],
                    "meta": {},
                    "materialized": "test",
                    "severity": "ERROR",
                    "store_failures": null,
                    "where": null,
                    "limit": null,
                    "fail_calc": "count(*)",
                    "warn_if": "!= 0",
                    "error_if": "!= 0"
                },
                "database": "msdb",
                "schema": "dbt_test__audit",
                "fqn": [
                    "integration_tests",
                    "generic_test",
                    "dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_number_only___0_9_"
                ],
                "unique_id": "test.integration_tests.dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_number_only___0_9_.dc9b90d79c",
                "raw_code": "{{ dbt_resto.test_if_column_value_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,alias=\"dbt_resto_if_column_value_to_m_d8bb460a2bbfe14f7484f1c8865cdc55\") }}",
                "language": "sql",
                "package_name": "integration_tests",
                "root_path": "C:\\Users\\DAT\\Documents\\Sources\\dbt-resto\\integration_tests",
                "path": "dbt_resto_if_column_value_to_m_d8bb460a2bbfe14f7484f1c8865cdc55.sql",
                "original_file_path": "models\\generic_test\\schema.yml",
                "name": "dbt_resto_if_column_value_to_match_regex_verify_if_column_value_to_match_regex_number_only___0_9_",
                "alias": "dbt_resto_if_column_value_to_m_d8bb460a2bbfe14f7484f1c8865cdc55",
                "checksum": {
                    "name": "none",
                    "checksum": ""
                },
                "tags": [],
                "refs": [
                    [
                        "verify_if_column_value_to_match_regex"
                    ]
                ],
                "sources": [],
                "metrics": [],
                "description": "",
                "columns": {},
                "meta": {},
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "patch_path": null,
                "compiled_path": null,
                "build_path": null,
                "deferred": false,
                "unrendered_config": {
                    "enabled": false,
                    "alias": "dbt_resto_if_column_value_to_m_d8bb460a2bbfe14f7484f1c8865cdc55"
                },
                "created_at": 1694070226.0341067,
                "config_call_dict": {
                    "enabled": false,
                    "alias": "dbt_resto_if_column_value_to_m_d8bb460a2bbfe14f7484f1c8865cdc55"
                },
                "column_name": "number_only",
                "file_key_name": "models.verify_if_column_value_to_match_regex"
            }
        ]
    },
    "parent_map": {
        "model.integration_tests.verify_get_table_alias": [],
        "model.integration_tests.verify_if_column_value_to_match_regex": [],
        "model.integration_tests.verify_materialized_view": [],
        "model.integration_tests.verify_generate_schema_name": [],
        "model.integration_tests.verify_datepart": [],
        "model.integration_tests.verify_get_base_times_hour": [],
        "model.integration_tests.verify_get_base_times_minute": [],
        "model.integration_tests.verify_get_base_times_second": [],
        "model.integration_tests.verify_get_time_dimension_hour": [],
        "model.integration_tests.verify_get_time_dimension_minute": [],
        "model.integration_tests.verify_get_time_dimension_second": [],
        "model.integration_tests.verify_get_time_key": [],
        "model.integration_tests.verify_str_to_date": [],
        "test.integration_tests.if_materilized_view_created": [
            "model.integration_tests.verify_materialized_view",
            "model.integration_tests.verify_materialized_view",
            "model.integration_tests.verify_materialized_view",
            "model.integration_tests.verify_materialized_view",
            "model.integration_tests.verify_materialized_view",
            "model.integration_tests.verify_materialized_view"
        ],
        "test.integration_tests.if_get_base_times_correct_count": [
            "model.integration_tests.verify_get_base_times_hour",
            "model.integration_tests.verify_get_base_times_minute"
        ],
        "test.integration_tests.if_get_time_dimension_correct_count": [
            "model.integration_tests.verify_get_time_dimension_hour",
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "model.dbt_resto.dim_box": [
            "model.dbt_resto.staging_power655_box"
        ],
        "model.dbt_resto.dim_date": [
            "model.dbt_resto.staging_power655_box"
        ],
        "model.dbt_resto.dim_prize": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "model.dbt_resto.fact_number": [
            "model.dbt_resto.staging_power655_box"
        ],
        "model.dbt_resto.fact_number_forecast": [
            "model.dbt_resto.dim_box",
            "model.dbt_resto.fact_number_scoring"
        ],
        "model.dbt_resto.fact_number_scoring": [
            "model.dbt_resto.dim_box",
            "model.dbt_resto.fact_number"
        ],
        "model.dbt_resto.fact_result": [
            "model.dbt_resto.staging_power655_box",
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "model.dbt_resto.fact_set_number": [
            "model.dbt_resto.staging_power655_box"
        ],
        "model.dbt_resto.staging_power655_box": [
            "seed.dbt_resto.vietlot_power655_data"
        ],
        "model.dbt_resto.staging_power655_box_detail": [
            "seed.dbt_resto.vietlot_power655_data"
        ],
        "seed.dbt_resto.vietlot_power655_data": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_table_alias_actual_expected.83b0634280": [
            "model.integration_tests.verify_get_table_alias"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected.5623649e25": [
            "model.integration_tests.verify_generate_schema_name"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_datepart_actual_expected.579cb14d82": [
            "model.integration_tests.verify_datepart"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_key_actual_expected.f10650ac08": [
            "model.integration_tests.verify_get_time_key"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_.196a62d483": [
            "model.integration_tests.verify_str_to_date"
        ],
        "test.integration_tests.unique_verify_get_base_times_hour_time_value.2857e797c6": [
            "model.integration_tests.verify_get_base_times_hour"
        ],
        "test.integration_tests.not_null_verify_get_base_times_hour_time_value.4b9e0e07f6": [
            "model.integration_tests.verify_get_base_times_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0.55995f0cf1": [
            "model.integration_tests.verify_get_base_times_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0.2cf6632f3e": [
            "model.integration_tests.verify_get_base_times_hour"
        ],
        "test.integration_tests.unique_verify_get_base_times_minute_time_value.1b8f4aa3c2": [
            "model.integration_tests.verify_get_base_times_minute"
        ],
        "test.integration_tests.not_null_verify_get_base_times_minute_time_value.fbcdd6c2ec": [
            "model.integration_tests.verify_get_base_times_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0.bbb807cc08": [
            "model.integration_tests.verify_get_base_times_minute"
        ],
        "test.integration_tests.unique_verify_get_base_times_second_time_value.8f7a0195be": [
            "model.integration_tests.verify_get_base_times_second"
        ],
        "test.integration_tests.not_null_verify_get_base_times_second_time_value.6666c54e2a": [
            "model.integration_tests.verify_get_base_times_second"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_key.6cb5645b91": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_key.40ac6bcdc9": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0.b0a16bbd1c": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_value.40da5a66ce": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_value.6d51d85fdd": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_string.6052fb441e": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_string.819ccd433f": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time24_string.24235bd903": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time24_string.aaba73be70": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_number.f6e460b28e": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0.053244f188": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_name.2ece919e94": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour_name.2fef2e525b": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_number.c98eeb55ce": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_number.7a0f2b018b": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0.769f49524e": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_name.ed2603071a": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_name.b9c97be807": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6.7547b65170": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_.415264634c": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number.962f83f7ca": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9.5f29f1cfa3": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_.39d1570ad0": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_.05bc60173f": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number.7b16500f77": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12.166dd28398": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name.90307c68ce": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name.cc51bda591": [
            "model.integration_tests.verify_get_time_dimension_hour"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_time_key.4c959b7405": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_minute_time_key.9b49938cf0": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0.940c8c15a7": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_minute_number.e020cf7358": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0.c9f2b49b08": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_hour_minute_name.8821fe75c8": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_minute_hour_minute_name.11761c97cc": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_hour24_minute_name.273e260049": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_minute_hour24_minute_name.0e495cdf8f": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6.a9e9d32195": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_.ae7a7fe520": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number.385ddd2bdf": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number.c0ba22106c": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9.a46539940d": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_.e82de94636": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_.9e4f0d9cfa": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number.888b8dfa28": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12.1ba9d98873": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number.12cbae0313": [
            "model.integration_tests.verify_get_time_dimension_minute"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_second_time_key.3e38a35f21": [
            "model.integration_tests.verify_get_time_dimension_second"
        ],
        "test.integration_tests.unique_verify_get_time_dimension_second_time_key.06079d47be": [
            "model.integration_tests.verify_get_time_dimension_second"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0.94566f4d0a": [
            "model.integration_tests.verify_get_time_dimension_second"
        ],
        "test.integration_tests.not_null_verify_get_time_dimension_second_second_number.c30800f56b": [
            "model.integration_tests.verify_get_time_dimension_second"
        ],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0.ce810077c6": [
            "model.integration_tests.verify_get_time_dimension_second"
        ],
        "test.dbt_resto.not_null_dim_box_box_key.b16bc11428": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.unique_dim_box_box_key.882dfb24f6": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_id.7cf1c755c0": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.unique_dim_box_box_id.bcbdf63964": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_date.aadb37452c": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_numbers.6cd2b13759": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_number_1.62ad3f5049": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2.831c1ec966": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3.d15be44956": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4.87ac1d2e38": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5.b37ad70c7b": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6.ce0ae89185": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_number_2.9d962bb07f": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3.f39d62bfe0": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4.6340802cad": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5.5ddd4797a1": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6.55053d24e6": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_number_3.0cc5d7108c": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4.7d5c748bf7": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5.fbecf9fa91": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6.3c13d3612a": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_number_4.b4a01fd9ed": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5.66ed75e168": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6.cfc0f21018": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_number_5.173e838274": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6.22aa7e5d89": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_box_box_result_number_6.b31bf8c462": [
            "model.dbt_resto.dim_box"
        ],
        "test.dbt_resto.not_null_dim_date_date_key.881d0a31b6": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.unique_dim_date_date_key.0869fd48f9": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_date_box_date.63ab3e2f98": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.unique_dim_date_box_date.00ea449b36": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_date_box_day.f3cabd7806": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_date_box_week.c4fbb026af": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_date_box_month.107d6bb62f": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_date_box_month_name.070c5fdd5e": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_date_box_year.e2fc6c3a22": [
            "model.dbt_resto.dim_date"
        ],
        "test.dbt_resto.not_null_dim_prize_prize_key.2f1a24a14a": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.unique_dim_prize_prize_key.89c819e56f": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.not_null_dim_prize_prize_name.f334b496c0": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.a9ef660412": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.not_null_dim_prize_prize_order.bc63d43f80": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___1.05fc15ef2d": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___2.a272475871": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___3.6f39bdba6d": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___4.5d56b70d78": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___5.81c9c5d1d7": [
            "model.dbt_resto.dim_prize"
        ],
        "test.dbt_resto.not_null_fact_number_number_value.4e75652b39": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.unique_fact_number_number_value.0b64375e98": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55.6d015426a8": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.not_null_fact_number_occurrence.33a1ae908b": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence___0.d698f93b85": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.e977128d3c": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence.fffe5fcf38": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.7e540350fc": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence.a20273c523": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.eae16a31a7": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence.794270338d": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.7ae8134db4": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence.d9203fae6e": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.431ba40dca": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence.5ac56f6c49": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.faf1aadc8c": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence.b1f0d38fd5": [
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance__date_key__ref_dim_date_.c792e50556": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_.173746a33d": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_.02689b4e6a": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_.2ab023fcfc": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_.05d8a30d70": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_.d17efedb3f": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_.ba3c81a09a": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_date.b07673366c": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.unique_fact_number_forecast_forecast_date.3b1034ba6c": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_date.82f507a41f": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_numbers.a45c6cfd86": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_numbers.bb234c695a": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_1.ded058c32e": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_1.4df45fc79d": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_2.7b02c6f0f4": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_2.267bedde94": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_3.14f65ff8ea": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_3.050bd49e30": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_4.a64f5e1198": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_4.05c88c48e3": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_5.23b3cf8441": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_5.635349d956": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_6.f44d77e561": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_6.82a5a7c197": [
            "model.dbt_resto.fact_number_forecast"
        ],
        "test.dbt_resto.not_null_fact_number_scoring_fact_key.e0ef6c1363": [
            "model.dbt_resto.fact_number_scoring"
        ],
        "test.dbt_resto.unique_fact_number_scoring_fact_key.61a385c67f": [
            "model.dbt_resto.fact_number_scoring"
        ],
        "test.dbt_resto.not_null_fact_number_scoring_forecast_date.b50f468a17": [
            "model.dbt_resto.fact_number_scoring"
        ],
        "test.dbt_resto.not_null_fact_number_scoring_number_value.0eeeee00c9": [
            "model.dbt_resto.fact_number_scoring"
        ],
        "test.dbt_resto.dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value.9c94cd6f52": [
            "model.dbt_resto.fact_number_scoring"
        ],
        "test.dbt_resto.not_null_fact_result_fact_result_key.d0d417d65b": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.unique_fact_result_fact_result_key.8a94eb890a": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_box_key.cc5e732aa6": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.relationships_fact_result_box_key__box_key__ref_dim_box_.5c858aab5c": [
            "model.dbt_resto.dim_box",
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_prize_key.e4d5386aa4": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.relationships_fact_result_prize_key__prize_key__ref_dim_prize_.785b3097aa": [
            "model.dbt_resto.dim_prize",
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_date_key.4012645d7b": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.relationships_fact_result_date_key__date_key__ref_dim_date_.d8736057f7": [
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_no_of_won.e243af0b8f": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_no_of_won___0.8228233c65": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_prize_value.47fbd23e11": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_value___0.fd41678c63": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_prize_paid.24dad4f916": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won.7b3266a018": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_result_is_prize_taken.3931d16464": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_is_prize_taken___1.4e05c4d270": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.accepted_values_fact_result_is_prize_taken__0__1.525fda6614": [
            "model.dbt_resto.fact_result"
        ],
        "test.dbt_resto.not_null_fact_set_number_box_result_numbers.b3ed62ae31": [
            "model.dbt_resto.fact_set_number"
        ],
        "test.dbt_resto.unique_fact_set_number_box_result_numbers.a4fb7c8414": [
            "model.dbt_resto.fact_set_number"
        ],
        "test.dbt_resto.not_null_fact_set_number_occurrence.404244b933": [
            "model.dbt_resto.fact_set_number"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_set_number_occurrence___0.9b854b58c0": [
            "model.dbt_resto.fact_set_number"
        ],
        "test.dbt_resto.unique_staging_power655_box_sk_box.3cb514c8c1": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_sk_box.320d0ede5f": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.unique_staging_power655_box_box_date.492223151a": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_date.e887270dc8": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.unique_staging_power655_box_box_id.3e89c32e6d": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_id.3dc86e3f2f": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.unique_staging_power655_box_box_name.6e48563e9d": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_name.bd7abb9e0a": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_numbers.18b8bc6699": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_1.7c5d9b5b31": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1.3acb4bd34c": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2.7b13eb09ac": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_2.b230c47cb1": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3.1c61a3fc5a": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_3.f0ee8d0c70": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4.e0d4af01ad": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_4.91a668f9dd": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5.cf71112598": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_5.5fa3608a1b": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6.4a237c76aa": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_6.eaa7e17e9c": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56.798e04cf35": [
            "model.dbt_resto.staging_power655_box"
        ],
        "test.dbt_resto.unique_staging_power655_box_detail_sk_box_detail.456e98d763": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_sk_box_detail.e3db6f3e36": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_box_id.b294d9fa28": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_name_raw.33b6e09a09": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_name.d7afedd3ef": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.8d59a2292d": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_won.545ec818dd": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0.8934b0ce2b": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_value_raw.ad9ac80702": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_value.ea55561f78": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0.8011cd1a8c": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.dbt_resto.dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name.140f6e3dc8": [
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "source.dbt_resto.power655_raw.power655_data": [],
        "exposure.dbt_resto.power655_forecast": [
            "model.dbt_resto.dim_box",
            "model.dbt_resto.dim_date",
            "model.dbt_resto.dim_prize",
            "model.dbt_resto.fact_number",
            "model.dbt_resto.fact_result",
            "source.dbt_resto.power655_raw.power655_data"
        ]
    },
    "child_map": {
        "model.integration_tests.verify_get_table_alias": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_table_alias_actual_expected.83b0634280"
        ],
        "model.integration_tests.verify_if_column_value_to_match_regex": [],
        "model.integration_tests.verify_materialized_view": [
            "test.integration_tests.if_materilized_view_created",
            "test.integration_tests.if_materilized_view_created",
            "test.integration_tests.if_materilized_view_created",
            "test.integration_tests.if_materilized_view_created",
            "test.integration_tests.if_materilized_view_created",
            "test.integration_tests.if_materilized_view_created"
        ],
        "model.integration_tests.verify_generate_schema_name": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected.5623649e25"
        ],
        "model.integration_tests.verify_datepart": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_datepart_actual_expected.579cb14d82"
        ],
        "model.integration_tests.verify_get_base_times_hour": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0.55995f0cf1",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0.2cf6632f3e",
            "test.integration_tests.if_get_base_times_correct_count",
            "test.integration_tests.not_null_verify_get_base_times_hour_time_value.4b9e0e07f6",
            "test.integration_tests.unique_verify_get_base_times_hour_time_value.2857e797c6"
        ],
        "model.integration_tests.verify_get_base_times_minute": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0.bbb807cc08",
            "test.integration_tests.if_get_base_times_correct_count",
            "test.integration_tests.not_null_verify_get_base_times_minute_time_value.fbcdd6c2ec",
            "test.integration_tests.unique_verify_get_base_times_minute_time_value.1b8f4aa3c2"
        ],
        "model.integration_tests.verify_get_base_times_second": [
            "test.integration_tests.not_null_verify_get_base_times_second_time_value.6666c54e2a",
            "test.integration_tests.unique_verify_get_base_times_second_time_value.8f7a0195be"
        ],
        "model.integration_tests.verify_get_time_dimension_hour": [
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0.769f49524e",
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0.053244f188",
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0.b0a16bbd1c",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6.7547b65170",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9.5f29f1cfa3",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number.962f83f7ca",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12.166dd28398",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number.7b16500f77",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_.39d1570ad0",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_.415264634c",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_.05bc60173f",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name.90307c68ce",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name.cc51bda591",
            "test.integration_tests.if_get_time_dimension_correct_count",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_name.ed2603071a",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_number.c98eeb55ce",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_name.2ece919e94",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_number.f6e460b28e",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_time24_string.24235bd903",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_time_key.6cb5645b91",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_time_string.6052fb441e",
            "test.integration_tests.not_null_verify_get_time_dimension_hour_time_value.40da5a66ce",
            "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_name.b9c97be807",
            "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_number.7a0f2b018b",
            "test.integration_tests.unique_verify_get_time_dimension_hour_hour_name.2fef2e525b",
            "test.integration_tests.unique_verify_get_time_dimension_hour_time24_string.aaba73be70",
            "test.integration_tests.unique_verify_get_time_dimension_hour_time_key.40ac6bcdc9",
            "test.integration_tests.unique_verify_get_time_dimension_hour_time_string.819ccd433f",
            "test.integration_tests.unique_verify_get_time_dimension_hour_time_value.6d51d85fdd"
        ],
        "model.integration_tests.verify_get_time_dimension_minute": [
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0.c9f2b49b08",
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0.940c8c15a7",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6.a9e9d32195",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9.a46539940d",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number.385ddd2bdf",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12.1ba9d98873",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number.888b8dfa28",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number.c0ba22106c",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number.12cbae0313",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_.e82de94636",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_.ae7a7fe520",
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_.9e4f0d9cfa",
            "test.integration_tests.if_get_time_dimension_correct_count",
            "test.integration_tests.not_null_verify_get_time_dimension_minute_hour24_minute_name.273e260049",
            "test.integration_tests.not_null_verify_get_time_dimension_minute_hour_minute_name.8821fe75c8",
            "test.integration_tests.not_null_verify_get_time_dimension_minute_minute_number.e020cf7358",
            "test.integration_tests.not_null_verify_get_time_dimension_minute_time_key.4c959b7405",
            "test.integration_tests.unique_verify_get_time_dimension_minute_hour24_minute_name.0e495cdf8f",
            "test.integration_tests.unique_verify_get_time_dimension_minute_hour_minute_name.11761c97cc",
            "test.integration_tests.unique_verify_get_time_dimension_minute_time_key.9b49938cf0"
        ],
        "model.integration_tests.verify_get_time_dimension_second": [
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0.ce810077c6",
            "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0.94566f4d0a",
            "test.integration_tests.not_null_verify_get_time_dimension_second_second_number.c30800f56b",
            "test.integration_tests.not_null_verify_get_time_dimension_second_time_key.3e38a35f21",
            "test.integration_tests.unique_verify_get_time_dimension_second_time_key.06079d47be"
        ],
        "model.integration_tests.verify_get_time_key": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_key_actual_expected.f10650ac08"
        ],
        "model.integration_tests.verify_str_to_date": [
            "test.integration_tests.dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_.196a62d483"
        ],
        "test.integration_tests.if_materilized_view_created": [],
        "test.integration_tests.if_get_base_times_correct_count": [],
        "test.integration_tests.if_get_time_dimension_correct_count": [],
        "model.dbt_resto.dim_box": [
            "exposure.dbt_resto.power655_forecast",
            "model.dbt_resto.fact_number_forecast",
            "model.dbt_resto.fact_number_scoring",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2.831c1ec966",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3.d15be44956",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4.87ac1d2e38",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5.b37ad70c7b",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6.ce0ae89185",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3.f39d62bfe0",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4.6340802cad",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5.5ddd4797a1",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6.55053d24e6",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4.7d5c748bf7",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5.fbecf9fa91",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6.3c13d3612a",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5.66ed75e168",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6.cfc0f21018",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6.22aa7e5d89",
            "test.dbt_resto.not_null_dim_box_box_date.aadb37452c",
            "test.dbt_resto.not_null_dim_box_box_id.7cf1c755c0",
            "test.dbt_resto.not_null_dim_box_box_key.b16bc11428",
            "test.dbt_resto.not_null_dim_box_box_result_number_1.62ad3f5049",
            "test.dbt_resto.not_null_dim_box_box_result_number_2.9d962bb07f",
            "test.dbt_resto.not_null_dim_box_box_result_number_3.0cc5d7108c",
            "test.dbt_resto.not_null_dim_box_box_result_number_4.b4a01fd9ed",
            "test.dbt_resto.not_null_dim_box_box_result_number_5.173e838274",
            "test.dbt_resto.not_null_dim_box_box_result_number_6.b31bf8c462",
            "test.dbt_resto.not_null_dim_box_box_result_numbers.6cd2b13759",
            "test.dbt_resto.relationships_fact_result_box_key__box_key__ref_dim_box_.5c858aab5c",
            "test.dbt_resto.unique_dim_box_box_id.bcbdf63964",
            "test.dbt_resto.unique_dim_box_box_key.882dfb24f6"
        ],
        "model.dbt_resto.dim_date": [
            "exposure.dbt_resto.power655_forecast",
            "test.dbt_resto.not_null_dim_date_box_date.63ab3e2f98",
            "test.dbt_resto.not_null_dim_date_box_day.f3cabd7806",
            "test.dbt_resto.not_null_dim_date_box_month.107d6bb62f",
            "test.dbt_resto.not_null_dim_date_box_month_name.070c5fdd5e",
            "test.dbt_resto.not_null_dim_date_box_week.c4fbb026af",
            "test.dbt_resto.not_null_dim_date_box_year.e2fc6c3a22",
            "test.dbt_resto.not_null_dim_date_date_key.881d0a31b6",
            "test.dbt_resto.relationships_fact_number_last_appearance__date_key__ref_dim_date_.c792e50556",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_.173746a33d",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_.02689b4e6a",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_.2ab023fcfc",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_.05d8a30d70",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_.d17efedb3f",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_.ba3c81a09a",
            "test.dbt_resto.relationships_fact_result_date_key__date_key__ref_dim_date_.d8736057f7",
            "test.dbt_resto.unique_dim_date_box_date.00ea449b36",
            "test.dbt_resto.unique_dim_date_date_key.0869fd48f9"
        ],
        "model.dbt_resto.dim_prize": [
            "exposure.dbt_resto.power655_forecast",
            "test.dbt_resto.accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.a9ef660412",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___1.05fc15ef2d",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___2.a272475871",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___3.6f39bdba6d",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___4.5d56b70d78",
            "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___5.81c9c5d1d7",
            "test.dbt_resto.not_null_dim_prize_prize_key.2f1a24a14a",
            "test.dbt_resto.not_null_dim_prize_prize_name.f334b496c0",
            "test.dbt_resto.not_null_dim_prize_prize_order.bc63d43f80",
            "test.dbt_resto.relationships_fact_result_prize_key__prize_key__ref_dim_prize_.785b3097aa",
            "test.dbt_resto.unique_dim_prize_prize_key.89c819e56f"
        ],
        "model.dbt_resto.fact_number": [
            "exposure.dbt_resto.power655_forecast",
            "model.dbt_resto.fact_number_scoring",
            "test.dbt_resto.accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55.6d015426a8",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence___0.d698f93b85",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.e977128d3c",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence.fffe5fcf38",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.7e540350fc",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence.a20273c523",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.eae16a31a7",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence.794270338d",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.7ae8134db4",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence.d9203fae6e",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.431ba40dca",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence.5ac56f6c49",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.faf1aadc8c",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence.b1f0d38fd5",
            "test.dbt_resto.not_null_fact_number_number_value.4e75652b39",
            "test.dbt_resto.not_null_fact_number_occurrence.33a1ae908b",
            "test.dbt_resto.relationships_fact_number_last_appearance__date_key__ref_dim_date_.c792e50556",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_.173746a33d",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_.02689b4e6a",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_.2ab023fcfc",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_.05d8a30d70",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_.d17efedb3f",
            "test.dbt_resto.relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_.ba3c81a09a",
            "test.dbt_resto.unique_fact_number_number_value.0b64375e98"
        ],
        "model.dbt_resto.fact_number_forecast": [
            "test.dbt_resto.not_null_fact_number_forecast_forecast_1.ded058c32e",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_2.7b02c6f0f4",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_3.14f65ff8ea",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_4.a64f5e1198",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_5.23b3cf8441",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_6.f44d77e561",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_date.b07673366c",
            "test.dbt_resto.not_null_fact_number_forecast_forecast_numbers.a45c6cfd86",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_date.82f507a41f",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_1.4df45fc79d",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_2.267bedde94",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_3.050bd49e30",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_4.05c88c48e3",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_5.635349d956",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_6.82a5a7c197",
            "test.dbt_resto.not_null_fact_number_forecast_last_box_result_numbers.bb234c695a",
            "test.dbt_resto.unique_fact_number_forecast_forecast_date.3b1034ba6c"
        ],
        "model.dbt_resto.fact_number_scoring": [
            "model.dbt_resto.fact_number_forecast",
            "test.dbt_resto.dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value.9c94cd6f52",
            "test.dbt_resto.not_null_fact_number_scoring_fact_key.e0ef6c1363",
            "test.dbt_resto.not_null_fact_number_scoring_forecast_date.b50f468a17",
            "test.dbt_resto.not_null_fact_number_scoring_number_value.0eeeee00c9",
            "test.dbt_resto.unique_fact_number_scoring_fact_key.61a385c67f"
        ],
        "model.dbt_resto.fact_result": [
            "exposure.dbt_resto.power655_forecast",
            "test.dbt_resto.accepted_values_fact_result_is_prize_taken__0__1.525fda6614",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_result_is_prize_taken___1.4e05c4d270",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_result_no_of_won___0.8228233c65",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won.7b3266a018",
            "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_value___0.fd41678c63",
            "test.dbt_resto.not_null_fact_result_box_key.cc5e732aa6",
            "test.dbt_resto.not_null_fact_result_date_key.4012645d7b",
            "test.dbt_resto.not_null_fact_result_fact_result_key.d0d417d65b",
            "test.dbt_resto.not_null_fact_result_is_prize_taken.3931d16464",
            "test.dbt_resto.not_null_fact_result_no_of_won.e243af0b8f",
            "test.dbt_resto.not_null_fact_result_prize_key.e4d5386aa4",
            "test.dbt_resto.not_null_fact_result_prize_paid.24dad4f916",
            "test.dbt_resto.not_null_fact_result_prize_value.47fbd23e11",
            "test.dbt_resto.relationships_fact_result_box_key__box_key__ref_dim_box_.5c858aab5c",
            "test.dbt_resto.relationships_fact_result_date_key__date_key__ref_dim_date_.d8736057f7",
            "test.dbt_resto.relationships_fact_result_prize_key__prize_key__ref_dim_prize_.785b3097aa",
            "test.dbt_resto.unique_fact_result_fact_result_key.8a94eb890a"
        ],
        "model.dbt_resto.fact_set_number": [
            "test.dbt_resto.dbt_utils_expression_is_true_fact_set_number_occurrence___0.9b854b58c0",
            "test.dbt_resto.not_null_fact_set_number_box_result_numbers.b3ed62ae31",
            "test.dbt_resto.not_null_fact_set_number_occurrence.404244b933",
            "test.dbt_resto.unique_fact_set_number_box_result_numbers.a4fb7c8414"
        ],
        "model.dbt_resto.staging_power655_box": [
            "model.dbt_resto.dim_box",
            "model.dbt_resto.dim_date",
            "model.dbt_resto.fact_number",
            "model.dbt_resto.fact_result",
            "model.dbt_resto.fact_set_number",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1.3acb4bd34c",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2.7b13eb09ac",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3.1c61a3fc5a",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4.e0d4af01ad",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5.cf71112598",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6.4a237c76aa",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56.798e04cf35",
            "test.dbt_resto.not_null_staging_power655_box_box_date.e887270dc8",
            "test.dbt_resto.not_null_staging_power655_box_box_id.3dc86e3f2f",
            "test.dbt_resto.not_null_staging_power655_box_box_name.bd7abb9e0a",
            "test.dbt_resto.not_null_staging_power655_box_box_result_number_1.7c5d9b5b31",
            "test.dbt_resto.not_null_staging_power655_box_box_result_number_2.b230c47cb1",
            "test.dbt_resto.not_null_staging_power655_box_box_result_number_3.f0ee8d0c70",
            "test.dbt_resto.not_null_staging_power655_box_box_result_number_4.91a668f9dd",
            "test.dbt_resto.not_null_staging_power655_box_box_result_number_5.5fa3608a1b",
            "test.dbt_resto.not_null_staging_power655_box_box_result_number_6.eaa7e17e9c",
            "test.dbt_resto.not_null_staging_power655_box_box_result_numbers.18b8bc6699",
            "test.dbt_resto.not_null_staging_power655_box_sk_box.320d0ede5f",
            "test.dbt_resto.unique_staging_power655_box_box_date.492223151a",
            "test.dbt_resto.unique_staging_power655_box_box_id.3e89c32e6d",
            "test.dbt_resto.unique_staging_power655_box_box_name.6e48563e9d",
            "test.dbt_resto.unique_staging_power655_box_sk_box.3cb514c8c1"
        ],
        "model.dbt_resto.staging_power655_box_detail": [
            "model.dbt_resto.dim_prize",
            "model.dbt_resto.fact_result",
            "test.dbt_resto.accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.8d59a2292d",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0.8011cd1a8c",
            "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0.8934b0ce2b",
            "test.dbt_resto.dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name.140f6e3dc8",
            "test.dbt_resto.not_null_staging_power655_box_detail_box_id.b294d9fa28",
            "test.dbt_resto.not_null_staging_power655_box_detail_prize_name.d7afedd3ef",
            "test.dbt_resto.not_null_staging_power655_box_detail_prize_name_raw.33b6e09a09",
            "test.dbt_resto.not_null_staging_power655_box_detail_prize_value.ea55561f78",
            "test.dbt_resto.not_null_staging_power655_box_detail_prize_value_raw.ad9ac80702",
            "test.dbt_resto.not_null_staging_power655_box_detail_prize_won.545ec818dd",
            "test.dbt_resto.not_null_staging_power655_box_detail_sk_box_detail.e3db6f3e36",
            "test.dbt_resto.unique_staging_power655_box_detail_sk_box_detail.456e98d763"
        ],
        "seed.dbt_resto.vietlot_power655_data": [
            "model.dbt_resto.staging_power655_box",
            "model.dbt_resto.staging_power655_box_detail"
        ],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_table_alias_actual_expected.83b0634280": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_generate_schema_name_actual_expected.5623649e25": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_datepart_actual_expected.579cb14d82": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_key_actual_expected.f10650ac08": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_str_to_date_coalesce_actual_1900_01_01_coalesce_expected_1900_01_01_.196a62d483": [],
        "test.integration_tests.unique_verify_get_base_times_hour_time_value.2857e797c6": [],
        "test.integration_tests.not_null_verify_get_base_times_hour_time_value.4b9e0e07f6": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_minute_0.55995f0cf1": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_hour__dbt_resto_datepart_time_value_second_0.2cf6632f3e": [],
        "test.integration_tests.unique_verify_get_base_times_minute_time_value.1b8f4aa3c2": [],
        "test.integration_tests.not_null_verify_get_base_times_minute_time_value.fbcdd6c2ec": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_base_times_minute__dbt_resto_datepart_time_value_second_0.bbb807cc08": [],
        "test.integration_tests.unique_verify_get_base_times_second_time_value.8f7a0195be": [],
        "test.integration_tests.not_null_verify_get_base_times_second_time_value.6666c54e2a": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_key.6cb5645b91": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_key.40ac6bcdc9": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_time_key__230000__0.b0a16bbd1c": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_value.40da5a66ce": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_value.6d51d85fdd": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time_string.6052fb441e": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time_string.819ccd433f": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_time24_string.24235bd903": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_time24_string.aaba73be70": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_number.f6e460b28e": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour_number__12__0.053244f188": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour_name.2ece919e94": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour_name.2fef2e525b": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_number.c98eeb55ce": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_number.7a0f2b018b": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_hour_hour24_number__23__0.769f49524e": [],
        "test.integration_tests.not_null_verify_get_time_dimension_hour_hour24_name.ed2603071a": [],
        "test.integration_tests.unique_verify_get_time_dimension_hour_hour24_name.b9c97be807": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour24_name_6.7547b65170": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour24_name_4_0000_.415264634c": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour24_name_2_as_dbt_resto_type_int_hour24_number.962f83f7ca": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour__dbt_resto_len_hour_name_9.5f29f1cfa3": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_left_right_hour_name_7_4_0000_.39d1570ad0": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_right_hour_name_2_in_AM_PM_.05bc60173f": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_hour_number.7b16500f77": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_cast_left_hour_name_2_as_dbt_resto_type_int_12.166dd28398": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time24_string_hour24_name.90307c68ce": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_hour_time_string_hour_name.cc51bda591": [],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_time_key.4c959b7405": [],
        "test.integration_tests.unique_verify_get_time_dimension_minute_time_key.9b49938cf0": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_time_key__235900__0.940c8c15a7": [],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_minute_number.e020cf7358": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_minute_minute_number__59__0.c9f2b49b08": [],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_hour_minute_name.8821fe75c8": [],
        "test.integration_tests.unique_verify_get_time_dimension_minute_hour_minute_name.11761c97cc": [],
        "test.integration_tests.not_null_verify_get_time_dimension_minute_hour24_minute_name.273e260049": [],
        "test.integration_tests.unique_verify_get_time_dimension_minute_hour24_minute_name.0e495cdf8f": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour24_minute_name_6.a9e9d32195": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour24_minute_name_2_00_.ae7a7fe520": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour24_minute_name_2_as_dbt_resto_type_int_hour24_number.385ddd2bdf": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour24_minute_name_4_2_as_dbt_resto_type_int_minute_number.c0ba22106c": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute__dbt_resto_len_hour_minute_name_9.a46539940d": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_left_right_hour_minute_name_5_2_00_.e82de94636": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_right_hour_minute_name_2_in_AM_PM_.9e4f0d9cfa": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_hour_number.888b8dfa28": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_left_hour_minute_name_2_as_dbt_resto_type_int_12.1ba9d98873": [],
        "test.integration_tests.dbt_utils_expression_is_true_verify_get_time_dimension_minute_cast_right_left_hour_minute_name_4_2_as_dbt_resto_type_int_minute_number.12cbae0313": [],
        "test.integration_tests.not_null_verify_get_time_dimension_second_time_key.3e38a35f21": [],
        "test.integration_tests.unique_verify_get_time_dimension_second_time_key.06079d47be": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_time_key__235959__0.94566f4d0a": [],
        "test.integration_tests.not_null_verify_get_time_dimension_second_second_number.c30800f56b": [],
        "test.integration_tests.dbt_utils_accepted_range_verify_get_time_dimension_second_second_number__59__0.ce810077c6": [],
        "test.dbt_resto.not_null_dim_box_box_key.b16bc11428": [],
        "test.dbt_resto.unique_dim_box_box_key.882dfb24f6": [],
        "test.dbt_resto.not_null_dim_box_box_id.7cf1c755c0": [],
        "test.dbt_resto.unique_dim_box_box_id.bcbdf63964": [],
        "test.dbt_resto.not_null_dim_box_box_date.aadb37452c": [],
        "test.dbt_resto.not_null_dim_box_box_result_numbers.6cd2b13759": [],
        "test.dbt_resto.not_null_dim_box_box_result_number_1.62ad3f5049": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_2.831c1ec966": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_3.d15be44956": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_4.87ac1d2e38": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_5.b37ad70c7b": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_1___box_result_number_6.ce0ae89185": [],
        "test.dbt_resto.not_null_dim_box_box_result_number_2.9d962bb07f": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_3.f39d62bfe0": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_4.6340802cad": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_5.5ddd4797a1": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_2___box_result_number_6.55053d24e6": [],
        "test.dbt_resto.not_null_dim_box_box_result_number_3.0cc5d7108c": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_4.7d5c748bf7": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_5.fbecf9fa91": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_3___box_result_number_6.3c13d3612a": [],
        "test.dbt_resto.not_null_dim_box_box_result_number_4.b4a01fd9ed": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_5.66ed75e168": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_4___box_result_number_6.cfc0f21018": [],
        "test.dbt_resto.not_null_dim_box_box_result_number_5.173e838274": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_box_box_result_number_5___box_result_number_6.22aa7e5d89": [],
        "test.dbt_resto.not_null_dim_box_box_result_number_6.b31bf8c462": [],
        "test.dbt_resto.not_null_dim_date_date_key.881d0a31b6": [],
        "test.dbt_resto.unique_dim_date_date_key.0869fd48f9": [],
        "test.dbt_resto.not_null_dim_date_box_date.63ab3e2f98": [],
        "test.dbt_resto.unique_dim_date_box_date.00ea449b36": [],
        "test.dbt_resto.not_null_dim_date_box_day.f3cabd7806": [],
        "test.dbt_resto.not_null_dim_date_box_week.c4fbb026af": [],
        "test.dbt_resto.not_null_dim_date_box_month.107d6bb62f": [],
        "test.dbt_resto.not_null_dim_date_box_month_name.070c5fdd5e": [],
        "test.dbt_resto.not_null_dim_date_box_year.e2fc6c3a22": [],
        "test.dbt_resto.not_null_dim_prize_prize_key.2f1a24a14a": [],
        "test.dbt_resto.unique_dim_prize_prize_key.89c819e56f": [],
        "test.dbt_resto.not_null_dim_prize_prize_name.f334b496c0": [],
        "test.dbt_resto.accepted_values_dim_prize_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.a9ef660412": [],
        "test.dbt_resto.not_null_dim_prize_prize_order.bc63d43f80": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___1.05fc15ef2d": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___2.a272475871": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___3.6f39bdba6d": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___4.5d56b70d78": [],
        "test.dbt_resto.dbt_utils_expression_is_true_dim_prize_prize_order___5.81c9c5d1d7": [],
        "test.dbt_resto.not_null_fact_number_number_value.4e75652b39": [],
        "test.dbt_resto.unique_fact_number_number_value.0b64375e98": [],
        "test.dbt_resto.accepted_values_fact_number_number_value__1__2__3__4__5__6__7__8__9__10__11__12__13__14__15__16__17__18__19__20__21__22__23__24__25__26__27__28__29__30__31__32__33__34__35__36__37__38__39__40__41__42__43__44__45__46__47__48__49__50__51__52__53__54__55.6d015426a8": [],
        "test.dbt_resto.not_null_fact_number_occurrence.33a1ae908b": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence___0.d698f93b85": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___0.e977128d3c": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_1___occurrence.fffe5fcf38": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___0.7e540350fc": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_2___occurrence.a20273c523": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___0.eae16a31a7": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_3___occurrence.794270338d": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___0.7ae8134db4": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_4___occurrence.d9203fae6e": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___0.431ba40dca": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_5___occurrence.5ac56f6c49": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___0.faf1aadc8c": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_number_occurrence_pos_6___occurrence.b1f0d38fd5": [],
        "test.dbt_resto.relationships_fact_number_last_appearance__date_key__ref_dim_date_.c792e50556": [],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_1__date_key__ref_dim_date_.173746a33d": [],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_2__date_key__ref_dim_date_.02689b4e6a": [],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_3__date_key__ref_dim_date_.2ab023fcfc": [],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_4__date_key__ref_dim_date_.05d8a30d70": [],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_5__date_key__ref_dim_date_.d17efedb3f": [],
        "test.dbt_resto.relationships_fact_number_last_appearance_pos_6__date_key__ref_dim_date_.ba3c81a09a": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_date.b07673366c": [],
        "test.dbt_resto.unique_fact_number_forecast_forecast_date.3b1034ba6c": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_date.82f507a41f": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_numbers.a45c6cfd86": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_numbers.bb234c695a": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_1.ded058c32e": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_1.4df45fc79d": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_2.7b02c6f0f4": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_2.267bedde94": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_3.14f65ff8ea": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_3.050bd49e30": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_4.a64f5e1198": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_4.05c88c48e3": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_5.23b3cf8441": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_5.635349d956": [],
        "test.dbt_resto.not_null_fact_number_forecast_forecast_6.f44d77e561": [],
        "test.dbt_resto.not_null_fact_number_forecast_last_box_result_number_6.82a5a7c197": [],
        "test.dbt_resto.not_null_fact_number_scoring_fact_key.e0ef6c1363": [],
        "test.dbt_resto.unique_fact_number_scoring_fact_key.61a385c67f": [],
        "test.dbt_resto.not_null_fact_number_scoring_forecast_date.b50f468a17": [],
        "test.dbt_resto.not_null_fact_number_scoring_number_value.0eeeee00c9": [],
        "test.dbt_resto.dbt_utils_unique_combination_of_columns_fact_number_scoring_forecast_date__number_value.9c94cd6f52": [],
        "test.dbt_resto.not_null_fact_result_fact_result_key.d0d417d65b": [],
        "test.dbt_resto.unique_fact_result_fact_result_key.8a94eb890a": [],
        "test.dbt_resto.not_null_fact_result_box_key.cc5e732aa6": [],
        "test.dbt_resto.relationships_fact_result_box_key__box_key__ref_dim_box_.5c858aab5c": [],
        "test.dbt_resto.not_null_fact_result_prize_key.e4d5386aa4": [],
        "test.dbt_resto.relationships_fact_result_prize_key__prize_key__ref_dim_prize_.785b3097aa": [],
        "test.dbt_resto.not_null_fact_result_date_key.4012645d7b": [],
        "test.dbt_resto.relationships_fact_result_date_key__date_key__ref_dim_date_.d8736057f7": [],
        "test.dbt_resto.not_null_fact_result_no_of_won.e243af0b8f": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_no_of_won___0.8228233c65": [],
        "test.dbt_resto.not_null_fact_result_prize_value.47fbd23e11": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_value___0.fd41678c63": [],
        "test.dbt_resto.not_null_fact_result_prize_paid.24dad4f916": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_prize_paid___prize_value_no_of_won.7b3266a018": [],
        "test.dbt_resto.not_null_fact_result_is_prize_taken.3931d16464": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_result_is_prize_taken___1.4e05c4d270": [],
        "test.dbt_resto.accepted_values_fact_result_is_prize_taken__0__1.525fda6614": [],
        "test.dbt_resto.not_null_fact_set_number_box_result_numbers.b3ed62ae31": [],
        "test.dbt_resto.unique_fact_set_number_box_result_numbers.a4fb7c8414": [],
        "test.dbt_resto.not_null_fact_set_number_occurrence.404244b933": [],
        "test.dbt_resto.dbt_utils_expression_is_true_fact_set_number_occurrence___0.9b854b58c0": [],
        "test.dbt_resto.unique_staging_power655_box_sk_box.3cb514c8c1": [],
        "test.dbt_resto.not_null_staging_power655_box_sk_box.320d0ede5f": [],
        "test.dbt_resto.unique_staging_power655_box_box_date.492223151a": [],
        "test.dbt_resto.not_null_staging_power655_box_box_date.e887270dc8": [],
        "test.dbt_resto.unique_staging_power655_box_box_id.3e89c32e6d": [],
        "test.dbt_resto.not_null_staging_power655_box_box_id.3dc86e3f2f": [],
        "test.dbt_resto.unique_staging_power655_box_box_name.6e48563e9d": [],
        "test.dbt_resto.not_null_staging_power655_box_box_name.bd7abb9e0a": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_numbers.18b8bc6699": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_1.7c5d9b5b31": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___1.3acb4bd34c": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_1___box_result_number_2.7b13eb09ac": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_2.b230c47cb1": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_2___box_result_number_3.1c61a3fc5a": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_3.f0ee8d0c70": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_3___box_result_number_4.e0d4af01ad": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_4.91a668f9dd": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_4___box_result_number_5.cf71112598": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_5.5fa3608a1b": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_5___box_result_number_6.4a237c76aa": [],
        "test.dbt_resto.not_null_staging_power655_box_box_result_number_6.eaa7e17e9c": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_box_result_number_6___56.798e04cf35": [],
        "test.dbt_resto.unique_staging_power655_box_detail_sk_box_detail.456e98d763": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_sk_box_detail.e3db6f3e36": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_box_id.b294d9fa28": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_name_raw.33b6e09a09": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_name.d7afedd3ef": [],
        "test.dbt_resto.accepted_values_staging_power655_box_detail_prize_name__Jackpot_1__Jackpot_2__1st_Prize__2nd_Prize__3rd_Prize.8d59a2292d": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_won.545ec818dd": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_won___0.8934b0ce2b": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_value_raw.ad9ac80702": [],
        "test.dbt_resto.not_null_staging_power655_box_detail_prize_value.ea55561f78": [],
        "test.dbt_resto.dbt_utils_expression_is_true_staging_power655_box_detail_prize_value___0.8011cd1a8c": [],
        "test.dbt_resto.dbt_utils_unique_combination_of_columns_staging_power655_box_detail_box_id__prize_name.140f6e3dc8": [],
        "source.dbt_resto.power655_raw.power655_data": [
            "exposure.dbt_resto.power655_forecast"
        ],
        "exposure.dbt_resto.power655_forecast": []
    }
}
