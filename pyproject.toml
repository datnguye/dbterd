[project]
name = "dbterd"
dynamic = ["version"]
description = "Generate the ERD-as-a-code from dbt artifacts"
authors = [
    {name = "Dat Nguyen", email = "datnguye.it09@gmail.com"}
]
maintainers = [
    {name = "Dat Nguyen", email = "datnguye.it09@gmail.com"}
]
license = {file = "LICENSE"}
readme = "README.md"
urls = {Homepage = "https://github.com/datnguye/dbterd", Repository = "https://github.com/datnguye/dbterd", Documentation = "https://dbterd.datnguyen.de/", Issues = "https://github.com/datnguye/dbterd/issues"}
keywords = [
    "dbt",
    "erd",
    "entity-relationship-diagram",
    "dbml",
    "mermaid",
    "plantuml",
    "graphviz",
    "d2",
    "drawdb",
    "data-modeling",
    "data-documentation",
    "dbt-cloud"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: dbt ERD",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.1.7",      # CLI interface framework
    "dbt-artifacts-parser>=0.7.0",  # Parse dbt artifacts (manifest.json and catalog.json)
    "requests>=2.32.3",  # HTTP requests for dbt Cloud API integration
]

[project.scripts]
dbterd = "dbterd.main:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
version = {source = "scm"}

[tool.pdm.build]
includes = ["dbterd"]
excludes = ["tests", "tests/**/*"]

[project.optional-dependencies]
# Development dependencies
dev = [
  # dbt core and adapters for testing
  "dbt-core >=1.7.11",
  "dbt-postgres >=1.7.11",

  # Testing
  "pytest >=6.2.5",
  "pytest-sugar >=0.9.6",  # Better test output formatting
  "coverage[toml] >=6.5.0",  # Test coverage reporting

  # Code quality and formatting
  "black >=24.3.0",
  "ruff >=0.2.0",
  "pre-commit >=2.20.0",

  # Task runner
  "poethepoet >=0.16.4",

  # Documentation
  "mkdocs >=1.4.2",
  "mkdocs-minify-plugin >=0.6.4",
  "mkdocs-material >=9.1.5",
  "mike >=1.1.2",  # Versioned docs
  "pdoc >=14.4.0",  # API documentation generator

  # Build system
  "pdm-backend"
]

# Testing dependencies subset
test = [
  "pytest >=6.2.5",
  "pytest-sugar >=0.9.6",
  "coverage[toml] >=6.5.0",
]

# Documentation dependencies subset
docs = [
  "mkdocs >=1.4.2",
  "mkdocs-minify-plugin >=0.6.4",
  "mkdocs-material >=9.1.5",
  "mike >=1.1.2",
]

[tool.poe.tasks]
# =========================================================================================
# Development workflow tasks
# =========================================================================================

# Pre-commit hooks setup
git-hooks = {shell = "pre-commit install --install-hooks && pre-commit install --hook-type commit-msg", help = "Install git pre-commit hooks"}

# Code formatting
format = [
  {cmd = "ruff check --fix .", help = "Fix linting issues automatically"},
  {cmd = "ruff format .", help = "Format code with ruff"},
]

# Linting
lint = [
  {cmd = "ruff check .", help = "Check code with ruff linter"},
  {cmd = "ruff format --check .", help = "Check code formatting with ruff"},
]

# Testing
test = [
  {cmd = "pytest . -vv", help = "Run tests with verbose output"},
]

# Test with coverage
test-cov = [
  {cmd = "pytest --version", help = "Show pytest version"},
  {cmd = "coverage run -m pytest .", help = "Run tests with coverage"},
  {cmd = "coverage report --show-missing", help = "Show coverage report"},
  {cmd = "coverage xml", help = "Generate coverage XML report"},
]

# Sync deps
sync = {shell = "uv sync --all-extras && uv pip install -e ."}

# Documentation build and serve
build-doc-and-serve = [
  {cmd = "mkdocs build"},
  {cmd = "mkdocs serve"}
]

# Sample generation for all formats
run-10-samples = [
  # Create target directories for each sample
  {cmd = "mkdir -p target/jaffle-shop target/dbtresto target/dbt-constraints target/facebookad target/fivetranlog target/shopify", help = "Create target directories"},
  # 1. Generate DBML for jaffle-shop sample
  {cmd = "uv run dbterd run --artifacts-dir ./samples/jaffle-shop --target dbml --output ./target/jaffle-shop", help = "Generate jaffle-shop DBML"},
  # 2. Generate Mermaid for jaffle-shop with test_relationship algorithm
  {cmd = "uv run dbterd run --artifacts-dir ./samples/jaffle-shop --target mermaid --algo test_relationship --output ./target/jaffle-shop", help = "Generate jaffle-shop Mermaid with test_relationship"},
  # 3. Generate D2 for dbtresto with semantic algorithm
  {cmd = "uv run dbterd run --artifacts-dir ./samples/dbtresto --target d2 --algo semantic --output ./target/dbtresto", help = "Generate dbtresto D2 with semantic algorithm"},
  # 4. Generate GraphViz for dbtresto sample with entity name format
  {cmd = "uv run dbterd run --artifacts-dir ./samples/dbtresto --target graphviz --entity-name-format schema.table --output ./target/dbtresto", help = "Generate dbtresto GraphViz with schema.table format"},
  # 5. Generate PlantUML for dbt-constraints sample
  {cmd = "uv run dbterd run --artifacts-dir ./samples/dbt-constraints --target plantuml --output ./target/dbt-constraints", help = "Generate dbt-constraints PlantUML"},
  # 6. Generate DrawDB for facebookad sample
  {cmd = "uv run dbterd run --artifacts-dir ./samples/facebookad --target drawdb --output ./target/facebookad", help = "Generate facebookad DrawDB"},
  # 7. Generate Mermaid without columns for fivetranlog sample
  {cmd = "uv run dbterd run --artifacts-dir ./samples/fivetranlog --target mermaid --omit-columns --output ./target/fivetranlog", help = "Generate fivetranlog Mermaid without columns"},
  # 8. Generate DBML for shopify
  {cmd = "uv run dbterd run --artifacts-dir ./samples/shopify --target dbml --output ./target/shopify", help = "Generate shopify DBML with selection filter"},
  # 9. Generate Mermaid for jaffle-shop with custom output file name
  {cmd = "uv run dbterd run --artifacts-dir ./samples/jaffle-shop --target mermaid --output ./target/jaffle-shop --output-file-name jaffle-comprehensive.md", help = "Generate jaffle-shop Mermaid with custom filename"},
  # 10. Generate D2 for dbtresto with resource type filter
  {cmd = "uv run dbterd run --artifacts-dir ./samples/dbtresto --target d2 --resource-type model --output ./target/dbtresto --output-file-name models-only.d2", help = "Generate dbtresto D2 with models only"}
]

[tool.coverage.run]
# Files to exclude from coverage reporting
omit = [
    "tests/*",
    "*/__init__.py",
    "*/__main__.py",
]
source = ["dbterd"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Standard pragma
    "pragma: no cover",
    # Don't complain about abstract methods
    "@abstractmethod",
    # Don't complain about TYPE_CHECKING imports
    "if TYPE_CHECKING:",
    # Don't complain if tests don't hit defensive assertion code
    "raise NotImplementedError",
]

[tool.ruff]
# Python target version
target-version = "py39"
# Line length to match black
line-length = 120
# Include all Python files
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
# Exclude git dir, cache dirs, and virtual envs
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Selected linting rules - see https://docs.astral.sh/ruff/rules/
select = [
  "E",    # pycodestyle errors
  "F",    # pyflakes
  "I",    # isort
  "UP",   # pyupgrade
  "N",    # pep8-naming
  "YTT",  # flake8-2020
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "ISC",  # flake8-implicit-str-concat
  "RUF",  # ruff-specific rules
  "W",    # pycodestyle warnings
  #"D",    # pydocstyle
  "PL",   # pylint
  "SIM",  # flake8-simplify
  "ERA",  # eradicate commented-out code detection
]
# Rules to ignore
ignore = [
  "PLR2004",  # Magic value used in comparison
  "PLR0913",  # Too many arguments to function call
]
# Rules that will not be automatically fixed
unfixable = [
  "B",     # flake8-bugbear rules (often involve too much code change)
]

[tool.ruff.lint.isort]
force-single-line = false  # Don't force imports to be on separate lines
lines-after-imports = 2    # Number of lines after import block
force-sort-within-sections = true  # Sort imports within sections
known-first-party = ["dbterd"]  # Treat package as first-party imports
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]  # Import ordering
combine-as-imports = true  # Group "from X import a, b, c" statements

[tool.ruff.format] # Code formatting options
quote-style = "double"  # Use double quotes for strings
indent-style = "space"  # Use spaces for indentation (not tabs)
line-ending = "auto"    # Automatically determine line endings
skip-magic-trailing-comma = false  # Don't skip magic trailing commas
docstring-code-format = true  # Format code blocks in docstrings
docstring-code-line-length = 80  # Line length for code in docstrings

[tool.pytest.ini_options] # Pytest configuration
testpaths = ["tests"]  # Directory to find tests
python_files = "test_*.py"  # Pattern to recognize test files
python_classes = "Test*"  # Pattern to recognize test classes
python_functions = "test_*"  # Pattern to recognize test functions
addopts = "--strict-markers -v"  # Additional options (verbose output)
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks integration tests (deselect with '-m \"not integration\"')"
]
