{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"dbterd <p>Generate ERD-as-a-code from your dbt projects</p> <p>Transform your dbt artifact files or metadata into stunning Entity Relationship Diagrams using multiple formats: DBML, Mermaid, PlantUML, GraphViz, D2, and DrawDB</p> <p> </p> <p></p>"},{"location":"index.html#entity-relationship-detection","title":"\ud83c\udfaf Entity Relationship Detection","text":"<p>dbterd intelligently detects entity relationships through:</p> <ul> <li>\ud83e\uddea Test Relationships (default method)</li> <li>\ud83c\udfdb\ufe0f Semantic Entities (use <code>-a</code> option)</li> </ul> <p>For detailed configuration options, see our CLI References.</p>"},{"location":"index.html#supported-output-formats","title":"\ud83c\udfa8 Supported Output Formats","text":"Format Description Use Case DBML Database Markup Language Interactive web diagrams Mermaid Markdown-friendly diagrams Documentation, GitHub PlantUML Text-based UML Technical documentation GraphViz DOT graph description Complex relationship visualization D2 Modern diagram scripting Beautiful, customizable diagrams DrawDB Web-based database designer Interactive database design"},{"location":"index.html#installation","title":"\ud83d\ude80 Installation","text":"pip install dbterd --upgrade Successfully installed dbterd restart \u21bb <p>Verify Installation:</p> <pre><code>dbterd --version\n</code></pre> <p>For <code>dbt-core</code> users</p> <p>It's highly recommended to keep <code>dbt-artifacts-parser</code> updated to the latest version to support newer <code>dbt-core</code> versions and their manifest/catalog json schemas:</p> <pre><code>pip install dbt-artifacts-parser --upgrade\n</code></pre> <p>Note: <code>dbterd</code> now automatically bypasses Pydantic validation errors by default, which helps with compatibility when using newer dbt artifact schemas.</p>"},{"location":"index.html#configuration-files","title":"\u2699\ufe0f Configuration Files","text":"<p>Tired of typing the same CLI arguments repeatedly? <code>dbterd</code> supports configuration files to streamline your workflow!</p> <pre><code># Initialize a configuration file\ndbterd init\n\n# Now just run with your saved settings\ndbterd run\n</code></pre> <p>Supported formats:</p> <ul> <li><code>.dbterd.yml</code> - YAML configuration (recommended)</li> <li><code>pyproject.toml</code> - Add <code>[tool.dbterd]</code> section to your existing Python project config</li> </ul> <p>Learn more in the Configuration Files Guide.</p>"},{"location":"index.html#examples","title":"\ud83d\udca1 Examples","text":""},{"location":"index.html#cli-examples","title":"CLI Examples","text":"\ud83d\uddb1\ufe0f Click to explore CLI examples <pre><code># \ud83d\udcca Select all models in dbt_resto\ndbterd run -ad samples/dbtresto\n\n# \ud83c\udfaf Select multiple dbt resources (models + sources)\ndbterd run -ad samples/dbtresto -rt model -rt source\n\n# \ud83d\udd0d Select models excluding staging\ndbterd run -ad samples/dbtresto -s model.dbt_resto -ns model.dbt_resto.staging\n\n# \ud83d\udccb Select by schema name\ndbterd run -ad samples/dbtresto -s schema:mart -ns model.dbt_resto.staging\n\n# \ud83c\udff7\ufe0f Select by full schema name\ndbterd run -ad samples/dbtresto -s schema:dbt.mart -ns model.dbt_resto.staging\n\n# \ud83c\udf1f Other sample projects\ndbterd run -ad samples/fivetranlog -rt model -rt source\ndbterd run -ad samples/facebookad -rt model -rt source\ndbterd run -ad samples/shopify -s wildcard:*shopify.shopify__*\n\n# \ud83d\udd17 Custom relationship detection\ndbterd run -ad samples/dbt-constraints -a \"test_relationship:(name:foreign_key|c_from:fk_column_name|c_to:pk_column_name)\"\n\n# \ud83d\udcbb Your local project\ndbterd run -ad samples/local -rt model -rt source\n</code></pre>"},{"location":"index.html#python-api-examples","title":"Python API Examples","text":"<ul> <li>Generate a Complete ERD:</li> </ul> <pre><code>from dbterd.api import DbtErd\n\n# Generate DBML format\nerd = DbtErd().get_erd()\nprint(\"ERD (DBML):\", erd)\n\n# Generate Mermaid format\nerd = DbtErd(target=\"mermaid\").get_erd()\nprint(\"ERD (Mermaid):\", erd)\n</code></pre> <ul> <li>Generate a Single Model ERD:</li> </ul> <pre><code>from dbterd.api import DbtErd\n\n# Get ERD for specific model\ndim_prize_erd = DbtErd(target=\"mermaid\").get_model_erd(\n    node_unique_id=\"model.dbt_resto.dim_prize\"\n)\nprint(\"ERD of dim_prize (Mermaid):\", dim_prize_erd)\n</code></pre> <p>Sample Output:</p> <pre><code>erDiagram\n  \"MODEL.DBT_RESTO.DIM_PRIZE\" {\n    varchar prize_key\n    nvarchar prize_name\n    int prize_order\n  }\n  \"MODEL.DBT_RESTO.FACT_RESULT\" {\n    varchar fact_result_key\n    varchar box_key\n    varchar prize_key\n    date date_key\n    int no_of_won\n    float prize_value\n    float prize_paid\n    int is_prize_taken\n  }\n  \"MODEL.DBT_RESTO.FACT_RESULT\" }|--|| \"MODEL.DBT_RESTO.DIM_PRIZE\": prize_key</code></pre> <p>\ud83c\udfaf Try the Quick Demo with DBML format!</p>"},{"location":"index.html#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! \ud83c\udf89</p> <p>Ways to contribute: \ud83d\udc1b Report bugs | \ud83d\udca1 Suggest features | \ud83d\udcdd Improve documentation | \ud83d\udd27 Submit pull requests</p> <p>See our Contributing Guide for detailed information.</p> <p>Show your support: - \u2b50 Star this repository - \ud83d\udce2 Share on social media - \u270d\ufe0f Write a blog post - \u2615 Buy me a coffee</p> <p></p>"},{"location":"index.html#contributors","title":"\ud83d\udc65 Contributors","text":"<p>A huge thanks to our amazing contributors! \ud83d\ude4f</p> <p> </p>   **Made with \u2764\ufe0f by the dbterd community**"},{"location":"license.html","title":"License \ud83d\udd11","text":"<p>MIT License</p> <p>Copyright \u00a9 2022 Dat Nguyen</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"nav/development/contributing-guide.html","title":"Contributing to <code>dbterd</code>","text":"<p><code>dbterd</code> is open source software. It is what it is today because community members have opened issues, provided feedback, and contributed to the knowledge loop. Whether you are a seasoned open source contributor or a first-time committer, we welcome and encourage you to contribute code, documentation, ideas, or problem statements to this project.</p> <ul> <li>Contributing to <code>dbterd</code></li> <li>About this document</li> <li>Getting the code<ul> <li>Installing git</li> <li>External contributors</li> </ul> </li> <li>Setting up an environment<ul> <li>Tools</li> </ul> </li> <li>Testing</li> <li>Submitting a Pull Request</li> </ul>"},{"location":"nav/development/contributing-guide.html#about-this-document","title":"About this document","text":"<p>There are many ways to contribute to the ongoing development of <code>dbterd</code>, such as by participating in discussions and issues.</p> <p>The rest of this document serves as a more granular guide for contributing code changes to <code>dbterd</code> (this repository). It is not intended as a guide for using <code>dbterd</code>, and some pieces assume a level of familiarity with Python development with <code>uv</code>. Specific code snippets in this guide assume you are using macOS or Linux and are comfortable with the command line.</p> <ul> <li>Branches: All pull requests from community contributors should target the <code>main</code> branch (default). If the change is needed as a patch for a minor version of dbt that has already been released (or is already a release candidate), a maintainer will backport the changes in your PR to the relevant \"latest\" release branch (<code>1.0.&lt;latest&gt;</code>, <code>1.1.&lt;latest&gt;</code>, ...). If an issue fix applies to a release branch, that fix should be first committed to the development branch and then to the release branch (rarely release-branch fixes may not apply to <code>main</code>).</li> <li>Releases: Before releasing a new minor version, we prepare a series of beta release candidates to allow users to test the new version in live environments. This is an important quality assurance step, as it exposes the new code to a wide variety of complicated deployments and can surface bugs before official release. Releases are accessible via pip.</li> </ul>"},{"location":"nav/development/contributing-guide.html#getting-the-code","title":"Getting the code","text":""},{"location":"nav/development/contributing-guide.html#installing-git","title":"Installing git","text":"<p>You will need <code>git</code> in order to download and modify the <code>dbterd</code> source code. On macOS, the best way to download git is to just install Xcode.</p>"},{"location":"nav/development/contributing-guide.html#external-contributors","title":"External contributors","text":"<p>You can contribute to <code>dbterd</code> by forking the <code>dbterd</code> repository. For a detailed overview on forking, check out the GitHub docs on forking. In short, you will need to:</p> <ol> <li>Fork the <code>dbterd</code> repository</li> <li>Clone your fork locally</li> <li>Check out a new branch for your proposed changes</li> <li>Push changes to your fork</li> <li>Open a pull request against <code>datnguye/dbterd</code> from your forked repository</li> </ol>"},{"location":"nav/development/contributing-guide.html#setting-up-an-environment","title":"Setting up an environment","text":"<p>There are some tools that will be helpful to you in developing locally. While this is the list relevant for <code>dbterd</code> development, many of these tools are used commonly across open-source python projects.</p>"},{"location":"nav/development/contributing-guide.html#tools","title":"Tools","text":"<p>We use <code>uv</code> with <code>poethepoet</code> for <code>dbterd</code> development and testing.</p> <p>First, install uv using the official installation method:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Then, set up your development environment:</p> <pre><code># Create virtual environment and activate it\nuv venv\nuv sync --all-extras\nuv pip install -e .\nsource .venv/bin/activate  # Or activate using your shell's appropriate command\n\n# Install pre-commit hooks\npoe git-hooks\n\n# Verify installation\ndbterd -h\n</code></pre>"},{"location":"nav/development/contributing-guide.html#testing","title":"Testing","text":"<p>Once you're able to manually test that your code change is working as expected, it's important to run existing automated tests, as well as adding some new ones. These tests will ensure that:</p> <ul> <li>Your code changes do not unexpectedly break other established functionality</li> <li>Your code changes can handle all known edge cases</li> <li>The functionality you're adding will keep working in the future</li> </ul> <p>Use <code>pytest</code> with <code>poe</code></p> <p>You can run tests using the <code>poe</code> commands that are configured in the project:</p> <pre><code># Run all tests\npoe test\n\n# Run tests with coverage report\npoe test-cov\n\n# Format and lint code\npoe format\npoe lint\n</code></pre> <p>See pytest usage docs for an overview of useful command-line options.</p>"},{"location":"nav/development/contributing-guide.html#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>Code can be merged into the current development branch <code>main</code> by opening a pull request. A <code>dbterd</code> maintainer will review your PR. They may suggest code revision for style or clarity, or request that you add unit or integration test(s). These are good things! We believe that, with a little bit of help, anyone can contribute high-quality code.</p> <p>Automated tests run via GitHub Actions. If you're a first-time contributor, all tests (including code checks and unit tests) will require a maintainer to approve. Changes in the <code>dbterd</code> repository trigger unit tests against multiple Python versions with the latest <code>dbterd</code> code changes.</p> <p>Once all tests are passing and your PR has been approved, a <code>dbterd</code> maintainer will merge your changes into the active development branch. And that's it! Happy developing </p>"},{"location":"nav/guide/choose-algo.html","title":"Choosing the algorithm (parsers) to parse the Entity Relationships (ERs)","text":"<p>There are 2 approaches (or 2 modules) we can use here to let <code>dbterd</code> look at how the ERs can be recognized between the dbt models:</p> <ol> <li>Test Relationship (docs, source) (default)</li> <li>Semantic Entities (docs, source)</li> </ol>"},{"location":"nav/guide/choose-algo.html#test-relationship","title":"Test Relationship","text":"<p>During the dbt development, the engineers are supposed to add the consistency checking using <code>relationships</code> test function, or similarly specifying the dbt contraints (they're also the tests behind the scenes), given the below example project with Jaffle Shop.</p> <p>Let's install the repo:</p> <pre><code>git clone https://github.com/dbt-labs/jaffle-shop\ncd jaffle-shop\n</code></pre> <p>Setup the environment, and install the deps including <code>dbterd</code>:</p> <pre><code>python3 -m venv .env\nsource .env/bin/activate\npip install -r requirements.txt\npip install dbterd --upgrade\n</code></pre> <p>In the <code>order_items.sql</code> model, we can see 1 sample test:</p> <pre><code>models:\n  - name: order_items\n    columns:\n      - name: order_item_id\n        data_tests:\n          - not_null\n          - unique\n      - name: order_id\n        data_tests:\n          - relationships: # dbterd looks for all kind of this test\n              to: ref('orders')\n              field: order_id\n</code></pre> <p>Running <code>dbterd run -enf table</code> will expose the DBML code as below:</p> <pre><code>Table \"orders\" {\n...\n}\nTable \"order_items\" {\n...\n}\n...\nRef: \"order_items\".\"order_id\" &gt; \"orders\".\"order_id\"\n...\n</code></pre> <p>Awesome, job done here \ud83c\udf89</p> <p>NO, not yet (maybe!), sometimes this module is not going to work perfectly due to:</p> <ul> <li>Some relationship tests are added from <code>mart</code> to <code>staging</code> just for ensuring no missing data when moving from a layer to another.<ul> <li>That's why we have the ignore_in_erd metadata config.</li> </ul> </li> <li>We have the tests done in separate tools already (e.g. Soda), there is no reason to duplicate the (relationship) tests here.<ul> <li>No problem! Let's still add it with <code>where: 1=0</code> or with the dummy relationship tests (see this blogpost)</li> </ul> </li> </ul> <p>In case we don't want to leverage the dbt tests still, let's move on to the next section for the alternative \ud83c\udfc3</p>"},{"location":"nav/guide/choose-algo.html#semantic-entities","title":"Semantic Entities","text":"<p>Since dbt v1.6, dbt has supported the Semantic Layer (SL) with Metric Flow (docs), we have the ability to define entities in our semantic modelling, telling <code>metricflow</code> how to join tables together. Therefore, it now becomes the 2<sup>nd</sup> parser for our choice of usage if we have implemented the dbt SL already.</p> <p><code>dbterd</code> can now look for the Semantic Entities (<code>primary</code> and <code>foreign</code>) in order to understand the ERs, subsequently produce the ERD code.</p> <p>Let's use the above Jaffle Shop project again, here is the sample code which was implemented in the repo for the semantic models: <code>order_item</code> and <code>orders</code>:</p> <pre><code>semantic_models:\n  - name: order_item\n    ...\n    model: ref('order_items')\n    entities:\n      - name: order_item\n        type: primary\n        expr: order_item_id\n      - name: order_id\n        type: foreign\n        expr: order_id\n  ...\n  - name: orders\n    ...\n    model: ref('orders')\n    entities:\n      - name: order_id\n        type: primary\n</code></pre> <p>Now running <code>dbterd run -enf table</code> with the environment variable <code>DBTERD_ALGO=semantic</code> in advance, or we can use the command without it :</p> <pre><code>dbterd run -enf table -a semantic\n</code></pre> <p>The result DBML code will be the same as the 1<sup>st</sup> option. Voila! \ud83c\udf89\ud83c\udf89</p>"},{"location":"nav/guide/choose-algo.html#new-modules","title":"New module(s)?","text":"<p>If you've got an idea of having new type of module(s) to parse ERs, feel free to:</p> <ul> <li>To submit yours here</li> <li>Or to check Contribution for pulling a request!</li> </ul>"},{"location":"nav/guide/cli-references.html","title":"CLI Reference (dbterd)","text":"<p>Run <code>dbterd --help</code> or <code>dbterd -h</code> to see the basic guideline for CLI Reference.</p>"},{"location":"nav/guide/cli-references.html#sample-datasets","title":"Sample Datasets","text":"<p>The project includes several sample datasets in the <code>samples/</code> directory that you can use to test and explore the CLI commands:</p> <ul> <li><code>samples/jaffle-shop/</code>: A simple dbt artifacts with customers, orders, and payments models</li> <li><code>samples/dbtresto/</code>: A more complex artifacts with dimension and fact tables for analysis</li> <li><code>samples/dbt-constraints/</code>: Demonstrates using constraints for relationships</li> <li><code>samples/facebookad/</code>, <code>samples/fivetranlog/</code>, <code>samples/shopify/</code>: Additional sample artifacts</li> </ul> <p>The examples below show how to use these sample datasets with dbterd commands.</p> dbterd -h Usage: dbterd [OPTIONS] COMMAND [ARGS]...  Tools for producing diagram-as-code.  Options: --version   Show the version and exit. -h, --help  Show this message and exit.  Commands: debug         Inspect the hidden magics. init          Initialize a dbterd configuration file. run           Generate ERD file from reading dbt artifact files,... run-metadata  Generate ERD file from reading Discovery API (dbt Cloud).  Specify one of these sub-commands and you can find more help from there."},{"location":"nav/guide/cli-references.html#dbterd-init","title":"dbterd init","text":"<p>Command to initialize a dbterd configuration file with documented defaults and examples.</p> <p>Creates <code>.dbterd.yml</code> in the current directory with all available configuration options. For more details on configuration files, see the Configuration Files Guide.</p> <p>Examples:</p> Basic usagedbt Cloud templateForce overwrite--help (-h) <pre><code># Create .dbterd.yml with dbt Core template\ndbterd init\n</code></pre> <pre><code># Create .dbterd.yml with dbt Cloud template\ndbterd init --template dbt-cloud\n</code></pre> <pre><code># Overwrite existing configuration file\ndbterd init --force\n</code></pre> <pre><code>Usage: dbterd init [OPTIONS]\n\nInitialize a dbterd configuration file.\n\nCreates .dbterd.yml with common parameters and helpful comments.\nFor pyproject.toml configuration, manually add [tool.dbterd] section.\n\nUse --template to choose between dbt-core and dbt-cloud configurations.\n\nOptions:\n  --template, -tmpl [dbt-core|dbt-cloud]\n                              Configuration template type (dbt-core or dbt-\n                              cloud)  [default: dbt-core]\n  --force                     Overwrite existing configuration file if\n                              present\n  -h, --help                  Show this message and exit.\n</code></pre> <p>Configuration Files</p> <p>Once you create a configuration file, all CLI arguments become optional. The config file provides defaults, and you can override any setting with CLI arguments. Learn more in the Configuration Files Guide.</p>"},{"location":"nav/guide/cli-references.html#dbterd-run","title":"dbterd run","text":"<p>Command to generate diagram-as-a-code file from dbt artifact files, optionally downloading from Administrative API (dbt Cloud).</p> <p>Examples:</p> CLI (with samples)CLI (within dbt project)--help (-h) <pre><code># Generate DBML ERD from jaffle-shop sample\ndbterd run --artifacts-dir ./samples/jaffle-shop\n\n# Generate Mermaid ERD from jaffle-shop sample\ndbterd run --artifacts-dir ./samples/jaffle-shop --target mermaid\n\n# Generate D2 ERD from dbtresto sample\ndbterd run --artifacts-dir ./samples/dbtresto --target d2\n\n# Generate GraphViz ERD without columns\ndbterd run --artifacts-dir ./samples/dbtresto --target graphviz --omit-columns\n</code></pre> <pre><code># Generate artifacts first\ndbt docs generate\n\n# Generate ERD in your preferred format\ndbterd run [-t dbml or -t mermaid]\n</code></pre> <pre><code>Usage: dbterd run [OPTIONS]\n\nGenerate ERD file from reading dbt artifact files, optionally downloading\nfrom Administrative API (dbt Cloud) before hands.\n\nOptions:\n  -s, --select TEXT               Selection criteria\n  -ns, --exclude TEXT             Exclusion criteria\n  -t, --target TEXT               Target to the diagram-as-code platform\n                                  [default: dbml]\n  -rt, --resource-type TEXT       Specified dbt resource type(model,\n                                  source), default:model, use examples,\n                                  -rt model -rt source\n  -a, --algo TEXT                 Specified algorithm in the way to detect\n                                  diagram connectors  [default:\n                                  test_relationship]\n  -enf, --entity-name-format TEXT\n                                  Specified the format of the entity node's\n                                  name  [default: resource.package.model]\n  --omit-entity-name-quotes       Flag to omit double quotes in the entity\n                                  name. Currently only dbml is supported\n  -o, --output TEXT               Output the result file. Default to the\n                                  cwd/target\n  -ofn, --output-file-name TEXT   Output the result file name. Default is\n                                  defined in the target module\n  --omit-columns                  Flag to omit columns in diagram. Currently\n                                  only mermaid is supported\n  -ad, --artifacts-dir TEXT       Specified the path to dbt artifact directory\n                                  which known as /target directory\n  -mv, --manifest-version TEXT    Specified dbt manifest.json version\n  -cv, --catalog-version TEXT     Specified dbt catalog.json version\n  --bypass-validation             Flag to bypass the Pydantic Validation Error\n                                  by patching extra to ignored fields\n                                  [default: False]\n  --dbt                           Flag to indicate the Selection to follow\n                                  dbt's one leveraging Programmatic Invocation\n  -dpd, --dbt-project-dir TEXT    Specified dbt project directory path\n  -dt, --dbt-target TEXT          Specified dbt target name\n  --dbt-auto-artifacts            Flag to force generating dbt artifact files\n                                  leveraging Programmatic Invocation\n  --dbt-cloud                     Flag to download dbt artifact files using\n                                  dbt Cloud API. This requires the additional\n                                  parameters to be able to connection to dbt\n                                  Cloud API\n  --dbt-cloud-host-url TEXT       Configure dbt Cloud's Host URL. Try to get\n                                  OS environment variable\n                                  (DBTERD_DBT_CLOUD_HOST_URL) if not\n                                  specified. Sample dbt Cloud Run URL: https:/\n                                  /&lt;HOST_URL&gt;/deploy/&lt;ACCOUNT_ID&gt;/projects/irr\n                                  elevant/runs/&lt;RUN_ID&gt;  [default:\n                                  cloud.getdbt.com]\n  --dbt-cloud-account-id TEXT     Configure dbt Cloud's Account ID. Try to get\n                                  OS environment variable\n                                  (DBTERD_DBT_CLOUD_ACCOUNT_ID) if not\n                                  specified\n  --dbt-cloud-run-id TEXT         Configure dbt Cloud's completed Run ID. Try\n                                  to get OS environment variable\n                                  (DBTERD_DBT_CLOUD_RUN_ID) if not specified\n  --dbt-cloud-job-id TEXT         Configure dbt Cloud's Job ID. Try to get OS\n                                  environment variable\n                                  (DBTERD_DBT_CLOUD_JOB_ID) if not specified\n  --dbt-cloud-service-token TEXT  Configure dbt Service Token (Permissions:\n                                  Job Admin). Try to get OS environment\n                                  variable (DBTERD_DBT_CLOUD_SERVICE_TOKEN) if\n                                  not specified. Visit\n                                  https://docs.getdbt.com/docs/dbt-cloud-\n                                  apis/service-tokens to see how to generate\n                                  it.\n  --dbt-cloud-api-version TEXT    Configure dbt Cloud Administrative API\n                                  version. Try to get OS environment variable\n                                  (DBTERD_DBT_CLOUD_API_VERSION) if not\n                                  specified.  [default: v2]\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-select-s","title":"dbterd run --select (-s)","text":"<p>Selection criteria.</p> <p>Selects all dbt models if not specified, supports multiple options</p> <p>Rules:</p> <ul> <li>By <code>name</code>: model name starts with input string</li> <li>By <code>exact</code>: exact model name, formed as <code>exact:model.package.name</code></li> <li>By <code>schema</code>: schema name starts with an input string, formed as <code>schema:&lt;your_schema_name&gt;</code></li> <li>By <code>wildcard</code>: model name matches to a wildcard pattern, formed as <code>wildcard:&lt;your_wildcard&gt;</code></li> <li>By <code>exposure</code>: exposure name, exact match</li> </ul> <p>Examples:</p> CLI (by name)CLI (by exact name)CLI (by schema)CLI (by wildcard)CLI (by exposure) <pre><code>dbterd run -s \"model.package.partital_name\"\n\n# Example with jaffle-shop sample\ndbterd run --artifacts-dir ./samples/jaffle-shop -s \"model.jaffle_shop.order\"\n</code></pre> <pre><code>dbterd run -s \"exact:model.package.name\"\n\n# Example with jaffle-shop sample\ndbterd run --artifacts-dir ./samples/jaffle-shop -s \"exact:model.jaffle_shop.orders\"\n</code></pre> <pre><code>dbterd run -s \"schema:my_schema_name\"\n\n# Example with dbtresto sample\ndbterd run --artifacts-dir ./samples/dbtresto -s \"schema:dbt_resto\"\n</code></pre> <pre><code>dbterd run -s \"wildcard:*xyz\"\n\n# Example with dbtresto sample\ndbterd run --artifacts-dir ./samples/dbtresto -s \"wildcard:*fact_*\"\n</code></pre> <pre><code>dbterd run -s \"exposure:my_exposure_name\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#and-and-or-logic","title":"<code>AND</code> and <code>OR</code> logic","text":"<ul> <li><code>AND</code> logic is applied to a single selection split by comma (,)</li> <li><code>OR</code> logic is applied to 2+ selection</li> </ul> <p>Examples:</p> ANDOR <pre><code># All models belong to 'abc' schema AND also need to match the pattern of '*xyz.*'\ndbterd run -s schema:abc,wildcard:*xyz.*\n</code></pre> <pre><code># All models belong to 'abc' schema, OR match to the pattern of '*xyz.*'\ndbterd run -s schema:abc -s wildcard:*xyz.*\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-exclude-ns","title":"dbterd run --exclude (-ns)","text":"<p>Exclusion criteria. Rules are the same as Selection Criteria.</p> <p>Does not exclude any dbt models if not specified, supports multiple options</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ns 'model.package_name.table'\n</code></pre> <pre><code>dbterd run --exclude 'model.package_name.table'\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-artifacts-dir-ad","title":"dbterd run --artifacts-dir (-ad)","text":"<p>Configure the path to directory containing dbt artifact files.</p> <p>It will take the nested <code>/target</code> directory of <code>--dbt-project-dir</code> if not specified.</p> <p>Default to the current directory's <code>/target</code> if both this option and <code>--dbt-project-dir</code> option are not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ad \"./target\"\n</code></pre> <pre><code>dbterd run --artifacts-dir \"./target\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-output-o","title":"dbterd run --output (-o)","text":"<p>Configure the path to directory containing the output diagram file.</p> <p>Default to <code>./target</code></p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -o \"./target\"\n</code></pre> <pre><code>dbterd run --output \"./target\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-output-file-name-ofn","title":"dbterd run --output-file-name (-ofn)","text":"<p>Configure the output file name</p> <p>Default to <code>output.{modulename}</code> which is defined in the target module</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run -ofn \"erd.dbml\"\n</code></pre> <pre><code>dbterd run --output-file-name \"erd.dbml\"\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-target-t","title":"dbterd run --target (-t)","text":"<p>Default to <code>dbml</code></p> <p>Supported target, please visit Generate the Targets</p> <p>Examples:</p> CLISample-specific examplesCLI (long style) <pre><code>dbterd run -t dbml\ndbterd run -t mermaid\ndbterd run -t d2\ndbterd run -t graphviz\ndbterd run -t plantuml\ndbterd run -t drawdb\n</code></pre> <pre><code># Generate DBML output for jaffle-shop\ndbterd run --artifacts-dir ./samples/jaffle-shop -t dbml\n\n# Generate Mermaid ERD for dbtresto\ndbterd run --artifacts-dir ./samples/dbtresto -t mermaid\n\n# Generate D2 diagram for dbtresto\ndbterd run --artifacts-dir ./samples/dbtresto -t d2\n\n# Generate GraphViz output for jaffle-shop\ndbterd run --artifacts-dir ./samples/jaffle-shop -t graphviz\n</code></pre> <pre><code>dbterd run --target dbml\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-algo-a","title":"dbterd run --algo (-a)","text":"<p>Specified algorithm for detecting diagram connectors</p> <p>Check the docs \ud83d\udcd6</p> <p>Supported ones:</p> <ul> <li><code>test_relationship</code>: Looking for all relationship tests to understand the ERs</li> <li><code>semantic</code>: Looking for all semantic models' entities (primary &amp; foreign) to understand the ERs</li> </ul> <p>In the advanced use case of <code>test_relationship</code>, the test name can be configurable by following syntax:</p> <p><code>{algorithm_name}:(name:{contains_test_name}|c_from:{referencing_column_name}|c_to:{referenced_column_name})</code></p> <p>In the above:</p> <ul> <li><code>algorithm_name</code> (Mandatory): <code>test_relationship</code> or <code>semantic</code></li> <li><code>contains_test_name</code>: Configure the test name (detected with <code>contains</code> logic). Default to <code>relationship</code></li> <li><code>c_from</code>: Configure the test metadata attribute (1) for the foreign key column name(s). If (1)'s value is multiple columns, it will concat them all   with <code>_and</code> wording       &gt; NOTE: It always looking at the <code>column_name</code> attribute firstly</li> <li><code>c_to</code>: Configure the test metadata attribute (2) for the referenced column name(s). If (2)'s value is multiple columns, it will concat them all with <code>_and</code> wording. Default to <code>field</code></li> </ul> <p>For example, if you would use <code>dbt-constraints</code> package</p> <p>The dbt-constraints package is using different name of test which is close to the constraint names, in this case, you would need to customize the input string here:</p> <pre><code>dbterd run \\\n--algo \"test_relationship:(name:foreign_key|c_from:fk_column_name|c_to:pk_column_name)\"\n</code></pre> <p>Examples:</p> CLI (test_relationship)CLI (semantic)CLI (long style)Use <code>foreign_key</code> test <pre><code>dbterd run -a test_relationship\n\n# Example with jaffle-shop sample (using test_relationship algorithm)\ndbterd run --artifacts-dir ./samples/jaffle-shop -a test_relationship -t mermaid\n</code></pre> <pre><code>dbterd run -a semantic\n\n# Example with dbtresto sample (using semantic algorithm)\ndbterd run --artifacts-dir ./samples/dbtresto -a semantic -t d2\n</code></pre> <pre><code>dbterd run --algo test_relationship\n</code></pre> <pre><code>dbterd run --algo \"test_relationship:(name:foreign_key|c_from:fk_column_name|c_to:pk_column_name)\"\n\n# Example with dbt-constraints sample (using foreign_key test)\ndbterd run --artifacts-dir ./samples/dbt-constraints -a \"test_relationship:(name:foreign_key)\" -t mermaid\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-omit-columns","title":"dbterd run --omit-columns","text":"<p>Flag to omit columns in diagram. Currently only mermaid is supported</p> <p>Default to <code>False</code></p> <p>Examples:</p> CLI <pre><code>dbterd run --target mermaid --omit-columns\n\n# Example with dbtresto sample (omitting columns for a cleaner diagram)\ndbterd run --artifacts-dir ./samples/dbtresto --target mermaid --omit-columns\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-manifest-version-mv","title":"dbterd run --manifest-version (-mv)","text":"<p>Specified dbt manifest.json version</p> <p>Auto detect if not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run --manifest-version 7\n</code></pre> <pre><code>dbterd run -mv 7\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-catalog-version-cv","title":"dbterd run --catalog-version (-cv)","text":"<p>Specified dbt catalog.json version</p> <p>Auto detect if not specified</p> <p>Examples:</p> CLICLI (long style) <pre><code>dbterd run --catalog-version 7\n</code></pre> <pre><code>dbterd run -cv 7\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-bypass-validation","title":"dbterd run --bypass-validation","text":"<p>Flag to bypass Pydantic validation errors by patching the parser to ignore extra fields.</p> <p>This option is useful when working with newer dbt versions that introduce fields not yet supported by the <code>dbt-artifacts-parser</code> library. When enabled, the parser will ignore unknown fields instead of raising validation errors, allowing you to continue generating ERDs even with newer artifact schemas.</p> <p>Default to <code>False</code></p> <p>When to use this option</p> <p>You might encounter Pydantic validation errors like <code>\"Error: Could not open file 'catalog.json': File catalog.json is corrupted, please rebuild\"</code> when using artifact files from newer dbt versions. In such cases, enabling this flag can help you work around compatibility issues while waiting for the parser library to catch up with the latest dbt schema changes. Just be aware that any unsupported fields won't be included in the generated ERD (which is usually fine since relationship information remains intact).</p> <p>Examples:</p> CLI <pre><code>dbterd run --bypass-validation -mv 12 -cv 1\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-resource-type-rt","title":"dbterd run --resource-type (-rt)","text":"<p>Specified dbt resource type(model, source).</p> <p>Default to <code>[\"model\"]</code>, supports multiple options</p> <p>Examples:</p> CLICLI (long style)Working with sources <pre><code>dbterd run -rt model -rt source\n</code></pre> <pre><code>dbterd run --resource-type model\n</code></pre> <pre><code># Generate ERD for sources only\ndbterd run -rt source -t mermaid\n\n# For proper table separation in source ERDs, combine with --entity-name-format\ndbterd run -rt source -t mermaid -enf resource.package.table\n\n# Include both models and sources in the same diagram\ndbterd run -rt model -rt source -enf database.schema.table\n</code></pre> <p>Source table naming</p> <p>When working with sources, it's recommended to use <code>--entity-name-format</code> with formats that include the table name (e.g., <code>resource.package.table</code> or <code>database.schema.table</code>) to ensure each source table appears as a distinct node. See the <code>--entity-name-format</code> section for more details.</p>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt","title":"dbterd run --dbt","text":"<p>Flag to indicate the Selection to follow dbt's one leveraging Programmatic Invocation</p> <p>Default to <code>False</code></p> <p>Examples:</p> CLI (use dbt selection)CLI (use dbterd selection) <pre><code>dbterd run -s +something --dbt\n# select 'something' and the upstream\n</code></pre> <pre><code>dbterd run -s something\n# select starts with 'something'\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-dbt-auto-artifact","title":"dbterd run --dbt --dbt-auto-artifact","text":"<p>Flag to indicate force running <code>dbt docs generate</code> to the targeted project in order to produce the dbt artifact files.</p> <p>This option has to be enabled together with <code>--dbt</code> option, and will override the value of <code>--artifacts-dir</code> to use the <code>/target</code> dir of the value of <code>--dbt-project-dir</code>.</p> <p>Default to <code>False</code></p> <p>Examples:</p> CLI <pre><code>dbterd run -s +something --dbt --dbt-auto-artifacts\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-project-dir-dpd","title":"dbterd run --dbt-project-dir (-dpd)","text":"<p>Specified dbt project directory path</p> <p>You should specify this option if your CWD is not the dbt project dir, and normally used with <code>--dbt</code> enabled. It will take the value of <code>--artifacts-dir</code> if not specified.</p> <p>Default to the current directory if both this option and <code>--artifacts-dir</code> option are not specified</p> <p>Examples:</p> CLI <pre><code>dbterd run -s +something --dbt-project-dir /path/to/dbt/project --dbt\n# select 'something' and the upstream of the dbt project located at /path/to/dbt/project\n# the artifacts dir will probably be assumed as: /path/to/dbt/project/target\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-target-dt","title":"dbterd run --dbt-target (-dt)","text":"<p>Specified dbt target name</p> <p>Probably used with <code>--dbt</code> enabled.</p> <p>Default to the dbt's profile configuration</p> <p>Examples:</p> CLI <pre><code>dbterd run -s +something --dbt-project-dir /path/to/dbt/project --dbt --dbt-target prod\n# select 'something' and the upstream of the dbt project located at /path/to/dbt/project using target name 'prod'\n# the artifacts dir will probably be assumed as: /path/to/dbt/project/target\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-entity-name-format-enf","title":"dbterd run --entity-name-format (-enf)","text":"<p>Decide how the table name is generated on the ERD.</p> <p>By default, the table name is the dbt node name (<code>resource_type.package_name.model_name</code>).</p> <p>Currently, it supports the following keys in the format:</p> <ul> <li><code>resource.package.model</code> (by default)</li> <li><code>database.schema.table</code></li> <li>Or any other partial forms e.g. <code>schema.table</code>, <code>resource.model</code></li> </ul> <p>Working with Sources</p> <p>When generating ERDs for sources (using <code>-rt source</code>), you may encounter an issue where the source node name doesn't include the table name, resulting in all tables from the same source appearing as a single node with circular relationships.</p> <p>Solution: Use one of these entity name formats to ensure proper table-level separation:</p> <ul> <li><code>resource.package.table</code> - Shows resource type, package, and table name</li> <li><code>resource.package.model.table</code> - Shows resource type, package, model (source name), and table name</li> <li><code>database.schema.table</code> - Shows the fully qualified physical table name</li> </ul> <p>For example: <pre><code># This will properly separate source tables\ndbterd run -t mermaid -rt source -enf resource.package.table\n\n# This will also work and include the source name\ndbterd run -t mermaid -rt source -enf resource.package.model.table\n</code></pre></p> <p>Note: dbterd doesn't yet have native support for extracting the source name independently, but these workarounds ensure each source table appears as its own distinct node in the diagram.</p> <p>Examples:</p> CLISample-specific examples <pre><code>dbterd run --entity-name-format resource.package.model # by default\ndbterd run --entity-name-format database.schema.table # with fqn of the physical tables\ndbterd run --entity-name-format schema.table # with schema.table only\ndbterd run --entity-name-format table # with table name only\n</code></pre> <pre><code># Generate ERD with simplified entity names from jaffle-shop sample\ndbterd run --artifacts-dir ./samples/jaffle-shop --entity-name-format schema.table -t mermaid\n\n# Generate ERD with table names only from dbtresto sample\ndbterd run --artifacts-dir ./samples/dbtresto --entity-name-format table -t d2\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-omit-entity-name-quotes","title":"dbterd run --omit-entity-name-quotes","text":"<p>Flag to omit the double quotes in the generated entity name. Currently only <code>dbml</code> is supported.</p> <p>Default to <code>False</code></p> <p>Enabled it to allow <code>dbdocs</code> to recognize the schemas and display them as grouping:</p> <ul> <li>With quotes:</li> </ul> <p></p> <ul> <li>Without quotes:</li> </ul> <p></p> <p>\u26a0\ufe0f As of 2024 June: DBML doesn't support nested schema in the entity name which means 'database.schema.table' won't be allowed, but 'schema.table' does!</p> <p>Examples:</p> CLI <pre><code>dbterd run --entity-name-format resource.package.model --omit-entity-name-quotes # \u274c\ndbterd run --entity-name-format database.schema.table --omit-entity-name-quotes # \u274c\ndbterd run --entity-name-format schema.table --omit-entity-name-quotes # \u2705\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-dbt-cloud","title":"dbterd run --dbt-cloud","text":"<p>Decide to download artifact files from dbt Cloud Job Run instead of compiling locally.</p> <p>Check Download artifacts from a Job Run for more details.</p> <p>Examples:</p> CLI <pre><code>dbterd run --dbt-cloud\ndbterd run --dbt-cloud --select wildcard:*transaction*\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-run-metadata","title":"dbterd run-metadata","text":"<p>Command to generate diagram-as-a-code file by connecting to dbt Cloud Discovery API using GraphQL connection.</p> <p>Check this guideline for more details.</p> <p>Examples:</p> CLIBasic usage--help (-h) <pre><code># Generate DBML ERD from dbt Cloud environment\ndbterd run-metadata --dbt-cloud-environment-id 123456 --dbt-cloud-service-token your_token\n\n# Generate Mermaid ERD from dbt Cloud with specific models\ndbterd run-metadata --target mermaid --select model.project.customers --dbt-cloud-environment-id 123456\n\n# Generate D2 ERD with custom query file\ndbterd run-metadata --target d2 --dbt-cloud-environment-id 123456 --dbt-cloud-query-file-path ./my_query.gql\n</code></pre> <pre><code>dbterd run-metadata [-t dbml or -t mermaid]\n</code></pre> <pre><code>Usage: dbterd run-metadata [OPTIONS]\n\nGenerate ERD file from reading Discovery API (dbt Cloud).\n\nOptions:\n  -s, --select TEXT               Selection criteria\n  -ns, --exclude TEXT             Exclusion criteria\n  -t, --target TEXT               Target to the diagram-as-code platform\n                                  [default: dbml]\n  -rt, --resource-type TEXT       Specified dbt resource type(model,\n                                  source), default:model, use examples,\n                                  -rt model -rt source\n  -a, --algo TEXT                 Specified algorithm in the way to detect\n                                  diagram connectors  [default:\n                                  test_relationship]\n  -enf, --entity-name-format TEXT\n                                  Specified the format of the entity node's\n                                  name  [default: resource.package.model]\n  --omit-entity-name-quotes       Flag to omit double quotes in the entity\n                                  name. Currently only dbml is supported\n  -o, --output TEXT               Output the result file. Default to the\n                                  cwd/target\n  -ofn, --output-file-name TEXT   Output the result file name. Default is\n                                  defined in the target module\n  --omit-columns                  Flag to omit columns in diagram. Currently\n                                  only mermaid is supported\n  --dbt-cloud-host-url TEXT       Configure dbt Cloud's Host URL. Try to get\n                                  OS environment variable\n                                  (DBTERD_DBT_CLOUD_HOST_URL) if not\n                                  specified. Sample dbt Cloud Run URL: https:/\n                                  /&lt;HOST_URL&gt;/deploy/&lt;ACCOUNT_ID&gt;/projects/irr\n                                  elevant/runs/&lt;RUN_ID&gt;  [default:\n                                  cloud.getdbt.com]\n  --dbt-cloud-service-token TEXT  Configure dbt Service Token (Permissions:\n                                  Job Admin). Try to get OS environment\n                                  variable (DBTERD_DBT_CLOUD_SERVICE_TOKEN) if\n                                  not specified. Visit\n                                  https://docs.getdbt.com/docs/dbt-cloud-\n                                  apis/service-tokens to see how to generate\n                                  it.\n  --dbt-cloud-environment-id TEXT\n                                  Configure dbt Cloud Environment ID - Used\n                                  for Metadata (Discovery) API. Try to get OS\n                                  environment variable\n                                  (DBTERD_DBT_CLOUD_ENVIRONMENT_ID) if not\n                                  specified.\n  --dbt-cloud-query-file-path TEXT\n                                  Configure dbt Cloud GraphQL query file path\n                                  - Used for Metadata (Discovery) API. Try to\n                                  get OS environment variable\n                                  (DBTERD_DBT_CLOUD_QUERY_FILE_PATH) if not\n                                  specified.\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"nav/guide/cli-references.html#dbterd-debug","title":"dbterd debug","text":"<p>Shows hidden configured values, which will help us to see what configs are passed into and how they are evaluated to be used.</p> <p>Examples:</p> CLIOutput--help (-h) <pre><code># Show debug information for a run command\ndbterd debug --artifacts-dir ./samples/jaffle-shop\n\n# Show debug information for a run-metadata command\ndbterd debug --dbt-cloud-environment-id 123456\n</code></pre> <pre><code>2023-09-08 16:43:45,066 - dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\n2023-09-08 16:43:45,071 - dbterd - INFO - **Arguments used** (main.py:63)\n2023-09-08 16:43:45,073 - dbterd - DEBUG - {\n    \"artifacts_dir\": \"\",\n    \"output\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"select\": [],\n    \"exclude\": [],\n    \"target\": \"dbml\",\n    \"algo\": \"test_relationship\",\n    \"manifest_version\": null,\n    \"catalog_version\": null,\n    \"resource_type\": [\n        \"model\"\n    ],\n    \"dbt\": false,\n    \"dbt_project_dir\": \"\",\n    \"dbt_target\": null\n} (main.py:64)\n2023-09-08 16:43:45,079 - dbterd - INFO - **Arguments evaluated** (main.py:65)\n2023-09-08 16:43:45,081 - dbterd - INFO - Using dbt artifact dir at: C:\\Users\\DAT\\Documents\\Sources\\dbterd\\target (base.py:41)\n2023-09-08 16:43:45,082 - dbterd - INFO - Using dbt project  dir at: C:\\Users\\DAT\\Documents\\Sources\\dbterd (base.py:42)\n2023-09-08 16:43:45,084 - dbterd - DEBUG - {\n    \"artifacts_dir\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"output\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\\\\target\",\n    \"select\": [],\n    \"exclude\": [],\n    \"target\": \"dbml\",\n    \"algo\": \"test_relationship\",\n    \"manifest_version\": null,\n    \"catalog_version\": null,\n    \"resource_type\": [\n        \"model\"\n    ],\n    \"dbt\": false,\n    \"dbt_project_dir\": \"C:\\\\Users\\\\DAT\\\\Documents\\\\Sources\\\\dbterd\",\n    \"dbt_target\": null\n} (main.py:66)\n</code></pre> <pre><code>Usage: dbterd debug [OPTIONS]\n\nInspect the hidden magics.\n\nOptions:\n  -s, --select TEXT               Selection criteria\n  -ns, --exclude TEXT             Exclusion criteria\n  -t, --target TEXT               Target to the diagram-as-code platform\n                                  [default: dbml]\n  -rt, --resource-type TEXT       Specified dbt resource type(model,\n                                  source), default:model, use examples,\n                                  -rt model -rt source\n  -a, --algo TEXT                 Specified algorithm in the way to detect\n                                  diagram connectors  [default:\n                                  test_relationship]\n  -enf, --entity-name-format TEXT\n                                  Specified the format of the entity node's\n                                  name  [default: resource.package.model]\n  --omit-entity-name-quotes       Flag to omit double quotes in the entity\n                                  name. Currently only dbml is supported\n  -o, --output TEXT               Output the result file. Default to the\n                                  cwd/target\n  -ofn, --output-file-name TEXT   Output the result file name. Default is\n                                  defined in the target module\n  --omit-columns                  Flag to omit columns in diagram. Currently\n                                  only mermaid is supported\n  -ad, --artifacts-dir TEXT       Specified the path to dbt artifact directory\n                                  which known as /target directory\n  -mv, --manifest-version TEXT    Specified dbt manifest.json version\n  -cv, --catalog-version TEXT     Specified dbt catalog.json version\n  --bypass-validation             Flag to bypass the Pydantic Validation Error\n                                  by patching extra to ignored fields\n                                  [default: False]\n  --dbt                           Flag to indicate the Selection to follow\n                                  dbt's one leveraging Programmatic Invocation\n  -dpd, --dbt-project-dir TEXT    Specified dbt project directory path\n  -dt, --dbt-target TEXT          Specified dbt target name\n  --dbt-auto-artifacts            Flag to force generating dbt artifact files\n                                  leveraging Programmatic Invocation\n  --dbt-cloud                     Flag to download dbt artifact files using\n                                  dbt Cloud API. This requires the additional\n                                  parameters to be able to connection to dbt\n                                  Cloud API\n  --dbt-cloud-host-url TEXT       Configure dbt Cloud's Host URL. Try to get\n                                  OS environment variable\n                                  (DBTERD_DBT_CLOUD_HOST_URL) if not\n                                  specified. Sample dbt Cloud Run URL: https:/\n                                  /&lt;HOST_URL&gt;/deploy/&lt;ACCOUNT_ID&gt;/projects/irr\n                                  elevant/runs/&lt;RUN_ID&gt;  [default:\n                                  cloud.getdbt.com]\n  --dbt-cloud-account-id TEXT     Configure dbt Cloud's Account ID. Try to get\n                                  OS environment variable\n                                  (DBTERD_DBT_CLOUD_ACCOUNT_ID) if not\n                                  specified\n  --dbt-cloud-run-id TEXT         Configure dbt Cloud's completed Run ID. Try\n                                  to get OS environment variable\n                                  (DBTERD_DBT_CLOUD_RUN_ID) if not specified\n  --dbt-cloud-job-id TEXT         Configure dbt Cloud's Job ID. Try to get OS\n                                  environment variable\n                                  (DBTERD_DBT_CLOUD_JOB_ID) if not specified\n  --dbt-cloud-service-token TEXT  Configure dbt Service Token (Permissions:\n                                  Job Admin). Try to get OS environment\n                                  variable (DBTERD_DBT_CLOUD_SERVICE_TOKEN) if\n                                  not specified. Visit\n                                  https://docs.getdbt.com/docs/dbt-cloud-\n                                  apis/service-tokens to see how to generate\n                                  it.\n  --dbt-cloud-api-version TEXT    Configure dbt Cloud Administrative API\n                                  version. Try to get OS environment variable\n                                  (DBTERD_DBT_CLOUD_API_VERSION) if not\n                                  specified.  [default: v2]\n  --dbt-cloud-environment-id TEXT\n                                  Configure dbt Cloud Environment ID - Used\n                                  for Metadata (Discovery) API. Try to get OS\n                                  environment variable\n                                  (DBTERD_DBT_CLOUD_ENVIRONMENT_ID) if not\n                                  specified.\n  --dbt-cloud-query-file-path TEXT\n                                  Configure dbt Cloud GraphQL query file path\n                                  - Used for Metadata (Discovery) API. Try to\n                                  get OS environment variable\n                                  (DBTERD_DBT_CLOUD_QUERY_FILE_PATH) if not\n                                  specified.\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"nav/guide/configuration-file.html","title":"Configuration Files","text":"<p><code>dbterd</code> supports configuration files to streamline your workflow and reduce the need for repetitive CLI arguments. Think of it as your ERD generation control center \u2013 set it once, use it everywhere!</p>"},{"location":"nav/guide/configuration-file.html#supported-configuration-files","title":"Supported Configuration Files","text":"<p><code>dbterd</code> automatically discovers configuration files in your current directory:</p> <ol> <li><code>.dbterd.yml</code> - YAML configuration file (recommended for most users)</li> <li><code>pyproject.toml</code> - TOML configuration with <code>[tool.dbterd]</code> section (great for Python projects)</li> </ol> <p>Priority Order</p> <p>If both files exist, <code>dbterd</code> checks them in this order:</p> <ol> <li><code>pyproject.toml</code> (if it contains <code>[tool.dbterd]</code> section)</li> <li><code>.dbterd.yml</code></li> </ol> <p>CLI arguments always override configuration file values.</p>"},{"location":"nav/guide/configuration-file.html#quick-start","title":"Quick Start","text":""},{"location":"nav/guide/configuration-file.html#initialize-configuration","title":"Initialize Configuration","text":"<p>The easiest way to get started is using the <code>dbterd init</code> command:</p> dbterd init Created configuration file: .dbterd.yml | Template type: dbt-core restart \u21bb <p>This creates a <code>.dbterd.yml</code> file with all available options documented and ready to customize.</p> <p>Available templates:</p> dbt Core (default)dbt Cloud <pre><code>`dbterd` init [--template dbt-core]\n</code></pre> <p>Creates configuration for local dbt projects using artifact files.</p> <pre><code>`dbterd` init --template dbt-cloud\n</code></pre> <p>Creates configuration for dbt Cloud with API connection settings.</p> <p>Overwrite existing config</p> <p>Use <code>--force</code> to overwrite an existing configuration file: <pre><code>`dbterd` init --force\n</code></pre></p>"},{"location":"nav/guide/configuration-file.html#configuration-file-examples","title":"Configuration File Examples","text":""},{"location":"nav/guide/configuration-file.html#yaml-configuration-dbterdyml","title":"YAML Configuration (<code>.dbterd.yml</code>)","text":"<p>Here's a practical example for a dbt Core project:</p> <pre><code># Output Settings\ntarget: mermaid\noutput: ./docs/erd\noutput-file-name: schema.mmd\n\n# Selection &amp; Filtering\nselect:\n  - fct_*\n  - dim_*\nexclude:\n  - stg_*\n\n# Resource Types\nresource-type:\n  - model\n  - source\n\n# Relationship Detection\nalgo: test_relationship\n\n# Entity Naming\nentity-name-format: schema.table\nomit-entity-name-quotes: false\nomit-columns: false\n\n# dbt Artifact Settings\nartifacts-dir: ./target\nbypass-validation: true\n\n# dbt Project Settings (if using --dbt flag)\ndbt: false\ndbt-project-dir: .\ndbt-auto-artifacts: false\n</code></pre>"},{"location":"nav/guide/configuration-file.html#toml-configuration-pyprojecttoml","title":"TOML Configuration (<code>pyproject.toml</code>)","text":"<p>Add <code>dbterd</code> configuration to your existing <code>pyproject.toml</code>:</p> <pre><code>[tool.dbterd]\ntarget = \"mermaid\"\noutput = \"./docs/erd\"\noutput-file-name = \"schema.mmd\"\n\nselect = [\n    \"fct_*\",\n    \"dim_*\"\n]\nexclude = [\"stg_*\"]\n\nresource-type = [\"model\", \"source\"]\nalgo = \"test_relationship\"\n\nentity-name-format = \"schema.table\"\nomit-entity-name-quotes = false\nomit-columns = false\n\nartifacts-dir = \"./target\"\nbypass-validation = true\n\ndbt = false\ndbt-project-dir = \".\"\ndbt-auto-artifacts = false\n</code></pre>"},{"location":"nav/guide/configuration-file.html#dbt-cloud-configuration","title":"dbt Cloud Configuration","text":"<p>For projects using dbt Cloud:</p> YAMLTOML <pre><code># Output Settings\ntarget: dbml\noutput: ./target\n\n# dbt Cloud Settings\ndbt-cloud: true\ndbt-cloud-host-url: cloud.getdbt.com\ndbt-cloud-account-id: \"12345\"\ndbt-cloud-job-id: \"67890\"\n# Note: Store service-token in environment variable DBTERD_DBT_CLOUD_SERVICE_TOKEN\ndbt-cloud-api-version: v2\n\n# Selection\nselect:\n  - wildcard:*transaction*\n\n# Resource Types\nresource-type:\n  - model\n</code></pre> <pre><code>[tool.dbterd]\ntarget = \"dbml\"\noutput = \"./target\"\ndbt-cloud = true\ndbt-cloud-host-url = \"cloud.getdbt.com\"\ndbt-cloud-account-id = \"12345\"\ndbt-cloud-job-id = \"67890\"\n# Note: Store service-token in environment variable DBTERD_DBT_CLOUD_SERVICE_TOKEN\ndbt-cloud-api-version = \"v2\"\n\nselect = [\"wildcard:*transaction*\"]\nresource-type = [\"model\"]\n</code></pre> <p>Security Best Practice</p> <p>Never store sensitive values like <code>service-token</code> in configuration files. Use environment variables instead: <pre><code>export DBTERD_DBT_CLOUD_SERVICE_TOKEN=\"your_token_here\"\n</code></pre></p>"},{"location":"nav/guide/configuration-file.html#available-configuration-options","title":"Available Configuration Options","text":"<p>All CLI parameters can be configured in files. Here's the complete reference:</p>"},{"location":"nav/guide/configuration-file.html#output-settings","title":"Output Settings","text":"Option Type Default Description <code>target</code> string <code>dbml</code> Output format (dbml, mermaid, plantuml, graphviz, d2, drawdb) <code>output</code> string <code>./target</code> Output directory path <code>output-file-name</code> string - Custom output file name"},{"location":"nav/guide/configuration-file.html#selection-filtering","title":"Selection &amp; Filtering","text":"Option Type Default Description <code>select</code> list <code>[]</code> Model/resource selection criteria <code>exclude</code> list <code>[]</code> Model/resource exclusion criteria <code>resource-type</code> list <code>[\"model\"]</code> Resource types to include (model, source)"},{"location":"nav/guide/configuration-file.html#relationship-detection","title":"Relationship Detection","text":"Option Type Default Description <code>algo</code> string <code>test_relationship</code> Algorithm for detecting relationships"},{"location":"nav/guide/configuration-file.html#entity-naming","title":"Entity Naming","text":"Option Type Default Description <code>entity-name-format</code> string <code>resource.package.model</code> Format for entity names <code>omit-entity-name-quotes</code> boolean <code>false</code> Remove quotes from entity names (dbml only) <code>omit-columns</code> boolean <code>false</code> Hide columns in diagram (mermaid only)"},{"location":"nav/guide/configuration-file.html#artifact-settings","title":"Artifact Settings","text":"Option Type Default Description <code>artifacts-dir</code> string <code>./target</code> Path to dbt artifacts directory <code>manifest-version</code> string auto-detect dbt manifest.json version <code>catalog-version</code> string auto-detect dbt catalog.json version <code>bypass-validation</code> boolean <code>true</code> Bypass Pydantic validation errors"},{"location":"nav/guide/configuration-file.html#dbt-project-settings","title":"dbt Project Settings","text":"Option Type Default Description <code>dbt</code> boolean <code>false</code> Use dbt's selection syntax <code>dbt-project-dir</code> string <code>.</code> Path to dbt project directory <code>dbt-target</code> string - dbt target name <code>dbt-auto-artifacts</code> boolean <code>false</code> Auto-generate artifacts via programmatic invocation"},{"location":"nav/guide/configuration-file.html#dbt-cloud-settings","title":"dbt Cloud Settings","text":"Option Type Default Description <code>dbt-cloud</code> boolean <code>false</code> Enable dbt Cloud API integration <code>dbt-cloud-host-url</code> string <code>cloud.getdbt.com</code> dbt Cloud host URL <code>dbt-cloud-account-id</code> string - dbt Cloud account ID <code>dbt-cloud-run-id</code> string - dbt Cloud run ID <code>dbt-cloud-job-id</code> string - dbt Cloud job ID <code>dbt-cloud-service-token</code> string - dbt Cloud service token (use env var!) <code>dbt-cloud-api-version</code> string <code>v2</code> dbt Cloud API version <code>dbt-cloud-environment-id</code> string - Environment ID (for Discovery API) <code>dbt-cloud-query-file-path</code> string - Custom GraphQL query file path (for Discovery API) <p>Environment Variables</p> <p>All options support environment variable overrides with the <code>DBTERD_*</code> prefix. For example: <pre><code>export DBTERD_TARGET=mermaid\nexport DBTERD_OUTPUT=./my-docs\n</code></pre></p>"},{"location":"nav/guide/configuration-file.html#usage-patterns","title":"Usage Patterns","text":""},{"location":"nav/guide/configuration-file.html#override-config-with-cli-arguments","title":"Override Config with CLI Arguments","text":"<p>Configuration files provide defaults, but CLI arguments always take precedence:</p> <pre><code># Config says target: dbml\n# CLI overrides to mermaid\n`dbterd` run --target mermaid\n</code></pre>"},{"location":"nav/guide/configuration-file.html#multiple-environments","title":"Multiple Environments","text":"<p>Use different config files for different environments:</p> DevelopmentProduction <pre><code># .dbterd.dev.yml\ntarget: mermaid\nartifacts-dir: ./target\nselect:\n  - \"*\"\n</code></pre> <pre><code># Use explicitly\n`dbterd` run  # Uses default config if exists\n</code></pre> <pre><code># .dbterd.prod.yml\ntarget: dbml\nartifacts-dir: ./target\nselect:\n  - fct_*\n  - dim_*\nexclude:\n  - stg_*\n</code></pre> <p>Custom config file paths</p> <p>Currently, <code>dbterd</code> only auto-discovers config files in the current directory. Support for custom config file paths via <code>--config</code> flag is planned for a future release.</p>"},{"location":"nav/guide/configuration-file.html#cicd-integration","title":"CI/CD Integration","text":"<p>Configuration files work great in CI/CD pipelines:</p> <pre><code># GitHub Actions example\n- name: Generate ERD\n  run: |\n    dbterd run\n  env:\n    DBTERD_DBT_CLOUD_SERVICE_TOKEN: ${{ secrets.DBT_CLOUD_TOKEN }}\n</code></pre> <p>The config file provides stable defaults while sensitive values come from secrets.</p>"},{"location":"nav/guide/configuration-file.html#auto-detection-features","title":"Auto-Detection Features","text":""},{"location":"nav/guide/configuration-file.html#artifact-version-detection","title":"Artifact Version Detection","text":"<p><code>dbterd</code> now automatically detects manifest and catalog versions from the <code>metadata.dbt_schema_version</code> field:</p> <pre><code># No need to specify versions manually!\nartifacts-dir: ./target\n# manifest-version: 12  # Auto-detected\n# catalog-version: 1    # Auto-detected\n</code></pre> <p>This means you rarely need to specify <code>--manifest-version</code> or <code>--catalog-version</code> anymore \u2013 <code>dbterd</code> figures it out for you!</p>"},{"location":"nav/guide/configuration-file.html#graceful-fallback","title":"Graceful Fallback","text":"<p>If no configuration file exists, <code>dbterd</code> falls back to CLI defaults gracefully. This means:</p> <ul> <li>Existing CLI workflows continue to work unchanged</li> <li>You can adopt config files incrementally</li> <li>No breaking changes to existing scripts</li> </ul>"},{"location":"nav/guide/configuration-file.html#key-naming-convention","title":"Key Naming Convention","text":"<p>Configuration files use kebab-case for keys (e.g., <code>artifacts-dir</code>, <code>dbt-cloud</code>), which automatically converts to the snake_case used internally by Python.</p> <p>Both styles work in YAML/TOML:</p> Kebab-case (recommended)Snake_case (also works) <pre><code>artifacts-dir: ./target\ndbt-project-dir: .\n</code></pre> <pre><code>artifacts_dir: ./target\ndbt_project_dir: .\n</code></pre>"},{"location":"nav/guide/configuration-file.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"nav/guide/configuration-file.html#config-file-not-found","title":"Config File Not Found","text":"<p>If you create a config file but <code>dbterd</code> doesn't use it:</p> <ol> <li>Ensure the file is in your current working directory</li> <li>For <code>pyproject.toml</code>, verify the <code>[tool.dbterd]</code> section exists</li> <li>Check file permissions (must be readable)</li> </ol>"},{"location":"nav/guide/configuration-file.html#invalid-yamltoml-syntax","title":"Invalid YAML/TOML Syntax","text":"<p>If you see parsing errors:</p> <pre><code>Configuration error: Invalid YAML in .dbterd.yml:\nwhile parsing a block mapping\n</code></pre> <ul> <li>Validate your YAML syntax using a linter</li> <li>Ensure proper indentation (YAML is whitespace-sensitive)</li> <li>Check for missing colons or quotes</li> </ul>"},{"location":"nav/guide/configuration-file.html#config-not-taking-effect","title":"Config Not Taking Effect","text":"<p>If your config seems ignored:</p> <ol> <li>CLI arguments override config files \u2013 check your command</li> <li>Environment variables override config files \u2013 check <code>env | grep DBTERD</code></li> <li>Use <code>dbterd</code> debug` to see evaluated configuration values</li> </ol>"},{"location":"nav/guide/configuration-file.html#python-311-toml-support","title":"Python &lt; 3.11 TOML Support","text":"<p>For Python versions below 3.11, install the <code>tomli</code> package:</p> <pre><code>pip install tomli\n</code></pre> <p>Otherwise, you'll see:</p> <pre><code>TOML support requires 'tomli' package for Python &lt; 3.11\n</code></pre>"},{"location":"nav/guide/configuration-file.html#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>.dbterd.yml</code> for project defaults - Check it into version control so your team shares the same configuration</li> <li>Store secrets in environment variables - Never commit tokens or credentials</li> <li>Override with CLI for one-off changes - No need to edit the config for quick experiments</li> <li>Document your configuration - Use YAML comments to explain why certain options are set</li> <li>Start with <code>dbterd init</code> - Let <code>dbterd</code> generate a well-documented template for you</li> </ol>"},{"location":"nav/guide/configuration-file.html#learn-more","title":"Learn More","text":"<ul> <li>CLI Reference - Complete CLI documentation</li> <li>Choose the Parser - Understanding relationship detection algorithms</li> <li>dbt Cloud Integration - Using <code>dbterd</code> with dbt Cloud</li> </ul>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job-run.html","title":"Download artifacts from a Job Run","text":"<p>This is a guideline on how to download <code>manifest.json</code> and <code>catalog.json</code> from a Job Run by using dbt CLoud Administrative API, under the Retrieve Run Artifact endpoint. Therefore, we don't need to run <code>dbt docs generate</code> locally anymore.</p> <p>In order to support dbt Cloud users, <code>dbterd</code> is now having multiple CLI options starting with <code>--dbt-cloud</code> to let us configure the connection to the complete dbt Cloud Job Run.</p> <p>Prerequisites</p> <ul> <li>You have a dbt Cloud account with Team and Enterprise plans \ud83d\udcb0</li> <li> <p>You have a job or go create a new job with a single step \ud83c\udfc3</p> <pre><code>dbt docs generate\n</code></pre> </li> <li> <p>Make sure that you have at least 1 successful run \u2705</p> </li> </ul>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job-run.html#1-prepare-the-environment-variables","title":"1. Prepare the environment variables","text":"<p>Behind the scene, the API Endpoint will look like:</p> <pre><code>https://{host_url}/api/{api_version}/accounts/{account_id}/runs/{run_id}/artifacts/{path}\n</code></pre> <p>And the dbt Cloud's Job Run will have the URL constructed as:</p> <pre><code>https://&lt;host_url&gt;/deploy/&lt;account_id&gt;/projects/irrelevant/runs/&lt;run_id&gt;\n</code></pre> <p>In the above:</p> URL Part Environment Variable CLI Option Description <code>host_url</code> <code>DBTERD_DBT_CLOUD_HOST_URL</code> <code>--dbt-cloud-host-url</code> Host URL, also known as Access URL (Default to <code>cloud.getdbt.com</code>) <code>account_id</code> <code>DBTERD_DBT_CLOUD_ACCOUNT_ID</code> <code>--dbt-cloud-account-id</code> dbt Cloud Account ID <code>run_id</code> <code>DBTERD_DBT_CLOUD_RUN_ID</code> <code>--dbt-cloud-run-id</code> dbt Cloud successful job run ID <code>api_version</code> <code>DBTERD_DBT_CLOUD_API_VERSION</code> <code>--dbt-cloud-api-version</code> dbt Cloud API version (Default to <code>v2</code>) <code>path</code> <code>N/A</code> <code>N/A</code> Artifact relative file path. You don't need to care about this part as <code>dbterd</code> managed it already <p>Besides, we need another one which is very important, the service token:</p> <ul> <li>Go to Account settings / Service tokens. Click + New token</li> <li>Enter Service token name e.g. \"ST_dbterd\"</li> <li>Click Add and select <code>Job Admin</code> permission. Optionally, select the right project or all by default</li> <li>Click Save</li> <li>Copy token &amp; Pass it to the Environment Variable (<code>DBTERD_DBT_CLOUD_SERVICE_TOKEN</code>) or the CLI Option (<code>--dbt-cloud-service-token</code>)</li> </ul> <p>Finally, fill in <code>your_value</code> and execute the (Linux or Macos) command below:</p> <pre><code>export DBTERD_DBT_CLOUD_SERVICE_TOKEN=your_value\nexport DBTERD_DBT_CLOUD_ACCOUNT_ID=your_value\nexport DBTERD_DBT_CLOUD_RUN_ID=your_value\nexport DBTERD_DBT_CLOUD_HOST_URL=your_value # optional, default = cloud.getdbt.com\nexport DBTERD_DBT_CLOUD_API_VERSION=your_value # optional, default = v2\n</code></pre> <p>Or in Powershell:</p> <pre><code>$env:DBTERD_DBT_CLOUD_SERVICE_TOKEN=\"your_value\"\n$env:DBTERD_DBT_CLOUD_ACCOUNT_ID=\"your_value\"\n$env:DBTERD_DBT_CLOUD_RUN_ID=\"your_value\"\n$env:DBTERD_DBT_CLOUD_HOST_URL=\"your_value\" # optional, default = cloud.getdbt.com\n$env:DBTERD_DBT_CLOUD_API_VERSION=\"your_value\" # optional, default = v2\n</code></pre>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job-run.html#2-generate-erd-file","title":"2. Generate ERD file","text":"<p>We're going to use <code>--dbt-cloud</code> option to tell <code>dbterd</code> to use dbt Cloud API with all above variables.</p> <p>The command will look like:</p> <pre><code>dbterd run --dbt-cloud [-s &lt;dbterd selection&gt;]\n</code></pre> <p>Note</p> <p>You can not use <code>--dbt</code> option together with <code>--dbt-cloud</code></p> <p>and then, here is the sample console log:</p> <pre><code>dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\ndbterd - INFO - Using dbt project dir at: C:\\Sources\\dbterd (base.py:46)\ndbterd - INFO - Downloading...[URL: https://hidden/api/v2/accounts/hidden/runs/hidden/artifacts/manifest.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Downloading...[URL: https://hidden/api/v2/accounts/hidden/runs/hidden/artifacts/catalog.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Using dbt artifact dir at: hidden (base.py:73)\ndbterd - INFO - Collected 4 table(s) and 3 relationship(s) (test_relationship.py:59)\ndbterd - INFO - C:\\Sources\\dbterd\\target/output.dbml (base.py:170)\n</code></pre> <p>Voila! Happy ERD \ud83c\udf89!</p>"},{"location":"nav/guide/dbt-cloud/download-artifact-from-a-job.html","title":"Download the latest artifacts from a Job","text":"<p>Better than looking at the Run ID which is not static all the time, we're able to implicitly tell <code>dbterd</code> to retrieve the latest artifacts from a Job (latest run) by using the Retrieve Job Artifact endpoint.</p> <p>The Prerequisites and Steps will be pretty similar to Download artifacts from a Job Run, mostly everything is the same but we will specify JOB ID instead of the JOB RUN ID.</p> <p>Note</p> <p>JOB RUN ID takes precedence to JOB ID if specified</p> <p>Our dbt Cloud's Job will have the URL constructed as:</p> <pre><code>https://&lt;host_url&gt;/deploy/&lt;account_id&gt;/projects/irrelevant/jobs/&lt;job_id&gt;\n</code></pre> <p>In the above:</p> URL Part Environment Variable CLI Option Description <code>job_id</code> <code>DBTERD_DBT_CLOUD_JOB_ID</code> <code>--dbt-cloud-job-id</code> dbt Cloud job ID <ul> <li>Fill <code>your_value</code> and set the environment variable as below:</li> </ul> <pre><code>export DBTERD_DBT_CLOUD_SERVICE_TOKEN=your_value\nexport DBTERD_DBT_CLOUD_ACCOUNT_ID=your_value\nexport DBTERD_DBT_CLOUD_JOB_ID=your_value\nexport DBTERD_DBT_CLOUD_HOST_URL=your_value # optional, default = cloud.getdbt.com\nexport DBTERD_DBT_CLOUD_API_VERSION=your_value # optional, default = v2\n</code></pre> <ul> <li>Generate ERD:</li> </ul> <pre><code>dbterd run --dbt-cloud [-s &lt;dbterd selection&gt;]\n</code></pre> <p>And the sample logs:</p> <pre><code>dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\ndbterd - INFO - Using dbt project dir at: C:\\Sources\\dbterd (base.py:46)\ndbterd - INFO - Downloading...[URL: https://hidden/api/v2/accounts/hidden/jobs/hidden/artifacts/manifest.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Downloading...[URL: https://hidden/api/v2/accounts/hidden/jobs/hidden/artifacts/catalog.json] (dbt_cloud.py:68)\ndbterd - INFO - Completed [status: 200] (dbt_cloud.py:71)\ndbterd - INFO - Using dbt artifact dir at: hidden (base.py:73)\ndbterd - INFO - Collected 4 table(s) and 3 relationship(s) (test_relationship.py:59)\ndbterd - INFO - C:\\Sources\\dbterd\\target/output.dbml (base.py:170)\n</code></pre>"},{"location":"nav/guide/dbt-cloud/read-artifact-from-an-environment.html","title":"Read the latest artifacts from an environment","text":"<p>This is a guideline on how to query the dbt cloud metadata given an environment by using dbt Cloud Discovery API. It doesn't require <code>JOB ID</code> or <code>JOB RUN ID</code>, but rather the dbt Cloud's <code>ENVIRONMENT ID</code>. Especially, with this method, <code>dbterd</code> doesn't require downloading files beforehand anymore, the ERD will be generated on the fly \ud83d\ude80.</p> <p><code>dbterd</code> now understands GraphQL connections which are exposed by dbt Cloud Discovery API endpoint:</p> <pre><code>https://metadata.YOUR_ACCESS_URL/graphql\n</code></pre> <p>Replace <code>{YOUR_ACCESS_URL}</code> with the appropriate Access URL for your region and plan</p> <p>Prerequisites</p> <ul> <li>dbt Cloud multi-tenant or single tenant account \u2601\ufe0f</li> <li>You must be on a Team or Enterprise plan \ud83d\udcb0</li> <li>Your projects must be on dbt version 1.0 or later \ud83c\udfc3</li> </ul> <p>The assumption is that you've already got the dbt Cloud project ready and have at least 1 environment, and 1 job run successfully in this environment.</p>"},{"location":"nav/guide/dbt-cloud/read-artifact-from-an-environment.html#1-prepare-the-environment-variables","title":"1. Prepare the environment variables","text":"<p>As mentioned above, the API Endpoint will look like:</p> <pre><code>https://metadata.YOUR_ACCESS_URL/graphql\n</code></pre> <p>For example, if your multi-tenant region is North America, your endpoint is <code>https://metadata.cloud.getdbt.com/graphql</code>. If your multi-tenant region is EMEA, your endpoint is <code>https://metadata.emea.dbt.com/graphql</code>.</p> <p>And the dbt Cloud's Environment will have the URL constructed as:</p> <pre><code>https://&lt;host_url&gt;/deploy/irrelevant/projects/irrelevant/environments/&lt;environment_id&gt;\n</code></pre> <p>In the above:</p> URL Part Environment Variable CLI Option Description <code>host_url</code> <code>DBTERD_DBT_CLOUD_HOST_URL</code> <code>--dbt-cloud-host-url</code> Host URL (also known as Access URL) with prefix of <code>metadata.</code> <code>environment_id</code> <code>DBTERD_DBT_CLOUD_ENVIRONMENT_ID</code> <code>--dbt-cloud-environment-id</code> dbt Cloud environment ID <p>Besides, we need another one which is very important, the service token:</p> <ul> <li>Go to Account settings / Service tokens. Click + New token</li> <li>Enter Service token name e.g. \"ST_dbterd_metadata\"</li> <li>Click Add and select <code>Metadata Only</code> permission. Optionally, select the right project or all by default</li> <li>Click Save</li> <li>Copy token &amp; Pass it to the Environment Variable (<code>DBTERD_DBT_CLOUD_SERVICE_TOKEN</code>) or the CLI Option (<code>--dbt-cloud-service-token</code>)</li> </ul> <p>Finally, fill in <code>your_value</code> and execute the (Linux or Macos) command below:</p> <pre><code>export DBTERD_DBT_CLOUD_HOST_URL=your_value e.g. metadata.cloud.getdbt.com\nexport DBTERD_DBT_CLOUD_SERVICE_TOKEN=your_value\nexport DBTERD_DBT_CLOUD_ENVIRONMENT_ID=your_value\n</code></pre> <p>Or in Powershell:</p> <pre><code>$env:DBTERD_DBT_CLOUD_HOST_URL=\"your_value\"\n$env:DBTERD_DBT_CLOUD_SERVICE_TOKEN=\"your_value\"\n$env:DBTERD_DBT_CLOUD_ENVIRONMENT_ID=\"your_value\"\n</code></pre>"},{"location":"nav/guide/dbt-cloud/read-artifact-from-an-environment.html#2-generate-erd-file","title":"2. Generate ERD file","text":"<p>We're going to use a new command as <code>dbterd run-metadata</code> to tell <code>dbterd</code> to use dbt Cloud Discovery API with all above variables.</p> <p>The command will look like:</p> <pre><code>dbterd run-metadata [-s &lt;dbterd selection&gt;]\n</code></pre> <p>Behind the scenes, it will try to use the ERD GraphQL query built-in at include/erd_query.gql</p> <p>and then, here is the sample console log:</p> <pre><code>2024-02-03 19:57:57,514 - dbterd - INFO - Run with dbterd==1.0.0 (main.py:54)\n2024-02-03 19:57:57,515 - dbterd - INFO - Looking for the query in: (hidden)/dbterd/adapters/dbt_cloud/include/erd_query.gql (query.py:25)\n2024-02-03 19:57:57,516 - dbterd - DEBUG - Getting erd data...[URL: https://metadata.cloud.getdbt.com/graphql/, VARS: {'environment_id': '(hidden)', 'model_first': 500, 'source_first': 500, 'exposure_first': 500, 'test_first': 500}] (graphql.py:40)\n2024-02-03 19:57:58,865 - dbterd - DEBUG - Completed [status: 200] (graphql.py:48)\n2024-02-03 19:57:58,868 - dbterd - INFO - Metadata result: 5 model(s), 2 source(s), 1 exposure(s), 21 test(s) (discovery.py:169)\n2024-02-03 19:57:58,880 - dbterd - INFO - Collected 5 table(s) and 1 relationship(s) (test_relationship.py:44)\n2024-02-03 19:57:58,881 - dbterd - INFO - (hidden)\\target (base.py:179)\n</code></pre> <p>Voila! Happy ERD with dbt Cloud Metadata \ud83c\udf89!</p>"},{"location":"nav/guide/targets/generate-d2.html","title":"Generate D2 ERD","text":""},{"location":"nav/guide/targets/generate-d2.html#1-install-d2-cli","title":"1. Install D2 CLI","text":"<pre><code># With --dry-run the install script will print the commands it will use\n# to install without actually installing so you know what it's going to do.\ncurl -fsSL https://d2lang.com/install.sh | sh -s -- --dry-run\n# If things look good, install for real.\ncurl -fsSL https://d2lang.com/install.sh | sh -s --\n</code></pre> <p>Check installations for more details</p>"},{"location":"nav/guide/targets/generate-d2.html#2-generate-d2-erd-content","title":"2. Generate D2 ERD content","text":"dbterd run -t d2 -ad \"samples/dbtresto\" -o \"target\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.d2 (base.py:75)"},{"location":"nav/guide/targets/generate-d2.html#2-export-to-svg","title":"2. Export to SVG","text":"d2 -w ./target/output.d2 ./target/output.svg"},{"location":"nav/guide/targets/generate-d2.html#3-embedded-into-markdown","title":"3. Embedded into Markdown","text":"<pre><code># Sample D2 ERD\n\n![d2](./target/output.svg)\n</code></pre> <p>Sample Output:</p> <p></p>"},{"location":"nav/guide/targets/generate-dbml.html","title":"Generate DBML","text":""},{"location":"nav/guide/targets/generate-dbml.html#1-produce-your-manifest-json","title":"1. Produce your manifest json","text":"<p>In your dbt project (I am using dbt-resto/integration_tests for demo purpose), try to build the docs:</p> dbt docs generate 01:40:58  Running with dbt=1.3.4 01:40:58  Partial parse save file not found. Starting full parse. 01:41:00  Found 0 models, 0 tests, 0 snapshots, 0 analyses, 356 macros, 1 operation, 0 seed files, 0 sources, 0 exposures, 0 metrics 01:41:00   01:41:00  Concurrency: 4 threads (target='postgres') 01:41:00   01:41:00  Done. 01:41:00  Building catalog 01:41:00  Catalog written to .\\target\\catalog.json <p></p>"},{"location":"nav/guide/targets/generate-dbml.html#2-generate-dbml","title":"2. Generate DBML","text":"<p>Copy <code>manifest.json</code> and <code>catalog.json</code> into a specific folder OR do nothing and let's assume we're using <code>dbt/target</code> directory, and run</p> <p>Sample Usage</p> <p><code>dbterd run -ad \"/path/to/dbt/target\" -o \"/path/to/output\"</code></p> dbterd run -ad \"samples/dbtresto\" -s model.dbt_resto 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.dbml (base.py:75) <p>File <code>./target/output.dbml</code> will be generated as the result</p>"},{"location":"nav/guide/targets/generate-dbml.html#3-build-database-docs-site-optional","title":"3. Build database docs site (Optional)","text":"<p>Assuming you're already familiar with dbdocs</p> <p>Sample Usage</p> <p><code>dbdocs build \"/path/to/output/output.dbml\"</code></p> dbdocs build \"./target/output.dbml\" \u221a Parsing file content ? Project name:  poc \u203c Password is not set for 'poc' \u221a Done. Visit: https://dbdocs.io/datnguye/poc <p>The site will be looks like:</p> <p></p> <p>Result after applied Model Selection: </p>"},{"location":"nav/guide/targets/generate-drawdb.html","title":"Generate DrawDB","text":""},{"location":"nav/guide/targets/generate-drawdb.html#1-produce-dbt-artifact-files","title":"1. Produce dbt artifact files","text":"<p>Let's use Jaffle-Shop as the example.</p> <p>Clone it, then perform the <code>dbt docs generate</code> in order to generate the <code>/target</code> folder containing:</p> <ul> <li><code>manifest.json</code></li> <li><code>catalog.json</code></li> </ul> <p>Or we can use the generated files found in the samples</p>"},{"location":"nav/guide/targets/generate-drawdb.html#2-generate-drawdb-ddb-file","title":"2. Generate DrawDB (.ddb) file","text":"<p>In the same dbt project directory, let's run <code>dbterd</code> command to generate the <code>.ddb</code> file which is the supported import file format, actually it is <code>json</code> file</p> <pre><code>dbterd run -t drawdb -enf table\n</code></pre> <p>There we go, here is the sample output content:</p> <pre><code>{\n  \"author\": \"dbterd\",\n  \"title\": \"erd\",\n  \"date\": \"2024-07-28T01:54:24.620460Z\",\n  \"tables\": [\n    ...\n    {\n      \"id\": 3,\n      \"name\": \"order_items\",\n      ...\n    }\n    ...\n    {\n      \"id\": 4,\n      \"name\": \"orders\",\n      ...\n    }\n  ],\n  \"relationships\": [\n    {\n      \"id\": 0,\n      \"name\": \"fk__order_items_orders__order_id\",\n      \"cardinality\": \"Many to one\",\n      \"startTableId\": 3,\n      \"endTableId\": 4,\n      \"startFieldId\": 1,\n      \"endFieldId\": 0,\n      ...\n    },\n...\n</code></pre> <p>Check full sample at samples/jaffle-shop/erd.ddb</p>"},{"location":"nav/guide/targets/generate-drawdb.html#3-import-to-draw-db-editor","title":"3. Import to Draw DB Editor","text":"<p>Go to the Draw DB Editor to play around:</p> <ul> <li>Files &gt; Import diagram</li> <li>Choose the generated file e.g. <code>erd.ddb</code></li> <li>Click <code>Import</code></li> </ul> <p>Voila \ud83c\udf89, here's the result:</p> <p></p>"},{"location":"nav/guide/targets/generate-graphviz.html","title":"Generate GraphViz ERD","text":""},{"location":"nav/guide/targets/generate-graphviz.html#1-install-graphviz-cli","title":"1. Install GraphViz CLI","text":"<pre><code>sudo apt install graphviz\n</code></pre> <p>Check installations for more details</p>"},{"location":"nav/guide/targets/generate-graphviz.html#2-generate-graphviz-erd-content","title":"2. Generate GraphViz ERD content","text":"dbterd run -t graphviz -ad \"samples/dbtresto\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.graphviz (base.py:75)"},{"location":"nav/guide/targets/generate-graphviz.html#2-export-to-png","title":"2. Export to PNG","text":"dot -Tpng ./target/output.d2 &gt; ./target/output.png"},{"location":"nav/guide/targets/generate-graphviz.html#3-embedded-into-markdown","title":"3. Embedded into Markdown","text":"<pre><code># Sample GraphViz ERD\n\n![graphviz](./target/output.png)\n</code></pre> <p>Sample Output:</p> <p></p>"},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html","title":"Generate Markdown with Mermaid ERD inclusive","text":""},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html#1-generate-mermaid-erd-content","title":"1. Generate mermaid ERD content","text":"dbterd run -t mermaid -ad \"samples/dbtresto\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.md (base.py:75)"},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html#2-copy-mermaid-to-erdmd","title":"2. Copy mermaid to ERD.md","text":"<p>Linux/MacOs</p> <p>We'll use <code>echo</code> and <code>cat</code> to copy content over into the target Markdown file.</p> echo \\`\\`\\`mermaid          &gt;  ./samples/dbtresto/ERD.md echo ---                    &gt;&gt; ./samples/dbtresto/ERD.md echo title: Sample ERD      &gt;&gt; ./samples/dbtresto/ERD.md echo ---                    &gt;&gt; ./samples/dbtresto/ERD.md cat ./target/output.md      &gt;&gt; ./samples/dbtresto/ERD.md echo \\`\\`\\`                 &gt;&gt; ./samples/dbtresto/ERD.md"},{"location":"nav/guide/targets/generate-markdown-mermaid-erd.html#3-commit-it-and-check-it-on-github","title":"3. Commit it and check it on GitHub","text":"<p>Check out the sample output:</p> <p></p>"},{"location":"nav/guide/targets/generate-plantuml.html","title":"Generate PlantUML","text":""},{"location":"nav/guide/targets/generate-plantuml.html#1-generate-plantuml-erd-content","title":"1. Generate PlantUML ERD content","text":"dbterd run -t plantuml -ad \"samples/dbtresto\" -s schema:dbt.mart 2023-05-06 08:17:54,413 - dbterd - INFO - Run with dbterd==?.?.? (main.py:54) 2023-05-06 08:17:54,715 - dbterd - INFO - target/output.plantuml (base.py:75)"},{"location":"nav/guide/targets/generate-plantuml.html#2-wrapping-uml-up-to-the-web-server","title":"2. Wrapping UML up to the web server","text":"<ul> <li>Go to PlantUML Web Server</li> <li>Paste the PlantUML content generated as above</li> <li>Wait for a second and get the URL</li> </ul>"},{"location":"nav/guide/targets/generate-plantuml.html#3-embed-the-plantuml-url-into-markdown","title":"3. Embed the PlantUML URL into Markdown","text":"<pre><code>![](https://www.plantuml.com/plantuml/dpng/{your-hash})\n</code></pre>"},{"location":"nav/guide/targets/generate-plantuml.html#known-limitations","title":"Known Limitations\ud83d\udca1","text":"<ul> <li>PlantUML connectors don't seem to support indicating the columns which are related to the Relationship</li> <li>The question \"How to automate the markdown image URL generation?\" remains open</li> </ul>"},{"location":"nav/metadata/ignore_in_erd.html","title":"Ignore Tests","text":""},{"location":"nav/metadata/ignore_in_erd.html#decide-to-exclude-relationship-tests-from-erd-generated","title":"Decide to exclude Relationship Tests from ERD generated","text":"<p>Add <code>ignore_in_erd</code> attribute into your test's meta: <pre><code>version: 2\n\nmodels:\n  - name: your_model\n    columns:\n      - name: your_column\n        tests:\n          - relationships_test:\n              to: ref('your_other_model')\n              field: your_other_column\n              meta:\n                ignore_in_erd: 1\n</code></pre></p> <p>Default value: <code>0</code> if the meta config is not specified</p>"},{"location":"nav/metadata/label_override.html","title":"Label Override","text":""},{"location":"nav/metadata/label_override.html#override-display-names-for-tables-and-references","title":"Override Display Names for Tables and References","text":"<p>Customize how tables and relationships appear in your ERD by using the <code>label</code> and <code>relationship_label</code> metadata attributes.</p>"},{"location":"nav/metadata/label_override.html#override-table-display-names","title":"Override Table Display Names","text":"<p>Add <code>label</code> attribute to your model's meta to customize its display name in the ERD:</p> <pre><code>models:\n  - name: axw_derived__rpt_ccd_customers_hist\n    meta:\n      label: customers\n    columns:\n      - name: customer_id\n        description: Primary key for customers\n</code></pre> <p>This will display the model as <code>customers</code> in the ERD instead of the actual model name <code>axw_derived__rpt_ccd_customers_hist</code>.</p>"},{"location":"nav/metadata/label_override.html#override-relationship-display-names","title":"Override Relationship Display Names","text":"<p>Add <code>relationship_label</code> attribute to your test's meta to customize the relationship name:</p> <pre><code>models:\n  - name: orders\n    columns:\n      - name: customer_id\n        tests:\n          - relationships:\n              to: ref('customers')\n              field: customer_id\n              meta:\n                relationship_label: placed_by\n</code></pre> <p>This will display the relationship as <code>placed_by</code> instead of the default relationship name.</p>"},{"location":"nav/metadata/label_override.html#use-cases","title":"Use Cases","text":"<ul> <li>Simplify complex naming conventions: Transform technical names like <code>stg_erp__customer_master_v2</code> to readable names like <code>Customers</code></li> <li>Business-friendly diagrams: Create ERDs that use business terminology instead of technical database names</li> <li>Multi-tenant scenarios: Customize display names for different clients or environments</li> <li>Internationalization: Display table names in different languages while maintaining consistent model names</li> </ul>"},{"location":"nav/metadata/label_override.html#example","title":"Example","text":"<p>Here's a complete example showing both table and relationship label overrides:</p> <pre><code>models:\n  - name: fct_daily_revenue_agg\n    meta:\n      label: Daily Revenue\n    columns:\n      - name: product_id\n        tests:\n          - relationships:\n              to: ref('dim_product_catalog')\n              field: product_id\n              meta:\n                relationship_label: sold_product\n      - name: store_id\n        tests:\n          - relationships:\n              to: ref('dim_store_locations')\n              field: store_id\n              meta:\n                relationship_label: generated_at\n\n  - name: dim_product_catalog\n    meta:\n      label: Products\n    columns:\n      - name: product_id\n        description: Primary key\n\n  - name: dim_store_locations\n    meta:\n      label: Stores\n    columns:\n      - name: store_id\n        description: Primary key\n</code></pre> <p>This configuration will generate an ERD where: - <code>fct_daily_revenue_agg</code> appears as <code>Daily Revenue</code> - <code>dim_product_catalog</code> appears as <code>Products</code> - <code>dim_store_locations</code> appears as <code>Stores</code> - The relationship from Daily Revenue to Products is labeled as <code>sold_product</code> - The relationship from Daily Revenue to Stores is labeled as <code>generated_at</code></p> <p>The resulting ERD would look like this:</p> <pre><code>erDiagram\n    \"Daily Revenue\" {\n        string product_id\n        string store_id\n    }\n    \"Products\" {\n        string product_id PK\n    }\n    \"Stores\" {\n        string store_id PK\n    }\n    \"Daily Revenue\" ||--|| \"Products\" : \"sold_product\"\n    \"Daily Revenue\" ||--|| \"Stores\" : \"generated_at\"</code></pre> <p>Note: If no <code>label</code> is specified, the original model name will be used. Similarly, if no <code>relationship_label</code> is specified, the default relationship naming will apply.</p>"},{"location":"nav/metadata/label_override.html#related-options","title":"Related Options","text":"<p>The <code>label</code> metadata override works in conjunction with the <code>--entity-name-format</code> CLI option:</p> <ul> <li><code>--entity-name-format</code>: Controls the default naming format for entities when no <code>label</code> override is specified</li> <li>Default: <code>resource.package.model</code> (e.g., <code>model.jaffle_shop.customers</code>)</li> <li>Other options: <code>database.schema.table</code>, <code>schema.table</code>, <code>table</code>, etc.</li> <li>Example: <code>dbterd run --entity-name-format schema.table</code></li> </ul> <p>When both are used: - The <code>label</code> metadata takes precedence over <code>--entity-name-format</code> - Entities with <code>label</code> metadata will display the custom label - Entities without <code>label</code> metadata will use the format specified by <code>--entity-name-format</code></p> <p>This allows for flexible naming strategies where you can set a general naming convention with <code>--entity-name-format</code> and override specific models with the <code>label</code> metadata.</p>"},{"location":"nav/metadata/relationship_type.html","title":"Relationship Types","text":""},{"location":"nav/metadata/relationship_type.html#decide-to-enforce-relationship-type","title":"Decide to enforce Relationship Type","text":"<p>Add <code>relationship_type</code> attribute into your test's meta:</p> <pre><code>version: 2\n\nmodels:\n  - name: your_model\n    columns:\n      - name: your_column\n        tests:\n          - relationships:\n              to: ref('your_other_model')\n              field: your_other_column\n              meta:\n                relationship_type: many-to-one\n</code></pre> <p>Default value: <code>many-to-one</code> if the meta config is not specified</p> <p>List of accepted values:</p> Relationship Type Programmatic Symbol one-to-many 1n zero-to-many 0n many-to-many nn one-to-one 11 many-to-one n1 Not specified/Invalid value n1 <p>NOTE: We know that we could configure multiple relationship types but in best practice we should always have <code>many-to-one</code></p>"}]}