{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json",
        "dbt_version": "1.8.4",
        "generated_at": "2024-07-28T01:54:24.620460Z",
        "invocation_id": "f06e159b-5afc-49ef-98b4-43a9bd2bb77a",
        "env": {},
        "project_name": "jaffle_shop",
        "project_id": "06e5b98c2db46f8a72cc4f66410e9b3b",
        "user_id": "532144f1-0463-485d-92a4-36afa29065fa",
        "send_anonymous_usage_stats": true,
        "adapter_type": "postgres"
    },
    "nodes": {
        "model.jaffle_shop.customers": {
            "database": "demo",
            "schema": "public",
            "name": "customers",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\customers.sql",
            "original_file_path": "models\\marts\\customers.sql",
            "unique_id": "model.jaffle_shop.customers",
            "fqn": [
                "jaffle_shop",
                "marts",
                "customers"
            ],
            "alias": "customers",
            "checksum": {
                "name": "sha256",
                "checksum": "40e76c2534cb7e32a1b6bf67883e240644ef4a97041a0feae0969590ac2e4017"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "Customer overview data mart, offering key details for each unique customer. One row per customer.",
            "columns": {
                "customer_id": {
                    "name": "customer_id",
                    "description": "The unique key of the orders mart.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "customer_name": {
                    "name": "customer_name",
                    "description": "Customers' full name.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "count_lifetime_orders": {
                    "name": "count_lifetime_orders",
                    "description": "Total number of orders a customer has ever placed.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "first_ordered_at": {
                    "name": "first_ordered_at",
                    "description": "The timestamp when a customer placed their first order.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "last_ordered_at": {
                    "name": "last_ordered_at",
                    "description": "The timestamp of a customer's most recent order.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "lifetime_spend_pretax": {
                    "name": "lifetime_spend_pretax",
                    "description": "The sum of all the pre-tax subtotals of every order a customer has placed.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "lifetime_tax_paid": {
                    "name": "lifetime_tax_paid",
                    "description": "The sum of all the tax portion of every order a customer has placed.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "lifetime_spend": {
                    "name": "lifetime_spend",
                    "description": "The sum of all the order totals (including tax) that a customer has ever placed.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "customer_type": {
                    "name": "customer_type",
                    "description": "Options are 'new' or 'returning', indicating if a customer has ordered more than once or has only placed their first order to date.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\marts\\customers.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.4223976,
            "relation_name": "\"demo\".\"public\".\"customers\"",
            "raw_code": "with\r\n\r\ncustomers as (\r\n\r\n    select * from {{ ref('stg_customers') }}\r\n\r\n),\r\n\r\norders as (\r\n\r\n    select * from {{ ref('orders') }}\r\n\r\n),\r\n\r\ncustomer_orders_summary as (\r\n\r\n    select\r\n        orders.customer_id,\r\n\r\n        count(distinct orders.order_id) as count_lifetime_orders,\r\n        count(distinct orders.order_id) > 1 as is_repeat_buyer,\r\n        min(orders.ordered_at) as first_ordered_at,\r\n        max(orders.ordered_at) as last_ordered_at,\r\n        sum(orders.subtotal) as lifetime_spend_pretax,\r\n        sum(orders.tax_paid) as lifetime_tax_paid,\r\n        sum(orders.order_total) as lifetime_spend\r\n\r\n    from orders\r\n\r\n    group by 1\r\n\r\n),\r\n\r\njoined as (\r\n\r\n    select\r\n        customers.*,\r\n\r\n        customer_orders_summary.count_lifetime_orders,\r\n        customer_orders_summary.first_ordered_at,\r\n        customer_orders_summary.last_ordered_at,\r\n        customer_orders_summary.lifetime_spend_pretax,\r\n        customer_orders_summary.lifetime_tax_paid,\r\n        customer_orders_summary.lifetime_spend,\r\n\r\n        case\r\n            when customer_orders_summary.is_repeat_buyer then 'returning'\r\n            else 'new'\r\n        end as customer_type\r\n\r\n    from customers\r\n\r\n    left join customer_orders_summary\r\n        on customers.customer_id = customer_orders_summary.customer_id\r\n\r\n)\r\n\r\nselect * from joined",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                },
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_customers",
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\customers.sql",
            "compiled": true,
            "compiled_code": "with\n\ncustomers as (\n\n    select * from \"demo\".\"public\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"demo\".\"public\".\"orders\"\n\n),\n\ncustomer_orders_summary as (\n\n    select\n        orders.customer_id,\n\n        count(distinct orders.order_id) as count_lifetime_orders,\n        count(distinct orders.order_id) > 1 as is_repeat_buyer,\n        min(orders.ordered_at) as first_ordered_at,\n        max(orders.ordered_at) as last_ordered_at,\n        sum(orders.subtotal) as lifetime_spend_pretax,\n        sum(orders.tax_paid) as lifetime_tax_paid,\n        sum(orders.order_total) as lifetime_spend\n\n    from orders\n\n    group by 1\n\n),\n\njoined as (\n\n    select\n        customers.*,\n\n        customer_orders_summary.count_lifetime_orders,\n        customer_orders_summary.first_ordered_at,\n        customer_orders_summary.last_ordered_at,\n        customer_orders_summary.lifetime_spend_pretax,\n        customer_orders_summary.lifetime_tax_paid,\n        customer_orders_summary.lifetime_spend,\n\n        case\n            when customer_orders_summary.is_repeat_buyer then 'returning'\n            else 'new'\n        end as customer_type\n\n    from customers\n\n    left join customer_orders_summary\n        on customers.customer_id = customer_orders_summary.customer_id\n\n)\n\nselect * from joined",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.locations": {
            "database": "demo",
            "schema": "public",
            "name": "locations",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\locations.sql",
            "original_file_path": "models\\marts\\locations.sql",
            "unique_id": "model.jaffle_shop.locations",
            "fqn": [
                "jaffle_shop",
                "marts",
                "locations"
            ],
            "alias": "locations",
            "checksum": {
                "name": "sha256",
                "checksum": "643bb61984fb8599f9970e39107f5da0d090d3b6c4d6f3d57f51bdf7c5244ad0"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.0334105,
            "relation_name": "\"demo\".\"public\".\"locations\"",
            "raw_code": "with\r\n\r\nlocations as (\r\n\r\n    select * from {{ ref('stg_locations') }}\r\n\r\n)\r\n\r\nselect * from locations",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_locations",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_locations"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\locations.sql",
            "compiled": true,
            "compiled_code": "with\n\nlocations as (\n\n    select * from \"demo\".\"public\".\"stg_locations\"\n\n)\n\nselect * from locations",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.metricflow_time_spine": {
            "database": "demo",
            "schema": "public",
            "name": "metricflow_time_spine",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\metricflow_time_spine.sql",
            "original_file_path": "models\\marts\\metricflow_time_spine.sql",
            "unique_id": "model.jaffle_shop.metricflow_time_spine",
            "fqn": [
                "jaffle_shop",
                "marts",
                "metricflow_time_spine"
            ],
            "alias": "metricflow_time_spine",
            "checksum": {
                "name": "sha256",
                "checksum": "bb2fd0f14f2ff524e02bb9ad274d4460d35b3ae8065adb8c534c7ef67b9d68dd"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.0363762,
            "relation_name": "\"demo\".\"public\".\"metricflow_time_spine\"",
            "raw_code": "-- metricflow_time_spine.sql\r\nwith\r\n\r\ndays as (\r\n\r\n    --for BQ adapters use \"DATE('01/01/2000','mm/dd/yyyy')\"\r\n    {{ dbt_date.get_base_dates(n_dateparts=365*10, datepart=\"day\") }}\r\n\r\n),\r\n\r\ncast_to_date as (\r\n\r\n    select cast(date_day as date) as date_day\r\n\r\n    from days\r\n\r\n)\r\n\r\nselect * from cast_to_date",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates"
                ],
                "nodes": []
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\metricflow_time_spine.sql",
            "compiled": true,
            "compiled_code": "-- metricflow_time_spine.sql\nwith\n\ndays as (\n\n    --for BQ adapters use \"DATE('01/01/2000','mm/dd/yyyy')\"\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3651\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    \n\n    cast(cast(\n    cast(now() as timestamp)\n        at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp\n) as date) + ((interval '1 day') * (-3650))\n\n + ((interval '1 day') * ((row_number() over (order by 1) - 1)))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast(\n\n    cast(cast(\n    cast(now() as timestamp)\n        at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp\n) as date) + ((interval '1 day') * (1))\n\n as date)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n\n),\n\ncast_to_date as (\n\n    select cast(date_day as date) as date_day\n\n    from days\n\n)\n\nselect * from cast_to_date",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.orders": {
            "database": "demo",
            "schema": "public",
            "name": "orders",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.sql",
            "original_file_path": "models\\marts\\orders.sql",
            "unique_id": "model.jaffle_shop.orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "orders"
            ],
            "alias": "orders",
            "checksum": {
                "name": "sha256",
                "checksum": "282ee17ecdd6c0b93b395aea8503a1bf7b8f68428e0ef6f20229e2d0b45454ea"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "Order overview data mart, offering key details for each order inlcluding if it's a customer's first order and a food vs. drink item breakdown. One row per order.",
            "columns": {
                "order_id": {
                    "name": "order_id",
                    "description": "The unique key of the orders mart.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "customer_id": {
                    "name": "customer_id",
                    "description": "The foreign key relating to the customer who placed the order.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "order_total": {
                    "name": "order_total",
                    "description": "The total amount of the order in USD including tax.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "ordered_at": {
                    "name": "ordered_at",
                    "description": "The timestamp the order was placed at.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "order_cost": {
                    "name": "order_cost",
                    "description": "The sum of supply expenses to fulfill the order.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "is_food_order": {
                    "name": "is_food_order",
                    "description": "A boolean indicating if this order included any food items.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "is_drink_order": {
                    "name": "is_drink_order",
                    "description": "A boolean indicating if this order included any drink items.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\marts\\orders.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.7136033,
            "relation_name": "\"demo\".\"public\".\"orders\"",
            "raw_code": "with\r\n\r\norders as (\r\n\r\n    select * from {{ ref('stg_orders') }}\r\n\r\n),\r\n\r\norder_items as (\r\n\r\n    select * from {{ ref('order_items') }}\r\n\r\n),\r\n\r\norder_items_summary as (\r\n\r\n    select\r\n        order_id,\r\n\r\n        sum(supply_cost) as order_cost,\r\n        sum(product_price) as order_items_subtotal,\r\n        count(order_item_id) as count_order_items,\r\n        sum(\r\n            case\r\n                when is_food_item then 1\r\n                else 0\r\n            end\r\n        ) as count_food_items,\r\n        sum(\r\n            case\r\n                when is_drink_item then 1\r\n                else 0\r\n            end\r\n        ) as count_drink_items\r\n\r\n    from order_items\r\n\r\n    group by 1\r\n\r\n),\r\n\r\ncompute_booleans as (\r\n\r\n    select\r\n        orders.*,\r\n\r\n        order_items_summary.order_cost,\r\n        order_items_summary.order_items_subtotal,\r\n        order_items_summary.count_food_items,\r\n        order_items_summary.count_drink_items,\r\n        order_items_summary.count_order_items,\r\n        order_items_summary.count_food_items > 0 as is_food_order,\r\n        order_items_summary.count_drink_items > 0 as is_drink_order\r\n\r\n    from orders\r\n\r\n    left join\r\n        order_items_summary\r\n        on orders.order_id = order_items_summary.order_id\r\n\r\n),\r\n\r\ncustomer_order_count as (\r\n\r\n    select\r\n        *,\r\n\r\n        row_number() over (\r\n            partition by customer_id\r\n            order by ordered_at asc\r\n        ) as customer_order_number\r\n\r\n    from compute_booleans\r\n\r\n)\r\n\r\nselect * from customer_order_count",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_orders",
                    "model.jaffle_shop.order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\orders.sql",
            "compiled": true,
            "compiled_code": "with\n\norders as (\n\n    select * from \"demo\".\"public\".\"stg_orders\"\n\n),\n\norder_items as (\n\n    select * from \"demo\".\"public\".\"order_items\"\n\n),\n\norder_items_summary as (\n\n    select\n        order_id,\n\n        sum(supply_cost) as order_cost,\n        sum(product_price) as order_items_subtotal,\n        count(order_item_id) as count_order_items,\n        sum(\n            case\n                when is_food_item then 1\n                else 0\n            end\n        ) as count_food_items,\n        sum(\n            case\n                when is_drink_item then 1\n                else 0\n            end\n        ) as count_drink_items\n\n    from order_items\n\n    group by 1\n\n),\n\ncompute_booleans as (\n\n    select\n        orders.*,\n\n        order_items_summary.order_cost,\n        order_items_summary.order_items_subtotal,\n        order_items_summary.count_food_items,\n        order_items_summary.count_drink_items,\n        order_items_summary.count_order_items,\n        order_items_summary.count_food_items > 0 as is_food_order,\n        order_items_summary.count_drink_items > 0 as is_drink_order\n\n    from orders\n\n    left join\n        order_items_summary\n        on orders.order_id = order_items_summary.order_id\n\n),\n\ncustomer_order_count as (\n\n    select\n        *,\n\n        row_number() over (\n            partition by customer_id\n            order by ordered_at asc\n        ) as customer_order_number\n\n    from compute_booleans\n\n)\n\nselect * from customer_order_count",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.order_items": {
            "database": "demo",
            "schema": "public",
            "name": "order_items",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.sql",
            "original_file_path": "models\\marts\\order_items.sql",
            "unique_id": "model.jaffle_shop.order_items",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_items"
            ],
            "alias": "order_items",
            "checksum": {
                "name": "sha256",
                "checksum": "eaa4ad84f4e7beaf0bcc9533f5a6ac3d7211208ff601c28c9d69ec01613d16a7"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {
                "order_item_id": {
                    "name": "order_item_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "order_id": {
                    "name": "order_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\marts\\order_items.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.771635,
            "relation_name": "\"demo\".\"public\".\"order_items\"",
            "raw_code": "with\r\n\r\norder_items as (\r\n\r\n    select * from {{ ref('stg_order_items') }}\r\n\r\n),\r\n\r\n\r\norders as (\r\n\r\n    select * from {{ ref('stg_orders') }}\r\n\r\n),\r\n\r\nproducts as (\r\n\r\n    select * from {{ ref('stg_products') }}\r\n\r\n),\r\n\r\nsupplies as (\r\n\r\n    select * from {{ ref('stg_supplies') }}\r\n\r\n),\r\n\r\norder_supplies_summary as (\r\n\r\n    select\r\n        product_id,\r\n\r\n        sum(supply_cost) as supply_cost\r\n\r\n    from supplies\r\n\r\n    group by 1\r\n\r\n),\r\n\r\njoined as (\r\n\r\n    select\r\n        order_items.*,\r\n\r\n        orders.ordered_at,\r\n\r\n        products.product_name,\r\n        products.product_price,\r\n        products.is_food_item,\r\n        products.is_drink_item,\r\n\r\n        order_supplies_summary.supply_cost\r\n\r\n    from order_items\r\n\r\n    left join orders on order_items.order_id = orders.order_id\r\n\r\n    left join products on order_items.product_id = products.product_id\r\n\r\n    left join order_supplies_summary\r\n        on order_items.product_id = order_supplies_summary.product_id\r\n\r\n)\r\n\r\nselect * from joined",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_order_items",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_products",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_supplies",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_order_items",
                    "model.jaffle_shop.stg_orders",
                    "model.jaffle_shop.stg_products",
                    "model.jaffle_shop.stg_supplies"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\order_items.sql",
            "compiled": true,
            "compiled_code": "with\n\norder_items as (\n\n    select * from \"demo\".\"public\".\"stg_order_items\"\n\n),\n\n\norders as (\n\n    select * from \"demo\".\"public\".\"stg_orders\"\n\n),\n\nproducts as (\n\n    select * from \"demo\".\"public\".\"stg_products\"\n\n),\n\nsupplies as (\n\n    select * from \"demo\".\"public\".\"stg_supplies\"\n\n),\n\norder_supplies_summary as (\n\n    select\n        product_id,\n\n        sum(supply_cost) as supply_cost\n\n    from supplies\n\n    group by 1\n\n),\n\njoined as (\n\n    select\n        order_items.*,\n\n        orders.ordered_at,\n\n        products.product_name,\n        products.product_price,\n        products.is_food_item,\n        products.is_drink_item,\n\n        order_supplies_summary.supply_cost\n\n    from order_items\n\n    left join orders on order_items.order_id = orders.order_id\n\n    left join products on order_items.product_id = products.product_id\n\n    left join order_supplies_summary\n        on order_items.product_id = order_supplies_summary.product_id\n\n)\n\nselect * from joined",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.products": {
            "database": "demo",
            "schema": "public",
            "name": "products",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\products.sql",
            "original_file_path": "models\\marts\\products.sql",
            "unique_id": "model.jaffle_shop.products",
            "fqn": [
                "jaffle_shop",
                "marts",
                "products"
            ],
            "alias": "products",
            "checksum": {
                "name": "sha256",
                "checksum": "dfc48608444e645fe5027e5c01efaf491beb4732cbad202113bd5027a50d7f73"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.100038,
            "relation_name": "\"demo\".\"public\".\"products\"",
            "raw_code": "with\r\n\r\nproducts as (\r\n\r\n    select * from {{ ref('stg_products') }}\r\n\r\n)\r\n\r\nselect * from products",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_products",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_products"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\products.sql",
            "compiled": true,
            "compiled_code": "with\n\nproducts as (\n\n    select * from \"demo\".\"public\".\"stg_products\"\n\n)\n\nselect * from products",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.supplies": {
            "database": "demo",
            "schema": "public",
            "name": "supplies",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "marts\\supplies.sql",
            "original_file_path": "models\\marts\\supplies.sql",
            "unique_id": "model.jaffle_shop.supplies",
            "fqn": [
                "jaffle_shop",
                "marts",
                "supplies"
            ],
            "alias": "supplies",
            "checksum": {
                "name": "sha256",
                "checksum": "baab145cabc8a6bae7062adc17efaffa700e0ff4dbfd6d84ec64f1be53c15f82"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1722131666.1020377,
            "relation_name": "\"demo\".\"public\".\"supplies\"",
            "raw_code": "with\r\n\r\nsupplies as (\r\n\r\n    select * from {{ ref('stg_supplies') }}\r\n\r\n)\r\n\r\nselect * from supplies",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_supplies",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_supplies"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\supplies.sql",
            "compiled": true,
            "compiled_code": "with\n\nsupplies as (\n\n    select * from \"demo\".\"public\".\"stg_supplies\"\n\n)\n\nselect * from supplies",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.stg_customers": {
            "database": "demo",
            "schema": "public",
            "name": "stg_customers",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_customers.sql",
            "original_file_path": "models\\staging\\stg_customers.sql",
            "unique_id": "model.jaffle_shop.stg_customers",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_customers"
            ],
            "alias": "stg_customers",
            "checksum": {
                "name": "sha256",
                "checksum": "c0d154af6dcc1326504d92ea7a34742095d614e8ae99000aafd4f0e7f9cc0f57"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "Customer data with basic cleaning and transformation applied, one row per customer.",
            "columns": {
                "customer_id": {
                    "name": "customer_id",
                    "description": "The unique key for each customer.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\staging\\stg_customers.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1722131666.8056421,
            "relation_name": "\"demo\".\"public\".\"stg_customers\"",
            "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('ecom', 'raw_customers') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n\r\n        ----------  ids\r\n        id as customer_id,\r\n\r\n        ---------- text\r\n        name as customer_name\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "ecom",
                    "raw_customers"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.jaffle_shop.ecom.raw_customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_customers.sql",
            "compiled": true,
            "compiled_code": "with\n\nsource as (\n\n    select * from \"demo\".\"raw\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as customer_id,\n\n        ---------- text\n        name as customer_name\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.stg_locations": {
            "database": "demo",
            "schema": "public",
            "name": "stg_locations",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_locations.sql",
            "original_file_path": "models\\staging\\stg_locations.sql",
            "unique_id": "model.jaffle_shop.stg_locations",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_locations"
            ],
            "alias": "stg_locations",
            "checksum": {
                "name": "sha256",
                "checksum": "dee8d04f1426c29e8214e99589dc49513a9843ea294283e85e2583a364d365aa"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "List of open locations with basic cleaning and transformation applied, one row per location.",
            "columns": {
                "location_id": {
                    "name": "location_id",
                    "description": "The unique key for each location.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\staging\\stg_locations.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1722131666.809221,
            "relation_name": "\"demo\".\"public\".\"stg_locations\"",
            "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('ecom', 'raw_stores') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n\r\n        ----------  ids\r\n        id as location_id,\r\n\r\n        ---------- text\r\n        name as location_name,\r\n\r\n        ---------- numerics\r\n        tax_rate,\r\n\r\n        ---------- timestamps\r\n        {{ dbt.date_trunc('day', 'opened_at') }} as opened_date\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "ecom",
                    "raw_stores"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc"
                ],
                "nodes": [
                    "source.jaffle_shop.ecom.raw_stores"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_locations.sql",
            "compiled": true,
            "compiled_code": "with\n\nsource as (\n\n    select * from \"demo\".\"raw\".\"raw_stores\"\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as location_id,\n\n        ---------- text\n        name as location_name,\n\n        ---------- numerics\n        tax_rate,\n\n        ---------- timestamps\n        date_trunc('day', opened_at) as opened_date\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.stg_orders": {
            "database": "demo",
            "schema": "public",
            "name": "stg_orders",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_orders.sql",
            "original_file_path": "models\\staging\\stg_orders.sql",
            "unique_id": "model.jaffle_shop.stg_orders",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_orders"
            ],
            "alias": "stg_orders",
            "checksum": {
                "name": "sha256",
                "checksum": "ad56a86baf568a7d40c0af47f6ad7eb6556a47c590b5937b2458b64c04484060"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "Order data with basic cleaning and transformation applied, one row per order.",
            "columns": {
                "order_id": {
                    "name": "order_id",
                    "description": "The unique key for each order.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\staging\\stg_orders.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1722131666.8162198,
            "relation_name": "\"demo\".\"public\".\"stg_orders\"",
            "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('ecom', 'raw_orders') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n\r\n        ----------  ids\r\n        id as order_id,\r\n        store_id as location_id,\r\n        customer as customer_id,\r\n\r\n        ---------- numerics\r\n        subtotal as subtotal_cents,\r\n        tax_paid as tax_paid_cents,\r\n        order_total as order_total_cents,\r\n        {{ cents_to_dollars('subtotal') }} as subtotal,\r\n        {{ cents_to_dollars('tax_paid') }} as tax_paid,\r\n        {{ cents_to_dollars('order_total') }} as order_total,\r\n\r\n        ---------- timestamps\r\n        {{ dbt.date_trunc('day','ordered_at') }} as ordered_at\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "ecom",
                    "raw_orders"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.jaffle_shop.cents_to_dollars",
                    "macro.dbt.date_trunc"
                ],
                "nodes": [
                    "source.jaffle_shop.ecom.raw_orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_orders.sql",
            "compiled": true,
            "compiled_code": "with\n\nsource as (\n\n    select * from \"demo\".\"raw\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as order_id,\n        store_id as location_id,\n        customer as customer_id,\n\n        ---------- numerics\n        subtotal as subtotal_cents,\n        tax_paid as tax_paid_cents,\n        order_total as order_total_cents,\n        (subtotal::numeric(16, 2) / 100) as subtotal,\n        (tax_paid::numeric(16, 2) / 100) as tax_paid,\n        (order_total::numeric(16, 2) / 100) as order_total,\n\n        ---------- timestamps\n        date_trunc('day', ordered_at) as ordered_at\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.stg_order_items": {
            "database": "demo",
            "schema": "public",
            "name": "stg_order_items",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_order_items.sql",
            "original_file_path": "models\\staging\\stg_order_items.sql",
            "unique_id": "model.jaffle_shop.stg_order_items",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_order_items"
            ],
            "alias": "stg_order_items",
            "checksum": {
                "name": "sha256",
                "checksum": "b22592ea7abc29e2b78a490c5196939212646deda4a6c11e9ce35a460a224cec"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "Individual food and drink items that make up our orders, one row per item.",
            "columns": {
                "order_item_id": {
                    "name": "order_item_id",
                    "description": "The unique key for each order item.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "order_id": {
                    "name": "order_id",
                    "description": "The corresponding order each order item belongs to",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\staging\\stg_order_items.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1722131666.8242154,
            "relation_name": "\"demo\".\"public\".\"stg_order_items\"",
            "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('ecom', 'raw_items') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n\r\n        ----------  ids\r\n        id as order_item_id,\r\n        order_id,\r\n        sku as product_id\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "ecom",
                    "raw_items"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.jaffle_shop.ecom.raw_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_order_items.sql",
            "compiled": true,
            "compiled_code": "with\n\nsource as (\n\n    select * from \"demo\".\"raw\".\"raw_items\"\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as order_item_id,\n        order_id,\n        sku as product_id\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.stg_products": {
            "database": "demo",
            "schema": "public",
            "name": "stg_products",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_products.sql",
            "original_file_path": "models\\staging\\stg_products.sql",
            "unique_id": "model.jaffle_shop.stg_products",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_products"
            ],
            "alias": "stg_products",
            "checksum": {
                "name": "sha256",
                "checksum": "4125d22851797dcd9c25a882c4e03f7d14d31fdf8d69a0c9b54e429760569e1d"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "Product (food and drink items that can be ordered) data with basic cleaning and transformation applied, one row per product.",
            "columns": {
                "product_id": {
                    "name": "product_id",
                    "description": "The unique key for each product.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\staging\\stg_products.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1722131666.8332207,
            "relation_name": "\"demo\".\"public\".\"stg_products\"",
            "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('ecom', 'raw_products') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n\r\n        ----------  ids\r\n        sku as product_id,\r\n\r\n        ---------- text\r\n        name as product_name,\r\n        type as product_type,\r\n        description as product_description,\r\n\r\n\r\n        ---------- numerics\r\n        {{ cents_to_dollars('price') }} as product_price,\r\n\r\n        ---------- booleans\r\n        coalesce(type = 'jaffle', false) as is_food_item,\r\n\r\n        coalesce(type = 'beverage', false) as is_drink_item\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "ecom",
                    "raw_products"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.jaffle_shop.cents_to_dollars"
                ],
                "nodes": [
                    "source.jaffle_shop.ecom.raw_products"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_products.sql",
            "compiled": true,
            "compiled_code": "with\n\nsource as (\n\n    select * from \"demo\".\"raw\".\"raw_products\"\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        sku as product_id,\n\n        ---------- text\n        name as product_name,\n        type as product_type,\n        description as product_description,\n\n\n        ---------- numerics\n        (price::numeric(16, 2) / 100) as product_price,\n\n        ---------- booleans\n        coalesce(type = 'jaffle', false) as is_food_item,\n\n        coalesce(type = 'beverage', false) as is_drink_item\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.jaffle_shop.stg_supplies": {
            "database": "demo",
            "schema": "public",
            "name": "stg_supplies",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_supplies.sql",
            "original_file_path": "models\\staging\\stg_supplies.sql",
            "unique_id": "model.jaffle_shop.stg_supplies",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_supplies"
            ],
            "alias": "stg_supplies",
            "checksum": {
                "name": "sha256",
                "checksum": "63ad91903225b6f8aa694d55a90b8dd37a02dd7ed8201ce8afe7647d72a8a381"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected"
            },
            "tags": [],
            "description": "List of our supply expenses data with basic cleaning and transformation applied.\nOne row per supply cost, not per supply. As supply costs fluctuate they receive a new row with a new UUID. Thus there can be multiple rows per supply_id.\n",
            "columns": {
                "supply_uuid": {
                    "name": "supply_uuid",
                    "description": "The unique key of our supplies per cost.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models\\staging\\stg_supplies.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1722131666.8371892,
            "relation_name": "\"demo\".\"public\".\"stg_supplies\"",
            "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('ecom', 'raw_supplies') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key(['id', 'sku']) }} as supply_uuid,\r\n        id as supply_id,\r\n        sku as product_id,\r\n\r\n        ---------- text\r\n        name as supply_name,\r\n\r\n        ---------- numerics\r\n        {{ cents_to_dollars('cost') }} as supply_cost,\r\n\r\n        ---------- booleans\r\n        perishable as is_perishable_supply\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "ecom",
                    "raw_supplies"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_surrogate_key",
                    "macro.jaffle_shop.cents_to_dollars"
                ],
                "nodes": [
                    "source.jaffle_shop.ecom.raw_supplies"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_supplies.sql",
            "compiled": true,
            "compiled_code": "with\n\nsource as (\n\n    select * from \"demo\".\"raw\".\"raw_supplies\"\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        md5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sku as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as supply_uuid,\n        id as supply_id,\n        sku as product_id,\n\n        ---------- text\n        name as supply_name,\n\n        ---------- numerics\n        (cost::numeric(16, 2) / 100) as supply_cost,\n\n        ---------- booleans\n        perishable as is_perishable_supply\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "seed.jaffle_shop.raw_customers": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_customers",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_customers.csv",
            "original_file_path": "jaffle-data\\raw_customers.csv",
            "unique_id": "seed.jaffle_shop.raw_customers",
            "fqn": [
                "jaffle_shop",
                "raw_customers"
            ],
            "alias": "raw_customers",
            "checksum": {
                "name": "sha256",
                "checksum": "6826bbad709a533674214029b569b2bc05a1eda65f1d922d2085fa2f726d3955"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "schema": "raw"
            },
            "created_at": 1722131666.3111784,
            "relation_name": "\"demo\".\"raw\".\"raw_customers\"",
            "raw_code": "",
            "root_path": "C:\\Sources\\jaffle-shop",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_items": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_items",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_items.csv",
            "original_file_path": "jaffle-data\\raw_items.csv",
            "unique_id": "seed.jaffle_shop.raw_items",
            "fqn": [
                "jaffle_shop",
                "raw_items"
            ],
            "alias": "raw_items",
            "checksum": {
                "name": "path",
                "checksum": "jaffle-data\\raw_items.csv"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "schema": "raw"
            },
            "created_at": 1722131666.3132088,
            "relation_name": "\"demo\".\"raw\".\"raw_items\"",
            "raw_code": "",
            "root_path": "C:\\Sources\\jaffle-shop",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_orders": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_orders",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_orders.csv",
            "original_file_path": "jaffle-data\\raw_orders.csv",
            "unique_id": "seed.jaffle_shop.raw_orders",
            "fqn": [
                "jaffle_shop",
                "raw_orders"
            ],
            "alias": "raw_orders",
            "checksum": {
                "name": "path",
                "checksum": "jaffle-data\\raw_orders.csv"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "schema": "raw"
            },
            "created_at": 1722131666.3151774,
            "relation_name": "\"demo\".\"raw\".\"raw_orders\"",
            "raw_code": "",
            "root_path": "C:\\Sources\\jaffle-shop",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_products": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_products",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_products.csv",
            "original_file_path": "jaffle-data\\raw_products.csv",
            "unique_id": "seed.jaffle_shop.raw_products",
            "fqn": [
                "jaffle_shop",
                "raw_products"
            ],
            "alias": "raw_products",
            "checksum": {
                "name": "sha256",
                "checksum": "a272e2f54aea0708c26ea3d8fb0cc6062196b68c8e47ab6197426c7cd3f841d8"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "schema": "raw"
            },
            "created_at": 1722131666.317198,
            "relation_name": "\"demo\".\"raw\".\"raw_products\"",
            "raw_code": "",
            "root_path": "C:\\Sources\\jaffle-shop",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_stores": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_stores",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_stores.csv",
            "original_file_path": "jaffle-data\\raw_stores.csv",
            "unique_id": "seed.jaffle_shop.raw_stores",
            "fqn": [
                "jaffle_shop",
                "raw_stores"
            ],
            "alias": "raw_stores",
            "checksum": {
                "name": "sha256",
                "checksum": "7700a6d24e6066adeba05bd95fb53011d149ca7419ae1f20e1bbbe9df8641589"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "schema": "raw"
            },
            "created_at": 1722131666.319204,
            "relation_name": "\"demo\".\"raw\".\"raw_stores\"",
            "raw_code": "",
            "root_path": "C:\\Sources\\jaffle-shop",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_supplies": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_supplies",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_supplies.csv",
            "original_file_path": "jaffle-data\\raw_supplies.csv",
            "unique_id": "seed.jaffle_shop.raw_supplies",
            "fqn": [
                "jaffle_shop",
                "raw_supplies"
            ],
            "alias": "raw_supplies",
            "checksum": {
                "name": "sha256",
                "checksum": "da4dedefd0350e023054c208a20bda46ecc4b39e037b42be2ed4c39ed19ddf2d"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "schema": "raw"
            },
            "created_at": 1722131666.3221803,
            "relation_name": "\"demo\".\"raw\".\"raw_supplies\"",
            "raw_code": "",
            "root_path": "C:\\Sources\\jaffle-shop",
            "depends_on": {
                "macros": []
            }
        },
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_customers_customer_id.sql",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d",
            "fqn": [
                "jaffle_shop",
                "marts",
                "not_null_customers_customer_id"
            ],
            "alias": "not_null_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.520588,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\customers.yml\\not_null_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"demo\".\"public\".\"customers\"\nwhere customer_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.customers",
            "attached_node": "model.jaffle_shop.customers",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": {
            "database": "demo",
            "schema": "public",
            "name": "unique_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_customers_customer_id.sql",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1",
            "fqn": [
                "jaffle_shop",
                "marts",
                "unique_customers_customer_id"
            ],
            "alias": "unique_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.5215921,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\customers.yml\\unique_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.customers",
            "attached_node": "model.jaffle_shop.customers",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.accepted_values_customers_customer_type__new__returning.d12f0947c8": {
            "database": "demo",
            "schema": "public",
            "name": "accepted_values_customers_customer_type__new__returning",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "accepted_values_customers_customer_type__new__returning.sql",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "test.jaffle_shop.accepted_values_customers_customer_type__new__returning.d12f0947c8",
            "fqn": [
                "jaffle_shop",
                "marts",
                "accepted_values_customers_customer_type__new__returning"
            ],
            "alias": "accepted_values_customers_customer_type__new__returning",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.5235882,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\customers.yml\\accepted_values_customers_customer_type__new__returning.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_type as value_field,\n        count(*) as n_records\n\n    from \"demo\".\"public\".\"customers\"\n    group by customer_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'new','returning'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_type",
            "file_key_name": "models.customers",
            "attached_node": "model.jaffle_shop.customers",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "new",
                        "returning"
                    ],
                    "column_name": "customer_type",
                    "model": "{{ get_where_subquery(ref('customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend.ad37c989b6": {
            "database": "demo",
            "schema": "public",
            "name": "dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "dbt_utils_expression_is_true_c_177c20685a18a9071d4a71719e3d9565.sql",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "test.jaffle_shop.dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend.ad37c989b6",
            "fqn": [
                "jaffle_shop",
                "marts",
                "dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend"
            ],
            "alias": "dbt_utils_expression_is_true_c_177c20685a18a9071d4a71719e3d9565",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_c_177c20685a18a9071d4a71719e3d9565",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_c_177c20685a18a9071d4a71719e3d9565"
            },
            "created_at": 1722131666.5425882,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_c_177c20685a18a9071d4a71719e3d9565\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\customers.yml\\dbt_utils_expression_is_true_c_177c20685a18a9071d4a71719e3d9565.sql",
            "compiled": true,
            "compiled_code": "\n\n\n\nselect\n    1\nfrom \"demo\".\"public\".\"customers\"\n\nwhere not(lifetime_spend_pretax + lifetime_tax_paid = lifetime_spend)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.customers",
            "attached_node": "model.jaffle_shop.customers",
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "lifetime_spend_pretax + lifetime_tax_paid = lifetime_spend",
                    "model": "{{ get_where_subquery(ref('customers')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_order_id.sql",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed",
            "fqn": [
                "jaffle_shop",
                "marts",
                "not_null_orders_order_id"
            ],
            "alias": "not_null_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.7146034,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\orders.yml\\not_null_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"demo\".\"public\".\"orders\"\nwhere order_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": {
            "database": "demo",
            "schema": "public",
            "name": "unique_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_orders_order_id.sql",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e",
            "fqn": [
                "jaffle_shop",
                "marts",
                "unique_orders_order_id"
            ],
            "alias": "unique_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.716603,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\orders.yml\\unique_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_stg_customers_.918495ce16": {
            "database": "demo",
            "schema": "public",
            "name": "relationships_orders_customer_id__customer_id__ref_stg_customers_",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "relationships_orders_0389c224a99a98c0b58aedb753f052f0.sql",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_stg_customers_.918495ce16",
            "fqn": [
                "jaffle_shop",
                "marts",
                "relationships_orders_customer_id__customer_id__ref_stg_customers_"
            ],
            "alias": "relationships_orders_0389c224a99a98c0b58aedb753f052f0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_orders_0389c224a99a98c0b58aedb753f052f0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "relationships_orders_0389c224a99a98c0b58aedb753f052f0"
            },
            "created_at": 1722131666.7176034,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_orders_0389c224a99a98c0b58aedb753f052f0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                },
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers",
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\orders.yml\\relationships_orders_0389c224a99a98c0b58aedb753f052f0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"demo\".\"public\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"demo\".\"public\".\"stg_customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('stg_customers')",
                    "field": "customer_id",
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal.b1416e07ec": {
            "database": "demo",
            "schema": "public",
            "name": "dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "dbt_utils_expression_is_true_o_c0acd0b625f5605c61af04356663a823.sql",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal.b1416e07ec",
            "fqn": [
                "jaffle_shop",
                "marts",
                "dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal"
            ],
            "alias": "dbt_utils_expression_is_true_o_c0acd0b625f5605c61af04356663a823",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_o_c0acd0b625f5605c61af04356663a823",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_o_c0acd0b625f5605c61af04356663a823"
            },
            "created_at": 1722131666.7246034,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_o_c0acd0b625f5605c61af04356663a823\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\orders.yml\\dbt_utils_expression_is_true_o_c0acd0b625f5605c61af04356663a823.sql",
            "compiled": true,
            "compiled_code": "\n\n\n\nselect\n    1\nfrom \"demo\".\"public\".\"orders\"\n\nwhere not(order_items_subtotal = subtotal)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "order_items_subtotal = subtotal",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid.2aba85df92": {
            "database": "demo",
            "schema": "public",
            "name": "dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "dbt_utils_expression_is_true_o_bf2cfee53d5bb32a0a918086ae35fff9.sql",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid.2aba85df92",
            "fqn": [
                "jaffle_shop",
                "marts",
                "dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid"
            ],
            "alias": "dbt_utils_expression_is_true_o_bf2cfee53d5bb32a0a918086ae35fff9",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_o_bf2cfee53d5bb32a0a918086ae35fff9",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_o_bf2cfee53d5bb32a0a918086ae35fff9"
            },
            "created_at": 1722131666.7296352,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_o_bf2cfee53d5bb32a0a918086ae35fff9\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\orders.yml\\dbt_utils_expression_is_true_o_bf2cfee53d5bb32a0a918086ae35fff9.sql",
            "compiled": true,
            "compiled_code": "\n\n\n\nselect\n    1\nfrom \"demo\".\"public\".\"orders\"\n\nwhere not(order_total = subtotal + tax_paid)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "order_total = subtotal + tax_paid",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.jaffle_shop.not_null_order_items_order_item_id.c6fda366bd": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_order_items_order_item_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_order_items_order_item_id.sql",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "test.jaffle_shop.not_null_order_items_order_item_id.c6fda366bd",
            "fqn": [
                "jaffle_shop",
                "marts",
                "not_null_order_items_order_item_id"
            ],
            "alias": "not_null_order_items_order_item_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.7726395,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\order_items.yml\\not_null_order_items_order_item_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"demo\".\"public\".\"order_items\"\nwhere order_item_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_item_id",
            "file_key_name": "models.order_items",
            "attached_node": "model.jaffle_shop.order_items",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_item_id",
                    "model": "{{ get_where_subquery(ref('order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_order_items_order_item_id.7d0a7e900a": {
            "database": "demo",
            "schema": "public",
            "name": "unique_order_items_order_item_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_order_items_order_item_id.sql",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "test.jaffle_shop.unique_order_items_order_item_id.7d0a7e900a",
            "fqn": [
                "jaffle_shop",
                "marts",
                "unique_order_items_order_item_id"
            ],
            "alias": "unique_order_items_order_item_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.774635,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\order_items.yml\\unique_order_items_order_item_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_item_id",
            "file_key_name": "models.order_items",
            "attached_node": "model.jaffle_shop.order_items",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "order_item_id",
                    "model": "{{ get_where_subquery(ref('order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.relationships_order_items_order_id__order_id__ref_orders_.a799023ee8": {
            "database": "demo",
            "schema": "public",
            "name": "relationships_order_items_order_id__order_id__ref_orders_",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "relationships_order_items_order_id__order_id__ref_orders_.sql",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "test.jaffle_shop.relationships_order_items_order_id__order_id__ref_orders_.a799023ee8",
            "fqn": [
                "jaffle_shop",
                "marts",
                "relationships_order_items_order_id__order_id__ref_orders_"
            ],
            "alias": "relationships_order_items_order_id__order_id__ref_orders_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.7756324,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders",
                    "model.jaffle_shop.order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\marts\\order_items.yml\\relationships_order_items_order_id__order_id__ref_orders_.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from \"demo\".\"public\".\"order_items\"\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from \"demo\".\"public\".\"orders\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.order_items",
            "attached_node": "model.jaffle_shop.order_items",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('orders')",
                    "field": "order_id",
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_customers_customer_id.sql",
            "original_file_path": "models\\staging\\stg_customers.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_customers_customer_id"
            ],
            "alias": "not_null_stg_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.806183,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_customers.yml\\not_null_stg_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"demo\".\"public\".\"stg_customers\"\nwhere customer_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.stg_customers",
            "attached_node": "model.jaffle_shop.stg_customers",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('stg_customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": {
            "database": "demo",
            "schema": "public",
            "name": "unique_stg_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_customers_customer_id.sql",
            "original_file_path": "models\\staging\\stg_customers.yml",
            "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_customers_customer_id"
            ],
            "alias": "unique_stg_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8082156,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_customers.yml\\unique_stg_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.stg_customers",
            "attached_node": "model.jaffle_shop.stg_customers",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('stg_customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_locations_location_id.3d237927d2": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_locations_location_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_locations_location_id.sql",
            "original_file_path": "models\\staging\\stg_locations.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_locations_location_id.3d237927d2",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_locations_location_id"
            ],
            "alias": "not_null_stg_locations_location_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8102202,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_locations",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_locations"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_locations.yml\\not_null_stg_locations_location_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"demo\".\"public\".\"stg_locations\"\nwhere location_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "location_id",
            "file_key_name": "models.stg_locations",
            "attached_node": "model.jaffle_shop.stg_locations",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "location_id",
                    "model": "{{ get_where_subquery(ref('stg_locations')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_locations_location_id.2e2fc58ecc": {
            "database": "demo",
            "schema": "public",
            "name": "unique_stg_locations_location_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_locations_location_id.sql",
            "original_file_path": "models\\staging\\stg_locations.yml",
            "unique_id": "test.jaffle_shop.unique_stg_locations_location_id.2e2fc58ecc",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_locations_location_id"
            ],
            "alias": "unique_stg_locations_location_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8111904,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_locations",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_locations"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_locations.yml\\unique_stg_locations_location_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"stg_locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "location_id",
            "file_key_name": "models.stg_locations",
            "attached_node": "model.jaffle_shop.stg_locations",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "location_id",
                    "model": "{{ get_where_subquery(ref('stg_locations')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_orders_order_id.sql",
            "original_file_path": "models\\staging\\stg_orders.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_orders_order_id"
            ],
            "alias": "not_null_stg_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8162198,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_orders.yml\\not_null_stg_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"demo\".\"public\".\"stg_orders\"\nwhere order_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.stg_orders",
            "attached_node": "model.jaffle_shop.stg_orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": {
            "database": "demo",
            "schema": "public",
            "name": "unique_stg_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_orders_order_id.sql",
            "original_file_path": "models\\staging\\stg_orders.yml",
            "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_orders_order_id"
            ],
            "alias": "unique_stg_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8182201,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_orders.yml\\unique_stg_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.stg_orders",
            "attached_node": "model.jaffle_shop.stg_orders",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal.bfb885d7fc": {
            "database": "demo",
            "schema": "public",
            "name": "dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "dbt_utils_expression_is_true_s_fc9f3efa92425b23fb62ee5a96c17e3f.sql",
            "original_file_path": "models\\staging\\stg_orders.yml",
            "unique_id": "test.jaffle_shop.dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal.bfb885d7fc",
            "fqn": [
                "jaffle_shop",
                "staging",
                "dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal"
            ],
            "alias": "dbt_utils_expression_is_true_s_fc9f3efa92425b23fb62ee5a96c17e3f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_s_fc9f3efa92425b23fb62ee5a96c17e3f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "dbt_utils_expression_is_true_s_fc9f3efa92425b23fb62ee5a96c17e3f"
            },
            "created_at": 1722131666.8192203,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_fc9f3efa92425b23fb62ee5a96c17e3f\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_expression_is_true",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_orders.yml\\dbt_utils_expression_is_true_s_fc9f3efa92425b23fb62ee5a96c17e3f.sql",
            "compiled": true,
            "compiled_code": "\n\n\n\nselect\n    1\nfrom \"demo\".\"public\".\"stg_orders\"\n\nwhere not(order_total - tax_paid = subtotal)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.stg_orders",
            "attached_node": "model.jaffle_shop.stg_orders",
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "order_total - tax_paid = subtotal",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.jaffle_shop.not_null_stg_order_items_order_item_id.26a7e2bc35": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_order_items_order_item_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_order_items_order_item_id.sql",
            "original_file_path": "models\\staging\\stg_order_items.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_order_items_order_item_id.26a7e2bc35",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_order_items_order_item_id"
            ],
            "alias": "not_null_stg_order_items_order_item_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8252206,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_order_items.yml\\not_null_stg_order_items_order_item_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"demo\".\"public\".\"stg_order_items\"\nwhere order_item_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_item_id",
            "file_key_name": "models.stg_order_items",
            "attached_node": "model.jaffle_shop.stg_order_items",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_item_id",
                    "model": "{{ get_where_subquery(ref('stg_order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_order_items_order_item_id.90e333a108": {
            "database": "demo",
            "schema": "public",
            "name": "unique_stg_order_items_order_item_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_order_items_order_item_id.sql",
            "original_file_path": "models\\staging\\stg_order_items.yml",
            "unique_id": "test.jaffle_shop.unique_stg_order_items_order_item_id.90e333a108",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_order_items_order_item_id"
            ],
            "alias": "unique_stg_order_items_order_item_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8262198,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_order_items.yml\\unique_stg_order_items_order_item_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"stg_order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_item_id",
            "file_key_name": "models.stg_order_items",
            "attached_node": "model.jaffle_shop.stg_order_items",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "order_item_id",
                    "model": "{{ get_where_subquery(ref('stg_order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_order_items_order_id.2063801f96": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_order_items_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_order_items_order_id.sql",
            "original_file_path": "models\\staging\\stg_order_items.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_order_items_order_id.2063801f96",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_order_items_order_id"
            ],
            "alias": "not_null_stg_order_items_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8282156,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_order_items.yml\\not_null_stg_order_items_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"demo\".\"public\".\"stg_order_items\"\nwhere order_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.stg_order_items",
            "attached_node": "model.jaffle_shop.stg_order_items",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54": {
            "database": "demo",
            "schema": "public",
            "name": "relationships_stg_order_items_order_id__order_id__ref_stg_orders_",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "relationships_stg_order_items_b3d7cdbd08ebfad01e3226c01c10bba0.sql",
            "original_file_path": "models\\staging\\stg_order_items.yml",
            "unique_id": "test.jaffle_shop.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54",
            "fqn": [
                "jaffle_shop",
                "staging",
                "relationships_stg_order_items_order_id__order_id__ref_stg_orders_"
            ],
            "alias": "relationships_stg_order_items_b3d7cdbd08ebfad01e3226c01c10bba0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_stg_order_items_b3d7cdbd08ebfad01e3226c01c10bba0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "relationships_stg_order_items_b3d7cdbd08ebfad01e3226c01c10bba0"
            },
            "created_at": 1722131666.829222,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_order_items_b3d7cdbd08ebfad01e3226c01c10bba0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_order_items",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders",
                    "model.jaffle_shop.stg_order_items"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_order_items.yml\\relationships_stg_order_items_b3d7cdbd08ebfad01e3226c01c10bba0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from \"demo\".\"public\".\"stg_order_items\"\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from \"demo\".\"public\".\"stg_orders\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.stg_order_items",
            "attached_node": "model.jaffle_shop.stg_order_items",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('stg_orders')",
                    "field": "order_id",
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_order_items')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_products_product_id.6373b0acf3": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_products_product_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_products_product_id.sql",
            "original_file_path": "models\\staging\\stg_products.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_products_product_id.6373b0acf3",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_products_product_id"
            ],
            "alias": "not_null_stg_products_product_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.834224,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_products",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_products"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_products.yml\\not_null_stg_products_product_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"demo\".\"public\".\"stg_products\"\nwhere product_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "product_id",
            "file_key_name": "models.stg_products",
            "attached_node": "model.jaffle_shop.stg_products",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "product_id",
                    "model": "{{ get_where_subquery(ref('stg_products')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_products_product_id.7d950a1467": {
            "database": "demo",
            "schema": "public",
            "name": "unique_stg_products_product_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_products_product_id.sql",
            "original_file_path": "models\\staging\\stg_products.yml",
            "unique_id": "test.jaffle_shop.unique_stg_products_product_id.7d950a1467",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_products_product_id"
            ],
            "alias": "unique_stg_products_product_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8352203,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_products",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_products"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_products.yml\\unique_stg_products_product_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"stg_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "product_id",
            "file_key_name": "models.stg_products",
            "attached_node": "model.jaffle_shop.stg_products",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "product_id",
                    "model": "{{ get_where_subquery(ref('stg_products')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_supplies_supply_uuid.515c6eda6d": {
            "database": "demo",
            "schema": "public",
            "name": "not_null_stg_supplies_supply_uuid",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_supplies_supply_uuid.sql",
            "original_file_path": "models\\staging\\stg_supplies.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_supplies_supply_uuid.515c6eda6d",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_supplies_supply_uuid"
            ],
            "alias": "not_null_stg_supplies_supply_uuid",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8371892,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_supplies",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_supplies"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_supplies.yml\\not_null_stg_supplies_supply_uuid.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect supply_uuid\nfrom \"demo\".\"public\".\"stg_supplies\"\nwhere supply_uuid is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "supply_uuid",
            "file_key_name": "models.stg_supplies",
            "attached_node": "model.jaffle_shop.stg_supplies",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "supply_uuid",
                    "model": "{{ get_where_subquery(ref('stg_supplies')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_supplies_supply_uuid.c9e3edcfed": {
            "database": "demo",
            "schema": "public",
            "name": "unique_stg_supplies_supply_uuid",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_supplies_supply_uuid.sql",
            "original_file_path": "models\\staging\\stg_supplies.yml",
            "unique_id": "test.jaffle_shop.unique_stg_supplies_supply_uuid.c9e3edcfed",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_supplies_supply_uuid"
            ],
            "alias": "unique_stg_supplies_supply_uuid",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1722131666.8391879,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_supplies",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_supplies"
                ]
            },
            "compiled_path": "target\\compiled\\jaffle_shop\\models\\staging\\stg_supplies.yml\\unique_stg_supplies_supply_uuid.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    supply_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"demo\".\"public\".\"stg_supplies\"\nwhere supply_uuid is not null\ngroup by supply_uuid\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "supply_uuid",
            "file_key_name": "models.stg_supplies",
            "attached_node": "model.jaffle_shop.stg_supplies",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "supply_uuid",
                    "model": "{{ get_where_subquery(ref('stg_supplies')) }}"
                },
                "namespace": null
            }
        }
    },
    "sources": {
        "source.jaffle_shop.ecom.raw_customers": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_customers",
            "resource_type": "source",
            "package_name": "jaffle_shop",
            "path": "models\\staging\\__sources.yml",
            "original_file_path": "models\\staging\\__sources.yml",
            "unique_id": "source.jaffle_shop.ecom.raw_customers",
            "fqn": [
                "jaffle_shop",
                "staging",
                "ecom",
                "raw_customers"
            ],
            "source_name": "ecom",
            "source_description": "E-commerce data for the Jaffle Shop",
            "loader": "",
            "identifier": "raw_customers",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": 24,
                    "period": "hour"
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "One record per person who has purchased one or more items",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"demo\".\"raw\".\"raw_customers\"",
            "created_at": 1722131666.9187613
        },
        "source.jaffle_shop.ecom.raw_orders": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_orders",
            "resource_type": "source",
            "package_name": "jaffle_shop",
            "path": "models\\staging\\__sources.yml",
            "original_file_path": "models\\staging\\__sources.yml",
            "unique_id": "source.jaffle_shop.ecom.raw_orders",
            "fqn": [
                "jaffle_shop",
                "staging",
                "ecom",
                "raw_orders"
            ],
            "source_name": "ecom",
            "source_description": "E-commerce data for the Jaffle Shop",
            "loader": "",
            "identifier": "raw_orders",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "ordered_at",
            "freshness": {
                "warn_after": {
                    "count": 24,
                    "period": "hour"
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "One record per order (consisting of one or more order items)",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"demo\".\"raw\".\"raw_orders\"",
            "created_at": 1722131666.9207606
        },
        "source.jaffle_shop.ecom.raw_items": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_items",
            "resource_type": "source",
            "package_name": "jaffle_shop",
            "path": "models\\staging\\__sources.yml",
            "original_file_path": "models\\staging\\__sources.yml",
            "unique_id": "source.jaffle_shop.ecom.raw_items",
            "fqn": [
                "jaffle_shop",
                "staging",
                "ecom",
                "raw_items"
            ],
            "source_name": "ecom",
            "source_description": "E-commerce data for the Jaffle Shop",
            "loader": "",
            "identifier": "raw_items",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": 24,
                    "period": "hour"
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Items included in an order",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"demo\".\"raw\".\"raw_items\"",
            "created_at": 1722131666.9217634
        },
        "source.jaffle_shop.ecom.raw_stores": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_stores",
            "resource_type": "source",
            "package_name": "jaffle_shop",
            "path": "models\\staging\\__sources.yml",
            "original_file_path": "models\\staging\\__sources.yml",
            "unique_id": "source.jaffle_shop.ecom.raw_stores",
            "fqn": [
                "jaffle_shop",
                "staging",
                "ecom",
                "raw_stores"
            ],
            "source_name": "ecom",
            "source_description": "E-commerce data for the Jaffle Shop",
            "loader": "",
            "identifier": "raw_stores",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "opened_at",
            "freshness": {
                "warn_after": {
                    "count": 24,
                    "period": "hour"
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"demo\".\"raw\".\"raw_stores\"",
            "created_at": 1722131666.9227302
        },
        "source.jaffle_shop.ecom.raw_products": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_products",
            "resource_type": "source",
            "package_name": "jaffle_shop",
            "path": "models\\staging\\__sources.yml",
            "original_file_path": "models\\staging\\__sources.yml",
            "unique_id": "source.jaffle_shop.ecom.raw_products",
            "fqn": [
                "jaffle_shop",
                "staging",
                "ecom",
                "raw_products"
            ],
            "source_name": "ecom",
            "source_description": "E-commerce data for the Jaffle Shop",
            "loader": "",
            "identifier": "raw_products",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": 24,
                    "period": "hour"
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "One record per SKU for items sold in stores",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"demo\".\"raw\".\"raw_products\"",
            "created_at": 1722131666.9227302
        },
        "source.jaffle_shop.ecom.raw_supplies": {
            "database": "demo",
            "schema": "raw",
            "name": "raw_supplies",
            "resource_type": "source",
            "package_name": "jaffle_shop",
            "path": "models\\staging\\__sources.yml",
            "original_file_path": "models\\staging\\__sources.yml",
            "unique_id": "source.jaffle_shop.ecom.raw_supplies",
            "fqn": [
                "jaffle_shop",
                "staging",
                "ecom",
                "raw_supplies"
            ],
            "source_name": "ecom",
            "source_description": "E-commerce data for the Jaffle Shop",
            "loader": "",
            "identifier": "raw_supplies",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": 24,
                    "period": "hour"
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "One record per supply per SKU of items sold in stores",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"demo\".\"raw\".\"raw_supplies\"",
            "created_at": 1722131666.9237633
        }
    },
    "macros": {
        "macro.jaffle_shop.cents_to_dollars": {
            "name": "cents_to_dollars",
            "resource_type": "macro",
            "package_name": "jaffle_shop",
            "path": "macros\\cents_to_dollars.sql",
            "original_file_path": "macros\\cents_to_dollars.sql",
            "unique_id": "macro.jaffle_shop.cents_to_dollars",
            "macro_sql": "{% macro cents_to_dollars(column_name) -%}\r\n    {{ return(adapter.dispatch('cents_to_dollars')(column_name)) }}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.jaffle_shop.postgres__cents_to_dollars"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.736028,
            "supported_languages": null
        },
        "macro.jaffle_shop.default__cents_to_dollars": {
            "name": "default__cents_to_dollars",
            "resource_type": "macro",
            "package_name": "jaffle_shop",
            "path": "macros\\cents_to_dollars.sql",
            "original_file_path": "macros\\cents_to_dollars.sql",
            "unique_id": "macro.jaffle_shop.default__cents_to_dollars",
            "macro_sql": "{% macro default__cents_to_dollars(column_name) -%}\r\n    ({{ column_name }} / 100)::numeric(16, 2)\r\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.736028,
            "supported_languages": null
        },
        "macro.jaffle_shop.postgres__cents_to_dollars": {
            "name": "postgres__cents_to_dollars",
            "resource_type": "macro",
            "package_name": "jaffle_shop",
            "path": "macros\\cents_to_dollars.sql",
            "original_file_path": "macros\\cents_to_dollars.sql",
            "unique_id": "macro.jaffle_shop.postgres__cents_to_dollars",
            "macro_sql": "{% macro postgres__cents_to_dollars(column_name) -%}\r\n    ({{ column_name }}::numeric(16, 2) / 100)\r\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7370312,
            "supported_languages": null
        },
        "macro.jaffle_shop.bigquery__cents_to_dollars": {
            "name": "bigquery__cents_to_dollars",
            "resource_type": "macro",
            "package_name": "jaffle_shop",
            "path": "macros\\cents_to_dollars.sql",
            "original_file_path": "macros\\cents_to_dollars.sql",
            "unique_id": "macro.jaffle_shop.bigquery__cents_to_dollars",
            "macro_sql": "{% macro bigquery__cents_to_dollars(column_name) %}\r\n    round(cast(({{ column_name }} / 100) as numeric), 2)\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7370312,
            "supported_languages": null
        },
        "macro.jaffle_shop.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "jaffle_shop",
            "path": "macros\\generate_schema_name.sql",
            "original_file_path": "macros\\generate_schema_name.sql",
            "unique_id": "macro.jaffle_shop.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) %}\r\n\r\n    {% set default_schema = target.schema %}\r\n\r\n    {# seeds go in a global `raw` schema #}\r\n    {% if node.resource_type == 'seed' %}\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {# non-specified schemas go to the default target schema #}\r\n    {% elif custom_schema_name is none %}\r\n        {{ default_schema }}\r\n\r\n\r\n    {# specified custom schema names go to the schema name prepended with the the default schema name in prod (as this is an example project we want the schemas clearly labeled) #}\r\n    {% elif target.name == 'prod' %}\r\n        {{ default_schema }}_{{ custom_schema_name | trim }}\r\n\r\n    {# specified custom schemas go to the default target schema for non-prod targets #}\r\n    {% else %}\r\n        {{ default_schema }}\r\n    {% endif %}\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7380283,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__create_table_as": {
            "name": "postgres__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__create_table_as",
            "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.default__get_column_names",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.75103,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_create_index_sql": {
            "name": "postgres__get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql",
            "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7520273,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__create_schema": {
            "name": "postgres__create_schema",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__create_schema",
            "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.753031,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_schema": {
            "name": "postgres__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_schema",
            "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.753031,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_columns_in_relation": {
            "name": "postgres__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation",
            "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7540276,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__list_relations_without_caching": {
            "name": "postgres__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching",
            "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7550282,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__information_schema_name": {
            "name": "postgres__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__information_schema_name",
            "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7550282,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__list_schemas": {
            "name": "postgres__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__list_schemas",
            "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7550282,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__check_schema_exists": {
            "name": "postgres__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__check_schema_exists",
            "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7560022,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_relation_with_suffix": {
            "name": "postgres__make_relation_with_suffix",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix",
            "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7570276,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_intermediate_relation": {
            "name": "postgres__make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation",
            "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_relation_with_suffix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7580283,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_temp_relation": {
            "name": "postgres__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_temp_relation",
            "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_relation_with_suffix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7580283,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_backup_relation": {
            "name": "postgres__make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_backup_relation",
            "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_relation_with_suffix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7590275,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres_escape_comment": {
            "name": "postgres_escape_comment",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres_escape_comment",
            "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7590275,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__alter_relation_comment": {
            "name": "postgres__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment",
            "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7600281,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__alter_column_comment": {
            "name": "postgres__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__alter_column_comment",
            "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.761027,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_show_grant_sql": {
            "name": "postgres__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql",
            "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.761027,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__copy_grants": {
            "name": "postgres__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__copy_grants",
            "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.761027,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_show_indexes_sql": {
            "name": "postgres__get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql",
            "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7620277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_drop_index_sql": {
            "name": "postgres__get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql",
            "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7620277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_catalog_relations": {
            "name": "postgres__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\catalog.sql",
            "original_file_path": "macros\\catalog.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations",
            "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7640338,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_catalog": {
            "name": "postgres__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\catalog.sql",
            "original_file_path": "macros\\catalog.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_catalog",
            "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_catalog_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7650278,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_relations": {
            "name": "postgres__get_relations",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations.sql",
            "original_file_path": "macros\\relations.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_relations",
            "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7660277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres_get_relations": {
            "name": "postgres_get_relations",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations.sql",
            "original_file_path": "macros\\relations.sql",
            "unique_id": "macro.dbt_postgres.postgres_get_relations",
            "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7660277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp": {
            "name": "postgres__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\timestamps.sql",
            "original_file_path": "macros\\timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp",
            "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7660277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_string_as_time": {
            "name": "postgres__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\timestamps.sql",
            "original_file_path": "macros\\timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time",
            "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.767001,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_get_time": {
            "name": "postgres__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\timestamps.sql",
            "original_file_path": "macros\\timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time",
            "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.767001,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp_backcompat": {
            "name": "postgres__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\timestamps.sql",
            "original_file_path": "macros\\timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat",
            "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.767001,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {
            "name": "postgres__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\timestamps.sql",
            "original_file_path": "macros\\timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.767001,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_incremental_default_sql": {
            "name": "postgres__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\materializations\\incremental_strategies.sql",
            "original_file_path": "macros\\materializations\\incremental_strategies.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql",
            "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_delete_insert_sql",
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7680283,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_merge_sql": {
            "name": "postgres__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\materializations\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshot_merge.sql",
            "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql",
            "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7690275,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {
            "name": "postgres__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_sql",
                    "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7700272,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {
            "name": "postgres__update_indexes_on_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view",
            "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_drop_index_sql",
                    "macro.dbt_postgres.postgres__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.77103,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {
            "name": "postgres__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__describe_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7720275,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {
            "name": "postgres__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\create.sql",
            "original_file_path": "macros\\relations\\materialized_view\\create.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.773028,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__describe_materialized_view": {
            "name": "postgres__describe_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\describe.sql",
            "original_file_path": "macros\\relations\\materialized_view\\describe.sql",
            "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view",
            "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_indexes_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.773028,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_materialized_view": {
            "name": "postgres__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\drop.sql",
            "original_file_path": "macros\\relations\\materialized_view\\drop.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view",
            "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.773028,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__refresh_materialized_view": {
            "name": "postgres__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\refresh.sql",
            "original_file_path": "macros\\relations\\materialized_view\\refresh.sql",
            "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view",
            "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7740273,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {
            "name": "postgres__get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\materialized_view\\rename.sql",
            "original_file_path": "macros\\relations\\materialized_view\\rename.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql",
            "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7740273,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_table": {
            "name": "postgres__drop_table",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\table\\drop.sql",
            "original_file_path": "macros\\relations\\table\\drop.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_table",
            "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7740273,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_rename_table_sql": {
            "name": "postgres__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\table\\rename.sql",
            "original_file_path": "macros\\relations\\table\\rename.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql",
            "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7740273,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_replace_table_sql": {
            "name": "postgres__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\table\\replace.sql",
            "original_file_path": "macros\\relations\\table\\replace.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql",
            "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.776028,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_view": {
            "name": "postgres__drop_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\view\\drop.sql",
            "original_file_path": "macros\\relations\\view\\drop.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_view",
            "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.776028,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_rename_view_sql": {
            "name": "postgres__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\view\\rename.sql",
            "original_file_path": "macros\\relations\\view\\rename.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql",
            "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.776028,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_replace_view_sql": {
            "name": "postgres__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\relations\\view\\replace.sql",
            "original_file_path": "macros\\relations\\view\\replace.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql",
            "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7770329,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__any_value": {
            "name": "postgres__any_value",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "unique_id": "macro.dbt_postgres.postgres__any_value",
            "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7770329,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__dateadd": {
            "name": "postgres__dateadd",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "unique_id": "macro.dbt_postgres.postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7780335,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__datediff": {
            "name": "postgres__datediff",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "unique_id": "macro.dbt_postgres.postgres__datediff",
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7820277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__last_day": {
            "name": "postgres__last_day",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "unique_id": "macro.dbt_postgres.postgres__last_day",
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc",
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7830272,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__listagg": {
            "name": "postgres__listagg",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "unique_id": "macro.dbt_postgres.postgres__listagg",
            "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7840326,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__split_part": {
            "name": "postgres__split_part",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "unique_id": "macro.dbt_postgres.postgres__split_part",
            "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__split_part",
                    "macro.dbt._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7850358,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "name": "copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.78703,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "name": "default__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.78703,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "name": "support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7880332,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7880332,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "name": "should_revoke",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7880332,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "name": "get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7890272,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "name": "default__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7890272,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "name": "get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7890272,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "name": "default__get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7900605,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "name": "get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7900605,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "name": "default__get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7900605,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "name": "get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7910593,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "name": "default__get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.79206,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "name": "call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.79206,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "name": "default__call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7930586,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "name": "apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7930586,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "name": "default__apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "unique_id": "macro.dbt.default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.795033,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "name": "get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7980642,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "name": "default__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7980642,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "name": "sql_convert_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7990644,
            "supported_languages": null
        },
        "macro.dbt.get_empty_subquery_sql": {
            "name": "get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.get_empty_subquery_sql",
            "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.7990644,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_subquery_sql": {
            "name": "default__get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.default__get_empty_subquery_sql",
            "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8000648,
            "supported_languages": null
        },
        "macro.dbt.get_empty_schema_sql": {
            "name": "get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.get_empty_schema_sql",
            "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_schema_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8000648,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_schema_sql": {
            "name": "default__get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.default__get_empty_schema_sql",
            "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8020594,
            "supported_languages": null
        },
        "macro.dbt.get_column_schema_from_query": {
            "name": "get_column_schema_from_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.get_column_schema_from_query",
            "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8030586,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "name": "get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8030586,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "name": "default__get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8040652,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "name": "alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8040652,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "name": "default__alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8046045,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "name": "alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8056436,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "name": "default__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8066413,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "name": "collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "unique_id": "macro.dbt.collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8076391,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "name": "default__collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "unique_id": "macro.dbt.default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8076391,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "name": "get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8096414,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "name": "default__get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8096414,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "name": "create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8096414,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "name": "default__create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8106408,
            "supported_languages": null
        },
        "macro.dbt.get_drop_index_sql": {
            "name": "get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.get_drop_index_sql",
            "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_drop_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8106408,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_index_sql": {
            "name": "default__get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.default__get_drop_index_sql",
            "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8116417,
            "supported_languages": null
        },
        "macro.dbt.get_show_indexes_sql": {
            "name": "get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.get_show_indexes_sql",
            "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_show_indexes_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8116417,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_indexes_sql": {
            "name": "default__get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "unique_id": "macro.dbt.default__get_show_indexes_sql",
            "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8116417,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_relations": {
            "name": "get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.get_catalog_relations",
            "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_catalog_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8166413,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_relations": {
            "name": "default__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_relations",
            "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8166413,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "name": "get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8166413,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "name": "default__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.817636,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "name": "information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.817636,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "name": "default__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.817636,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "name": "list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8186412,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "name": "default__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8186412,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "name": "check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.819641,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "name": "default__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.819641,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "name": "list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8206408,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "name": "default__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8206408,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_for_single_relation": {
            "name": "get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.get_catalog_for_single_relation",
            "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_catalog_for_single_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8206408,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_for_single_relation": {
            "name": "default__get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_for_single_relation",
            "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8206408,
            "supported_languages": null
        },
        "macro.dbt.get_relations": {
            "name": "get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.get_relations",
            "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8216388,
            "supported_languages": null
        },
        "macro.dbt.default__get_relations": {
            "name": "default__get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__get_relations",
            "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8216388,
            "supported_languages": null
        },
        "macro.dbt.get_relation_last_modified": {
            "name": "get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.get_relation_last_modified",
            "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_relation_last_modified"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8216388,
            "supported_languages": null
        },
        "macro.dbt.default__get_relation_last_modified": {
            "name": "default__get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "unique_id": "macro.dbt.default__get_relation_last_modified",
            "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8226361,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "name": "alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "unique_id": "macro.dbt.alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8236368,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "name": "default__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8236368,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "name": "alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "unique_id": "macro.dbt.alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8236368,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "name": "default__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8246362,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "name": "persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "unique_id": "macro.dbt.persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8246362,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "name": "default__persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "unique_id": "macro.dbt.default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.825636,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "name": "make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.828641,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "name": "default__make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.828641,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "name": "make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.828641,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "name": "default__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8296416,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "name": "make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8296416,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "name": "default__make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8306408,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "name": "truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8306408,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "name": "default__truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8306408,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "name": "get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8316405,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "name": "default__get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8316405,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "name": "load_cached_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8326433,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "name": "load_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "unique_id": "macro.dbt.load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8326433,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "name": "create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "unique_id": "macro.dbt.create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.833642,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "name": "default__create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "unique_id": "macro.dbt.default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.833642,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "name": "drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "unique_id": "macro.dbt.drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.833642,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "name": "default__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "unique_id": "macro.dbt.default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8346405,
            "supported_languages": null
        },
        "macro.dbt.get_show_sql": {
            "name": "get_show_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\show.sql",
            "original_file_path": "macros\\adapters\\show.sql",
            "unique_id": "macro.dbt.get_show_sql",
            "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_limit_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8356097,
            "supported_languages": null
        },
        "macro.dbt.get_limit_subquery_sql": {
            "name": "get_limit_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\show.sql",
            "original_file_path": "macros\\adapters\\show.sql",
            "unique_id": "macro.dbt.get_limit_subquery_sql",
            "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_limit_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8356097,
            "supported_languages": null
        },
        "macro.dbt.default__get_limit_subquery_sql": {
            "name": "default__get_limit_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\show.sql",
            "original_file_path": "macros\\adapters\\show.sql",
            "unique_id": "macro.dbt.default__get_limit_subquery_sql",
            "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8366108,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "name": "current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8376107,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "name": "default__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8376107,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "name": "snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8376107,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "name": "default__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8376107,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "name": "current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8386414,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "name": "default__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8386414,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "name": "current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8386414,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "name": "default__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt_postgres.postgres__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8386414,
            "supported_languages": null
        },
        "macro.dbt.validate_sql": {
            "name": "validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\validate_sql.sql",
            "original_file_path": "macros\\adapters\\validate_sql.sql",
            "unique_id": "macro.dbt.validate_sql",
            "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__validate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8396385,
            "supported_languages": null
        },
        "macro.dbt.default__validate_sql": {
            "name": "default__validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\adapters\\validate_sql.sql",
            "original_file_path": "macros\\adapters\\validate_sql.sql",
            "unique_id": "macro.dbt.default__validate_sql",
            "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8396385,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "name": "convert_datetime",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "unique_id": "macro.dbt.convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.842641,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "name": "dates_in_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "unique_id": "macro.dbt.dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.84464,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "name": "partition_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "unique_id": "macro.dbt.partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8456402,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "name": "py_current_timestring",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "unique_id": "macro.dbt.py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8466408,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "name": "statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "unique_id": "macro.dbt.statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8486383,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "name": "noop_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "unique_id": "macro.dbt.noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8496406,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "name": "run_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "unique_id": "macro.dbt.run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8496406,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "name": "default__test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\generic_test_sql\\accepted_values.sql",
            "original_file_path": "macros\\generic_test_sql\\accepted_values.sql",
            "unique_id": "macro.dbt.default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8516192,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "name": "default__test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\generic_test_sql\\not_null.sql",
            "original_file_path": "macros\\generic_test_sql\\not_null.sql",
            "unique_id": "macro.dbt.default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8516192,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "name": "default__test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\generic_test_sql\\relationships.sql",
            "original_file_path": "macros\\generic_test_sql\\relationships.sql",
            "unique_id": "macro.dbt.default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8526099,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "name": "default__test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\generic_test_sql\\unique.sql",
            "original_file_path": "macros\\generic_test_sql\\unique.sql",
            "unique_id": "macro.dbt.default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8536103,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "name": "generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "unique_id": "macro.dbt.generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8536103,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "name": "default__generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "unique_id": "macro.dbt.default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8546083,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "name": "generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "unique_id": "macro.dbt.generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8556085,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "name": "default__generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "unique_id": "macro.dbt.default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8556085,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8566086,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "name": "default__generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "unique_id": "macro.dbt.default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8566086,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "name": "generate_schema_name_for_env",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8576088,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "name": "set_sql_header",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "unique_id": "macro.dbt.set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8576088,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "name": "should_full_refresh",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "unique_id": "macro.dbt.should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.858609,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "name": "should_store_failures",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "unique_id": "macro.dbt.should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.858609,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "name": "run_hooks",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "unique_id": "macro.dbt.run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8606086,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "name": "make_hook_config",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "unique_id": "macro.dbt.make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8606086,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "name": "before_begin",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "unique_id": "macro.dbt.before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.861609,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "name": "in_transaction",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "unique_id": "macro.dbt.in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.861609,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "name": "after_commit",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "unique_id": "macro.dbt.after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.861609,
            "supported_languages": null
        },
        "macro.dbt.materialization_materialized_view_default": {
            "name": "materialization_materialized_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\materialized_view.sql",
            "original_file_path": "macros\\materializations\\models\\materialized_view.sql",
            "unique_id": "macro.dbt.materialization_materialized_view_default",
            "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.materialized_view_setup",
                    "macro.dbt.materialized_view_get_build_sql",
                    "macro.dbt.materialized_view_execute_no_op",
                    "macro.dbt.materialized_view_execute_build_sql",
                    "macro.dbt.materialized_view_teardown"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8686411,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialized_view_setup": {
            "name": "materialized_view_setup",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\materialized_view.sql",
            "original_file_path": "macros\\materializations\\models\\materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_setup",
            "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8686411,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_teardown": {
            "name": "materialized_view_teardown",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\materialized_view.sql",
            "original_file_path": "macros\\materializations\\models\\materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_teardown",
            "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8696432,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_get_build_sql": {
            "name": "materialized_view_get_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\materialized_view.sql",
            "original_file_path": "macros\\materializations\\models\\materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_get_build_sql",
            "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.get_create_materialized_view_as_sql",
                    "macro.dbt.get_replace_sql",
                    "macro.dbt.get_materialized_view_configuration_changes",
                    "macro.dbt.refresh_materialized_view",
                    "macro.dbt.get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.871638,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_no_op": {
            "name": "materialized_view_execute_no_op",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\materialized_view.sql",
            "original_file_path": "macros\\materializations\\models\\materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_no_op",
            "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.871638,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_build_sql": {
            "name": "materialized_view_execute_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\materialized_view.sql",
            "original_file_path": "macros\\materializations\\models\\materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_build_sql",
            "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8726358,
            "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
            "name": "materialization_table_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\table.sql",
            "original_file_path": "macros\\materializations\\models\\table.sql",
            "unique_id": "macro.dbt.materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8766408,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_view_default": {
            "name": "materialization_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\view.sql",
            "original_file_path": "macros\\materializations\\models\\view.sql",
            "unique_id": "macro.dbt.materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8816445,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.can_clone_table": {
            "name": "can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\clone\\can_clone_table.sql",
            "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql",
            "unique_id": "macro.dbt.can_clone_table",
            "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__can_clone_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8816445,
            "supported_languages": null
        },
        "macro.dbt.default__can_clone_table": {
            "name": "default__can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\clone\\can_clone_table.sql",
            "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql",
            "unique_id": "macro.dbt.default__can_clone_table",
            "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8816445,
            "supported_languages": null
        },
        "macro.dbt.materialization_clone_default": {
            "name": "materialization_clone_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\clone\\clone.sql",
            "original_file_path": "macros\\materializations\\models\\clone\\clone.sql",
            "unique_id": "macro.dbt.materialization_clone_default",
            "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.can_clone_table",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_or_replace_clone",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8876085,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_or_replace_clone": {
            "name": "create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql",
            "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql",
            "unique_id": "macro.dbt.create_or_replace_clone",
            "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_or_replace_clone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8876085,
            "supported_languages": null
        },
        "macro.dbt.default__create_or_replace_clone": {
            "name": "default__create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql",
            "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql",
            "unique_id": "macro.dbt.default__create_or_replace_clone",
            "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8876085,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "name": "get_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "unique_id": "macro.dbt.get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8906133,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "name": "diff_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "unique_id": "macro.dbt.diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.8916125,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "name": "diff_column_data_types",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "unique_id": "macro.dbt.diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.892613,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "name": "get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "unique_id": "macro.dbt.get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.892613,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "name": "default__get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.893613,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "name": "materialization_incremental_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "unique_id": "macro.dbt.materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9016132,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.is_incremental": {
            "name": "is_incremental",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "unique_id": "macro.dbt.is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.902613,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "name": "get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "unique_id": "macro.dbt.get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9101198,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "name": "default__get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "unique_id": "macro.dbt.default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.912152,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "name": "get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9131544,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "name": "default__get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9151523,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "name": "get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9151523,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "name": "default__get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.916152,
            "supported_languages": null
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "name": "incremental_validate_on_schema_change",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.923152,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "name": "check_for_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "unique_id": "macro.dbt.check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.925152,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "name": "sync_column_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "unique_id": "macro.dbt.sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9271526,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "name": "process_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "unique_id": "macro.dbt.process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9281518,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
            "name": "get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9301481,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "name": "default__get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9301481,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "name": "get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9301481,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "name": "default__get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.931148,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "name": "get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.931148,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "name": "default__get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9321477,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "name": "get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9321477,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "name": "default__get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9321477,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "name": "get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9331474,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "name": "default__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9331474,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "name": "get_insert_into_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "unique_id": "macro.dbt.get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9331474,
            "supported_languages": null
        },
        "macro.dbt.create_csv_table": {
            "name": "create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.940153,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "name": "default__create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9411526,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "name": "reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9421532,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "name": "default__reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.943153,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "name": "get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.943153,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "name": "default__get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.943153,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "name": "get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9441526,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "name": "default__get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9441526,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "name": "get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9441526,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "name": "default__get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9441526,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "name": "get_seed_column_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9451478,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "name": "load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9451478,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "name": "default__load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "unique_id": "macro.dbt.default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9471521,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "name": "materialization_seed_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\seeds\\seed.sql",
            "original_file_path": "macros\\materializations\\seeds\\seed.sql",
            "unique_id": "macro.dbt.materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.952148,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_columns": {
            "name": "create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9571474,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "name": "default__create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.958153,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "name": "post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.958153,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "name": "default__post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.958153,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "name": "get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9591475,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "name": "default__get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9591475,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "name": "snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9591475,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "name": "default__snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9611502,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "name": "build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9611502,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "name": "default__build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9611502,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "name": "build_snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.962121,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "name": "materialization_snapshot_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.971151,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.snapshot_merge_sql": {
            "name": "snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.971151,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "name": "default__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9721477,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "name": "strategy_dispatch",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9771507,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "name": "snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9771507,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "name": "default__snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9781513,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "name": "snapshot_timestamp_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9791234,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "name": "snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9791234,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "name": "default__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9791234,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "name": "snapshot_check_all_get_existing_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9821548,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "name": "snapshot_check_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.98415,
            "supported_languages": null
        },
        "macro.dbt.get_test_sql": {
            "name": "get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "unique_id": "macro.dbt.get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9851525,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "name": "default__get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "unique_id": "macro.dbt.default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.986155,
            "supported_languages": null
        },
        "macro.dbt.get_unit_test_sql": {
            "name": "get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "unique_id": "macro.dbt.get_unit_test_sql",
            "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_unit_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.986155,
            "supported_languages": null
        },
        "macro.dbt.default__get_unit_test_sql": {
            "name": "default__get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "unique_id": "macro.dbt.default__get_unit_test_sql",
            "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.987122,
            "supported_languages": null
        },
        "macro.dbt.materialization_test_default": {
            "name": "materialization_test_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\test.sql",
            "original_file_path": "macros\\materializations\\tests\\test.sql",
            "unique_id": "macro.dbt.materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_sql",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9911835,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_unit_default": {
            "name": "materialization_unit_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\unit.sql",
            "original_file_path": "macros\\materializations\\tests\\unit.sql",
            "unique_id": "macro.dbt.materialization_unit_default",
            "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_query",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_empty_subquery_sql",
                    "macro.dbt.get_expected_sql",
                    "macro.dbt.get_unit_test_sql",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9941876,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_where_subquery": {
            "name": "get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "unique_id": "macro.dbt.get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.995184,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "name": "default__get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "unique_id": "macro.dbt.default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.995184,
            "supported_languages": null
        },
        "macro.dbt.resolve_model_name": {
            "name": "resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.resolve_model_name",
            "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9981785,
            "supported_languages": null
        },
        "macro.dbt.default__resolve_model_name": {
            "name": "default__resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.default__resolve_model_name",
            "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9981785,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "name": "build_ref_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131664.9991791,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "name": "build_source_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0001833,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "name": "build_config_dict",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0011795,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "name": "py_script_postfix",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.resolve_model_name",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0021837,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "name": "py_script_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "unique_id": "macro.dbt.py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0021837,
            "supported_languages": null
        },
        "macro.dbt.get_create_sql": {
            "name": "get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\create.sql",
            "original_file_path": "macros\\relations\\create.sql",
            "unique_id": "macro.dbt.get_create_sql",
            "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.003184,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_sql": {
            "name": "default__get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\create.sql",
            "original_file_path": "macros\\relations\\create.sql",
            "unique_id": "macro.dbt.default__get_create_sql",
            "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0041802,
            "supported_languages": null
        },
        "macro.dbt.get_create_backup_sql": {
            "name": "get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\create_backup.sql",
            "original_file_path": "macros\\relations\\create_backup.sql",
            "unique_id": "macro.dbt.get_create_backup_sql",
            "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0047133,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_backup_sql": {
            "name": "default__get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\create_backup.sql",
            "original_file_path": "macros\\relations\\create_backup.sql",
            "unique_id": "macro.dbt.default__get_create_backup_sql",
            "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0047133,
            "supported_languages": null
        },
        "macro.dbt.get_create_intermediate_sql": {
            "name": "get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\create_intermediate.sql",
            "original_file_path": "macros\\relations\\create_intermediate.sql",
            "unique_id": "macro.dbt.get_create_intermediate_sql",
            "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0057526,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_intermediate_sql": {
            "name": "default__get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\create_intermediate.sql",
            "original_file_path": "macros\\relations\\create_intermediate.sql",
            "unique_id": "macro.dbt.default__get_create_intermediate_sql",
            "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0057526,
            "supported_languages": null
        },
        "macro.dbt.get_drop_sql": {
            "name": "get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop.sql",
            "original_file_path": "macros\\relations\\drop.sql",
            "unique_id": "macro.dbt.get_drop_sql",
            "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.006745,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_sql": {
            "name": "default__get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop.sql",
            "original_file_path": "macros\\relations\\drop.sql",
            "unique_id": "macro.dbt.default__get_drop_sql",
            "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_view",
                    "macro.dbt.drop_table",
                    "macro.dbt.drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0077493,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "name": "drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop.sql",
            "original_file_path": "macros\\relations\\drop.sql",
            "unique_id": "macro.dbt.drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0077493,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "name": "default__drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop.sql",
            "original_file_path": "macros\\relations\\drop.sql",
            "unique_id": "macro.dbt.default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0087454,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "name": "drop_relation_if_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop.sql",
            "original_file_path": "macros\\relations\\drop.sql",
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0087454,
            "supported_languages": null
        },
        "macro.dbt.get_drop_backup_sql": {
            "name": "get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop_backup.sql",
            "original_file_path": "macros\\relations\\drop_backup.sql",
            "unique_id": "macro.dbt.get_drop_backup_sql",
            "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0087454,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_backup_sql": {
            "name": "default__get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\drop_backup.sql",
            "original_file_path": "macros\\relations\\drop_backup.sql",
            "unique_id": "macro.dbt.default__get_drop_backup_sql",
            "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.009745,
            "supported_languages": null
        },
        "macro.dbt.get_rename_sql": {
            "name": "get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\rename.sql",
            "original_file_path": "macros\\relations\\rename.sql",
            "unique_id": "macro.dbt.get_rename_sql",
            "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.010719,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_sql": {
            "name": "default__get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\rename.sql",
            "original_file_path": "macros\\relations\\rename.sql",
            "unique_id": "macro.dbt.default__get_rename_sql",
            "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_rename_view_sql",
                    "macro.dbt.get_rename_table_sql",
                    "macro.dbt.get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0117464,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "name": "rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\rename.sql",
            "original_file_path": "macros\\relations\\rename.sql",
            "unique_id": "macro.dbt.rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0117464,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "name": "default__rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\rename.sql",
            "original_file_path": "macros\\relations\\rename.sql",
            "unique_id": "macro.dbt.default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.012718,
            "supported_languages": null
        },
        "macro.dbt.get_rename_intermediate_sql": {
            "name": "get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\rename_intermediate.sql",
            "original_file_path": "macros\\relations\\rename_intermediate.sql",
            "unique_id": "macro.dbt.get_rename_intermediate_sql",
            "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0137503,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_intermediate_sql": {
            "name": "default__get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\rename_intermediate.sql",
            "original_file_path": "macros\\relations\\rename_intermediate.sql",
            "unique_id": "macro.dbt.default__get_rename_intermediate_sql",
            "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0137503,
            "supported_languages": null
        },
        "macro.dbt.get_replace_sql": {
            "name": "get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\replace.sql",
            "original_file_path": "macros\\relations\\replace.sql",
            "unique_id": "macro.dbt.get_replace_sql",
            "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.014752,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_sql": {
            "name": "default__get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\replace.sql",
            "original_file_path": "macros\\relations\\replace.sql",
            "unique_id": "macro.dbt.default__get_replace_sql",
            "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_view_sql",
                    "macro.dbt.get_replace_table_sql",
                    "macro.dbt.get_replace_materialized_view_sql",
                    "macro.dbt.get_create_intermediate_sql",
                    "macro.dbt.get_create_backup_sql",
                    "macro.dbt.get_rename_intermediate_sql",
                    "macro.dbt.get_drop_backup_sql",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0167181,
            "supported_languages": null
        },
        "macro.dbt.drop_schema_named": {
            "name": "drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\schema.sql",
            "original_file_path": "macros\\relations\\schema.sql",
            "unique_id": "macro.dbt.drop_schema_named",
            "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_schema_named"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0177188,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema_named": {
            "name": "default__drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\schema.sql",
            "original_file_path": "macros\\relations\\schema.sql",
            "unique_id": "macro.dbt.default__drop_schema_named",
            "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0177188,
            "supported_languages": null
        },
        "macro.dbt.get_table_columns_and_constraints": {
            "name": "get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_table_columns_and_constraints",
            "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0187178,
            "supported_languages": null
        },
        "macro.dbt.default__get_table_columns_and_constraints": {
            "name": "default__get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_table_columns_and_constraints",
            "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0197177,
            "supported_languages": null
        },
        "macro.dbt.table_columns_and_constraints": {
            "name": "table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.table_columns_and_constraints",
            "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.020718,
            "supported_languages": null
        },
        "macro.dbt.get_assert_columns_equivalent": {
            "name": "get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_assert_columns_equivalent",
            "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.020718,
            "supported_languages": null
        },
        "macro.dbt.default__get_assert_columns_equivalent": {
            "name": "default__get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_assert_columns_equivalent",
            "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.020718,
            "supported_languages": null
        },
        "macro.dbt.assert_columns_equivalent": {
            "name": "assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.assert_columns_equivalent",
            "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_column_schema_from_query",
                    "macro.dbt.get_empty_schema_sql",
                    "macro.dbt.format_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.022745,
            "supported_languages": null
        },
        "macro.dbt.format_columns": {
            "name": "format_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.format_columns",
            "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__format_column"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.023745,
            "supported_languages": null
        },
        "macro.dbt.default__format_column": {
            "name": "default__format_column",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__format_column",
            "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.023745,
            "supported_languages": null
        },
        "macro.dbt.get_alter_materialized_view_as_sql": {
            "name": "get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt.get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0247447,
            "supported_languages": null
        },
        "macro.dbt.default__get_alter_materialized_view_as_sql": {
            "name": "default__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0257478,
            "supported_languages": null
        },
        "macro.dbt.get_materialized_view_configuration_changes": {
            "name": "get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt.get_materialized_view_configuration_changes",
            "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0257478,
            "supported_languages": null
        },
        "macro.dbt.default__get_materialized_view_configuration_changes": {
            "name": "default__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\alter.sql",
            "original_file_path": "macros\\relations\\materialized_view\\alter.sql",
            "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0257478,
            "supported_languages": null
        },
        "macro.dbt.get_create_materialized_view_as_sql": {
            "name": "get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\create.sql",
            "original_file_path": "macros\\relations\\materialized_view\\create.sql",
            "unique_id": "macro.dbt.get_create_materialized_view_as_sql",
            "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.026719,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_materialized_view_as_sql": {
            "name": "default__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\create.sql",
            "original_file_path": "macros\\relations\\materialized_view\\create.sql",
            "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.026719,
            "supported_languages": null
        },
        "macro.dbt.drop_materialized_view": {
            "name": "drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\drop.sql",
            "original_file_path": "macros\\relations\\materialized_view\\drop.sql",
            "unique_id": "macro.dbt.drop_materialized_view",
            "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.026719,
            "supported_languages": null
        },
        "macro.dbt.default__drop_materialized_view": {
            "name": "default__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\drop.sql",
            "original_file_path": "macros\\relations\\materialized_view\\drop.sql",
            "unique_id": "macro.dbt.default__drop_materialized_view",
            "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.02772,
            "supported_languages": null
        },
        "macro.dbt.refresh_materialized_view": {
            "name": "refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\refresh.sql",
            "original_file_path": "macros\\relations\\materialized_view\\refresh.sql",
            "unique_id": "macro.dbt.refresh_materialized_view",
            "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__refresh_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.02772,
            "supported_languages": null
        },
        "macro.dbt.default__refresh_materialized_view": {
            "name": "default__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\refresh.sql",
            "original_file_path": "macros\\relations\\materialized_view\\refresh.sql",
            "unique_id": "macro.dbt.default__refresh_materialized_view",
            "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.02772,
            "supported_languages": null
        },
        "macro.dbt.get_rename_materialized_view_sql": {
            "name": "get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\rename.sql",
            "original_file_path": "macros\\relations\\materialized_view\\rename.sql",
            "unique_id": "macro.dbt.get_rename_materialized_view_sql",
            "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0287452,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_materialized_view_sql": {
            "name": "default__get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\rename.sql",
            "original_file_path": "macros\\relations\\materialized_view\\rename.sql",
            "unique_id": "macro.dbt.default__get_rename_materialized_view_sql",
            "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0287452,
            "supported_languages": null
        },
        "macro.dbt.get_replace_materialized_view_sql": {
            "name": "get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\replace.sql",
            "original_file_path": "macros\\relations\\materialized_view\\replace.sql",
            "unique_id": "macro.dbt.get_replace_materialized_view_sql",
            "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0297503,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_materialized_view_sql": {
            "name": "default__get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\materialized_view\\replace.sql",
            "original_file_path": "macros\\relations\\materialized_view\\replace.sql",
            "unique_id": "macro.dbt.default__get_replace_materialized_view_sql",
            "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0297503,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "name": "get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0307517,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "name": "default__get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0307517,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "name": "create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.03175,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "name": "default__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.032747,
            "supported_languages": null
        },
        "macro.dbt.default__get_column_names": {
            "name": "default__get_column_names",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.default__get_column_names",
            "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.03375,
            "supported_languages": null
        },
        "macro.dbt.get_select_subquery": {
            "name": "get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.get_select_subquery",
            "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.03375,
            "supported_languages": null
        },
        "macro.dbt.default__get_select_subquery": {
            "name": "default__get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\create.sql",
            "original_file_path": "macros\\relations\\table\\create.sql",
            "unique_id": "macro.dbt.default__get_select_subquery",
            "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0347545,
            "supported_languages": null
        },
        "macro.dbt.drop_table": {
            "name": "drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\drop.sql",
            "original_file_path": "macros\\relations\\table\\drop.sql",
            "unique_id": "macro.dbt.drop_table",
            "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0347545,
            "supported_languages": null
        },
        "macro.dbt.default__drop_table": {
            "name": "default__drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\drop.sql",
            "original_file_path": "macros\\relations\\table\\drop.sql",
            "unique_id": "macro.dbt.default__drop_table",
            "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0347545,
            "supported_languages": null
        },
        "macro.dbt.get_rename_table_sql": {
            "name": "get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\rename.sql",
            "original_file_path": "macros\\relations\\table\\rename.sql",
            "unique_id": "macro.dbt.get_rename_table_sql",
            "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_rename_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.035745,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_table_sql": {
            "name": "default__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\rename.sql",
            "original_file_path": "macros\\relations\\table\\rename.sql",
            "unique_id": "macro.dbt.default__get_rename_table_sql",
            "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.035745,
            "supported_languages": null
        },
        "macro.dbt.get_replace_table_sql": {
            "name": "get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\replace.sql",
            "original_file_path": "macros\\relations\\table\\replace.sql",
            "unique_id": "macro.dbt.get_replace_table_sql",
            "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_replace_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.035745,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_table_sql": {
            "name": "default__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\table\\replace.sql",
            "original_file_path": "macros\\relations\\table\\replace.sql",
            "unique_id": "macro.dbt.default__get_replace_table_sql",
            "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0367498,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "name": "get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\create.sql",
            "original_file_path": "macros\\relations\\view\\create.sql",
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0367498,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "name": "default__get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\create.sql",
            "original_file_path": "macros\\relations\\view\\create.sql",
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0377495,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "name": "create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\create.sql",
            "original_file_path": "macros\\relations\\view\\create.sql",
            "unique_id": "macro.dbt.create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0377495,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "name": "default__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\create.sql",
            "original_file_path": "macros\\relations\\view\\create.sql",
            "unique_id": "macro.dbt.default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0377495,
            "supported_languages": null
        },
        "macro.dbt.drop_view": {
            "name": "drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\drop.sql",
            "original_file_path": "macros\\relations\\view\\drop.sql",
            "unique_id": "macro.dbt.drop_view",
            "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.038745,
            "supported_languages": null
        },
        "macro.dbt.default__drop_view": {
            "name": "default__drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\drop.sql",
            "original_file_path": "macros\\relations\\view\\drop.sql",
            "unique_id": "macro.dbt.default__drop_view",
            "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.038745,
            "supported_languages": null
        },
        "macro.dbt.get_rename_view_sql": {
            "name": "get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\rename.sql",
            "original_file_path": "macros\\relations\\view\\rename.sql",
            "unique_id": "macro.dbt.get_rename_view_sql",
            "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_rename_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.038745,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_view_sql": {
            "name": "default__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\rename.sql",
            "original_file_path": "macros\\relations\\view\\rename.sql",
            "unique_id": "macro.dbt.default__get_rename_view_sql",
            "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0397544,
            "supported_languages": null
        },
        "macro.dbt.get_replace_view_sql": {
            "name": "get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\replace.sql",
            "original_file_path": "macros\\relations\\view\\replace.sql",
            "unique_id": "macro.dbt.get_replace_view_sql",
            "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_replace_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0407498,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_view_sql": {
            "name": "default__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\replace.sql",
            "original_file_path": "macros\\relations\\view\\replace.sql",
            "unique_id": "macro.dbt.default__get_replace_view_sql",
            "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0407498,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
            "name": "create_or_replace_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\replace.sql",
            "original_file_path": "macros\\relations\\view\\replace.sql",
            "unique_id": "macro.dbt.create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0427501,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "name": "handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\replace.sql",
            "original_file_path": "macros\\relations\\view\\replace.sql",
            "unique_id": "macro.dbt.handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0437524,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "name": "default__handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\relations\\view\\replace.sql",
            "original_file_path": "macros\\relations\\view\\replace.sql",
            "unique_id": "macro.dbt.default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0437524,
            "supported_languages": null
        },
        "macro.dbt.get_fixture_sql": {
            "name": "get_fixture_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\unit_test_sql\\get_fixture_sql.sql",
            "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_fixture_sql",
            "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.safe_cast",
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0487492,
            "supported_languages": null
        },
        "macro.dbt.get_expected_sql": {
            "name": "get_expected_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\unit_test_sql\\get_fixture_sql.sql",
            "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_expected_sql",
            "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0497441,
            "supported_languages": null
        },
        "macro.dbt.format_row": {
            "name": "format_row",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\unit_test_sql\\get_fixture_sql.sql",
            "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql",
            "unique_id": "macro.dbt.format_row",
            "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal",
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt.safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0517497,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "name": "any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "unique_id": "macro.dbt.any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0517497,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "name": "default__any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "unique_id": "macro.dbt.default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0517497,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "name": "array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\array_append.sql",
            "original_file_path": "macros\\utils\\array_append.sql",
            "unique_id": "macro.dbt.array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0527499,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "name": "default__array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\array_append.sql",
            "original_file_path": "macros\\utils\\array_append.sql",
            "unique_id": "macro.dbt.default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0527499,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "name": "array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\array_concat.sql",
            "original_file_path": "macros\\utils\\array_concat.sql",
            "unique_id": "macro.dbt.array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0527499,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "name": "default__array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\array_concat.sql",
            "original_file_path": "macros\\utils\\array_concat.sql",
            "unique_id": "macro.dbt.default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0537443,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "name": "array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "unique_id": "macro.dbt.array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0537443,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "name": "default__array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "unique_id": "macro.dbt.default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0547497,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "name": "bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\bool_or.sql",
            "original_file_path": "macros\\utils\\bool_or.sql",
            "unique_id": "macro.dbt.bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0547497,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "name": "default__bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\bool_or.sql",
            "original_file_path": "macros\\utils\\bool_or.sql",
            "unique_id": "macro.dbt.default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0547497,
            "supported_languages": null
        },
        "macro.dbt.cast": {
            "name": "cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\cast.sql",
            "original_file_path": "macros\\utils\\cast.sql",
            "unique_id": "macro.dbt.cast",
            "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0557442,
            "supported_languages": null
        },
        "macro.dbt.default__cast": {
            "name": "default__cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\cast.sql",
            "original_file_path": "macros\\utils\\cast.sql",
            "unique_id": "macro.dbt.default__cast",
            "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0557442,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "name": "cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "unique_id": "macro.dbt.cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0557442,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "name": "default__cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0557442,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "name": "concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "unique_id": "macro.dbt.concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.056744,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "name": "default__concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "unique_id": "macro.dbt.default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.056744,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "name": "type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.05875,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "name": "default__type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.05875,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "name": "type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.05875,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "name": "default__type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.05875,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "name": "type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.059744,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "name": "default__type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.059744,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "name": "type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.059744,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "name": "default__type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0607443,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "name": "type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0607443,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "name": "default__type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0607443,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "name": "type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0617468,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "name": "default__type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0617468,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "name": "type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0617468,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "name": "default__type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "unique_id": "macro.dbt.default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0627446,
            "supported_languages": null
        },
        "macro.dbt.date": {
            "name": "date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date.sql",
            "original_file_path": "macros\\utils\\date.sql",
            "unique_id": "macro.dbt.date",
            "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0627446,
            "supported_languages": null
        },
        "macro.dbt.default__date": {
            "name": "default__date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date.sql",
            "original_file_path": "macros\\utils\\date.sql",
            "unique_id": "macro.dbt.default__date",
            "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06375,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "name": "dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "unique_id": "macro.dbt.dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06375,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "name": "default__dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "unique_id": "macro.dbt.default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06375,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "name": "datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "unique_id": "macro.dbt.datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.064747,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "name": "default__datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "unique_id": "macro.dbt.default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.064747,
            "supported_languages": null
        },
        "macro.dbt.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date_spine.sql",
            "original_file_path": "macros\\utils\\date_spine.sql",
            "unique_id": "macro.dbt.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0657494,
            "supported_languages": null
        },
        "macro.dbt.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date_spine.sql",
            "original_file_path": "macros\\utils\\date_spine.sql",
            "unique_id": "macro.dbt.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0667512,
            "supported_languages": null
        },
        "macro.dbt.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date_spine.sql",
            "original_file_path": "macros\\utils\\date_spine.sql",
            "unique_id": "macro.dbt.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06775,
            "supported_languages": null
        },
        "macro.dbt.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date_spine.sql",
            "original_file_path": "macros\\utils\\date_spine.sql",
            "unique_id": "macro.dbt.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.generate_series",
                    "macro.dbt.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06775,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "name": "date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "unique_id": "macro.dbt.date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06875,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "name": "default__date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "unique_id": "macro.dbt.default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06875,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "name": "escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\utils\\escape_single_quotes.sql",
            "unique_id": "macro.dbt.escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06875,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "name": "default__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\utils\\escape_single_quotes.sql",
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.06875,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "name": "except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "unique_id": "macro.dbt.except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0697496,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "name": "default__except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "unique_id": "macro.dbt.default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0697496,
            "supported_languages": null
        },
        "macro.dbt.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\generate_series.sql",
            "original_file_path": "macros\\utils\\generate_series.sql",
            "unique_id": "macro.dbt.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.07075,
            "supported_languages": null
        },
        "macro.dbt.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\generate_series.sql",
            "original_file_path": "macros\\utils\\generate_series.sql",
            "unique_id": "macro.dbt.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0717492,
            "supported_languages": null
        },
        "macro.dbt.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\generate_series.sql",
            "original_file_path": "macros\\utils\\generate_series.sql",
            "unique_id": "macro.dbt.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0717492,
            "supported_languages": null
        },
        "macro.dbt.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\generate_series.sql",
            "original_file_path": "macros\\utils\\generate_series.sql",
            "unique_id": "macro.dbt.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.07275,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "name": "hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "unique_id": "macro.dbt.hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.073747,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "name": "default__hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "unique_id": "macro.dbt.default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.073747,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "name": "intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\intersect.sql",
            "original_file_path": "macros\\utils\\intersect.sql",
            "unique_id": "macro.dbt.intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.073747,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "name": "default__intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\intersect.sql",
            "original_file_path": "macros\\utils\\intersect.sql",
            "unique_id": "macro.dbt.default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.073747,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "name": "last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "unique_id": "macro.dbt.last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0747497,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "name": "default_last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "unique_id": "macro.dbt.default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0747497,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "name": "default__last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "unique_id": "macro.dbt.default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0757518,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "name": "length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "unique_id": "macro.dbt.length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0757518,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "name": "default__length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "unique_id": "macro.dbt.default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0757518,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "name": "listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "unique_id": "macro.dbt.listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0767496,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "name": "default__listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "unique_id": "macro.dbt.default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0777204,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "name": "string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\literal.sql",
            "original_file_path": "macros\\utils\\literal.sql",
            "unique_id": "macro.dbt.string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0787513,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "name": "default__string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\literal.sql",
            "original_file_path": "macros\\utils\\literal.sql",
            "unique_id": "macro.dbt.default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0787513,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "name": "position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "unique_id": "macro.dbt.position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0787513,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "name": "default__position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "unique_id": "macro.dbt.default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0787513,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "name": "replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\replace.sql",
            "original_file_path": "macros\\utils\\replace.sql",
            "unique_id": "macro.dbt.replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0797498,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "name": "default__replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\replace.sql",
            "original_file_path": "macros\\utils\\replace.sql",
            "unique_id": "macro.dbt.default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0797498,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "name": "right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "unique_id": "macro.dbt.right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0807517,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "name": "default__right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "unique_id": "macro.dbt.default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0807517,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "name": "safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "unique_id": "macro.dbt.safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0807517,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "name": "default__safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "unique_id": "macro.dbt.default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0817494,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "name": "split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "unique_id": "macro.dbt.split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0817494,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "name": "default__split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "unique_id": "macro.dbt.default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0827515,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "name": "_split_part_negative",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "unique_id": "macro.dbt._split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0827515,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "name": "test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "unique_id": "macro.dbt.test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0837448,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "name": "test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "unique_id": "macro.dbt.test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0837448,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "name": "test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "unique_id": "macro.dbt.test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.08475,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "name": "test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "unique_id": "macro.dbt.test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.08475,
            "supported_languages": null
        },
        "macro.audit_helper.compare_all_columns": {
            "name": "compare_all_columns",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_all_columns.sql",
            "original_file_path": "macros\\compare_all_columns.sql",
            "unique_id": "macro.audit_helper.compare_all_columns",
            "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\r\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_all_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.08675,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_all_columns": {
            "name": "default__compare_all_columns",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_all_columns.sql",
            "original_file_path": "macros\\compare_all_columns.sql",
            "unique_id": "macro.audit_helper.default__compare_all_columns",
            "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\r\n\r\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\r\n\r\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\r\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \r\n  have a field named dbt_audit_helper_pk #}\r\n\r\n  {% set a_query %}      \r\n    select\r\n      *,\r\n      {{ primary_key }} as dbt_audit_helper_pk\r\n    from {{ a_relation }}\r\n  {% endset %}\r\n\r\n  {% set b_query %}\r\n    select\r\n      *,\r\n      {{ primary_key }} as dbt_audit_helper_pk\r\n    from {{ b_relation }}\r\n  {% endset %}\r\n\r\n  {% for column_name in column_names %}\r\n\r\n    {% set audit_query = audit_helper.compare_column_values_verbose(\r\n      a_query=a_query,\r\n      b_query=b_query,\r\n      primary_key=\"dbt_audit_helper_pk\",\r\n      column_to_compare=column_name\r\n    ) %}\r\n\r\n    /*  Create a query combining results from all columns so that the user, or the \r\n    test suite, can examine all at once.\r\n    */\r\n    \r\n    {% if loop.first %}\r\n\r\n    /*  Create a CTE that wraps all the unioned subqueries that are created\r\n        in this for loop\r\n    */\r\n      with main as ( \r\n\r\n    {% endif %}\r\n\r\n    /*  There will be one audit_query subquery for each column\r\n    */\r\n    ( {{ audit_query }} )\r\n\r\n    {% if not loop.last %}\r\n\r\n      union all\r\n\r\n    {% else %}\r\n\r\n    ), \r\n    \r\n      {%- if summarize %}\r\n\r\n        final as (\r\n          select\r\n            upper(column_name) as column_name,\r\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\r\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\r\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\r\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\r\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\r\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\r\n          from main\r\n          group by 1\r\n          order by column_name\r\n        )\r\n\r\n      {%- else %}\r\n\r\n        final as (\r\n          select\r\n            primary_key,           \r\n            upper(column_name) as column_name,\r\n            perfect_match,\r\n            null_in_a,\r\n            null_in_b,\r\n            missing_from_a,\r\n            missing_from_b,\r\n            conflicting_values\r\n          from main    \r\n          order by primary_key\r\n        )\r\n\r\n      {%- endif %}\r\n\r\n      select * from final\r\n    \r\n    {% endif %}\r\n\r\n  {% endfor %}\r\n    \r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_filtered_columns_in_relation",
                    "macro.audit_helper.compare_column_values_verbose"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0887494,
            "supported_languages": null
        },
        "macro.audit_helper.compare_and_classify_query_results": {
            "name": "compare_and_classify_query_results",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_and_classify_query_results.sql",
            "original_file_path": "macros\\compare_and_classify_query_results.sql",
            "unique_id": "macro.audit_helper.compare_and_classify_query_results",
            "macro_sql": "{% macro compare_and_classify_query_results(a_query, b_query, primary_key_columns=[], columns=[], event_time=None, sample_limit=20) %}\r\n    \r\n    {% set columns = audit_helper._ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\r\n    {% set joined_cols = columns | join(\", \") %}\r\n\r\n    {% if event_time %}\r\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\r\n    {% endif %}\r\n\r\n    with \r\n\r\n    {{ audit_helper._generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props)}}\r\n    \r\n    ,\r\n\r\n    all_records as (\r\n\r\n        select\r\n            *,\r\n            true as dbt_audit_in_a,\r\n            true as dbt_audit_in_b\r\n        from a_intersect_b\r\n\r\n        union all\r\n\r\n        select\r\n            *,\r\n            true as dbt_audit_in_a,\r\n            false as dbt_audit_in_b\r\n        from a_except_b\r\n\r\n        union all\r\n\r\n        select\r\n            *,\r\n            false as dbt_audit_in_a,\r\n            true as dbt_audit_in_b\r\n        from b_except_a\r\n\r\n    ),\r\n\r\n    classified as (\r\n        select \r\n            *,\r\n            {{ audit_helper._classify_audit_row_status() }} as dbt_audit_row_status\r\n        from all_records\r\n    ),\r\n\r\n    final as (\r\n        select \r\n            *,\r\n            {{ audit_helper._count_num_rows_in_status() }} as dbt_audit_num_rows_in_status,\r\n            -- using dense_rank so that modified rows (which have a full row for both the left and right side) both get picked up in the sample. \r\n            -- For every other type this is equivalent to a row_number()\r\n            dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key, dbt_audit_pk_row_num) as dbt_audit_sample_number\r\n        from classified\r\n    )\r\n\r\n    select * from final\r\n    {% if sample_limit %}\r\n        where dbt_audit_sample_number <= {{ sample_limit }}\r\n    {% endif %}\r\n    order by dbt_audit_row_status, dbt_audit_sample_number\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._ensure_all_pks_are_in_column_set",
                    "macro.audit_helper._get_comparison_bounds",
                    "macro.audit_helper._generate_set_results",
                    "macro.audit_helper._classify_audit_row_status",
                    "macro.audit_helper._count_num_rows_in_status"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.090786,
            "supported_languages": null
        },
        "macro.audit_helper.compare_and_classify_relation_rows": {
            "name": "compare_and_classify_relation_rows",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_and_classify_relation_rows.sql",
            "original_file_path": "macros\\compare_and_classify_relation_rows.sql",
            "unique_id": "macro.audit_helper.compare_and_classify_relation_rows",
            "macro_sql": "{% macro compare_and_classify_relation_rows(a_relation, b_relation, primary_key_columns=[], columns=None, event_time=None, sample_limit=20) %}\r\n    {%- if not columns -%}\r\n        {%- set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) -%}\r\n    {%- endif -%}\r\n\r\n    {{ \r\n        audit_helper.compare_and_classify_query_results(\r\n            \"select * from \" ~ a_relation,\r\n            \"select * from \" ~ b_relation,\r\n            primary_key_columns,\r\n            columns,\r\n            event_time,\r\n            sample_limit\r\n        )\r\n    }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._get_intersecting_columns_from_relations",
                    "macro.audit_helper.compare_and_classify_query_results"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0917869,
            "supported_languages": null
        },
        "macro.audit_helper.compare_column_values": {
            "name": "compare_column_values",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_column_values.sql",
            "original_file_path": "macros\\compare_column_values.sql",
            "unique_id": "macro.audit_helper.compare_column_values",
            "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis=True, a_relation_name='a', b_relation_name='b') -%}\r\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name)) }}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0957851,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_column_values": {
            "name": "default__compare_column_values",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_column_values.sql",
            "original_file_path": "macros\\compare_column_values.sql",
            "unique_id": "macro.audit_helper.default__compare_column_values",
            "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name) -%}\r\nwith a_query as (\r\n    {{ a_query }}\r\n),\r\n\r\nb_query as (\r\n    {{ b_query }}\r\n),\r\n\r\njoined as (\r\n    select\r\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\r\n        a_query.{{ column_to_compare }} as a_query_value,\r\n        b_query.{{ column_to_compare }} as b_query_value,\r\n        case\r\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '{% if emojis %}✅: {% endif %}perfect match'\r\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '{% if emojis %}✅: {% endif %}both are null'\r\n            when a_query.{{ primary_key }} is null then '{% if emojis %}🤷: {% endif %}missing from {{ a_relation_name }}'\r\n            when b_query.{{ primary_key }} is null then '{% if emojis %}🤷: {% endif %}missing from {{ b_relation_name }}'\r\n            when a_query.{{ column_to_compare }} is null then '{% if emojis %}🤷: {% endif %}value is null in {{ a_relation_name }} only'\r\n            when b_query.{{ column_to_compare }} is null then '{% if emojis %}🤷: {% endif %}value is null in {{ b_relation_name }} only'\r\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '{% if emojis %}❌: {% endif %}‍values do not match'\r\n            else 'unknown' -- this should never happen\r\n        end as match_status,\r\n        case\r\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\r\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\r\n            when a_query.{{ primary_key }} is null then 2\r\n            when b_query.{{ primary_key }} is null then 3\r\n            when a_query.{{ column_to_compare }} is null then 4\r\n            when b_query.{{ column_to_compare }} is null then 5\r\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\r\n            else 7 -- this should never happen\r\n        end as match_order\r\n\r\n    from a_query\r\n\r\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\r\n),\r\n\r\naggregated as (\r\n    select\r\n        '{{ column_to_compare }}' as column_name,\r\n        match_status,\r\n        match_order,\r\n        count(*) as count_records\r\n    from joined\r\n\r\n    group by column_name, match_status, match_order\r\n)\r\n\r\nselect\r\n    column_name,\r\n    match_status,\r\n    count_records,\r\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\r\n\r\nfrom aggregated\r\n\r\norder by match_order\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.0977862,
            "supported_languages": null
        },
        "macro.audit_helper.compare_column_values_verbose": {
            "name": "compare_column_values_verbose",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_column_values_verbose.sql",
            "original_file_path": "macros\\compare_column_values_verbose.sql",
            "unique_id": "macro.audit_helper.compare_column_values_verbose",
            "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\r\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_column_values_verbose"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.100754,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_column_values_verbose": {
            "name": "default__compare_column_values_verbose",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_column_values_verbose.sql",
            "original_file_path": "macros\\compare_column_values_verbose.sql",
            "unique_id": "macro.audit_helper.default__compare_column_values_verbose",
            "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\r\nwith a_query as (\r\n    {{ a_query }}\r\n),\r\n\r\nb_query as (\r\n    {{ b_query }}\r\n)\r\n    select\r\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\r\n\r\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\r\n            '{{ column_to_compare }}'::text as column_name,\r\n        {% else %}\r\n            '{{ column_to_compare }}' as column_name,\r\n        {% endif %}\r\n\r\n        coalesce(\r\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \r\n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\r\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\r\n            false\r\n        ) as perfect_match,\r\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\r\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\r\n        a_query.{{ primary_key }} is null as missing_from_a,\r\n        b_query.{{ primary_key }} is null as missing_from_b,\r\n        coalesce(\r\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \r\n            -- ensure that neither value is missing before considering it a conflict\r\n            (\r\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\r\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\r\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\r\n            ), \r\n            false\r\n        ) as conflicting_values\r\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\r\n\r\n    from a_query\r\n\r\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\r\n\r\n\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1027853,
            "supported_languages": null
        },
        "macro.audit_helper.compare_queries": {
            "name": "compare_queries",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_queries.sql",
            "original_file_path": "macros\\compare_queries.sql",
            "unique_id": "macro.audit_helper.compare_queries",
            "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) -%}\r\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize, limit)) }}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_queries"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1027853,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_queries": {
            "name": "default__compare_queries",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_queries.sql",
            "original_file_path": "macros\\compare_queries.sql",
            "unique_id": "macro.audit_helper.default__compare_queries",
            "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) %}\r\n\r\nwith a as (\r\n\r\n    {{ a_query }}\r\n\r\n),\r\n\r\nb as (\r\n\r\n    {{ b_query }}\r\n\r\n),\r\n\r\na_intersect_b as (\r\n\r\n    select * from a\r\n    {{ dbt.intersect() }}\r\n    select * from b\r\n\r\n),\r\n\r\na_except_b as (\r\n\r\n    select * from a\r\n    {{ dbt.except() }}\r\n    select * from b\r\n\r\n),\r\n\r\nb_except_a as (\r\n\r\n    select * from b\r\n    {{ dbt.except() }}\r\n    select * from a\r\n\r\n),\r\n\r\nall_records as (\r\n\r\n    select\r\n        *,\r\n        true as in_a,\r\n        true as in_b\r\n    from a_intersect_b\r\n\r\n    union all\r\n\r\n    select\r\n        *,\r\n        true as in_a,\r\n        false as in_b\r\n    from a_except_b\r\n\r\n    union all\r\n\r\n    select\r\n        *,\r\n        false as in_a,\r\n        true as in_b\r\n    from b_except_a\r\n\r\n),\r\n\r\n{%- if summarize %}\r\n\r\nsummary_stats as (\r\n\r\n    select\r\n\r\n        in_a,\r\n        in_b,\r\n        count(*) as count\r\n\r\n    from all_records\r\n    group by 1, 2\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n\r\n        *,\r\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\r\n\r\n    from summary_stats\r\n    order by in_a desc, in_b desc\r\n\r\n)\r\n\r\n{%- else %}\r\n\r\nfinal as (\r\n    \r\n    select * from all_records\r\n    where not (in_a and in_b)\r\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\r\n\r\n)\r\n\r\n{%- endif %}\r\n\r\nselect * from final\r\n{%- if limit and not summarize %}\r\nlimit {{ limit }}\r\n{%- endif %}\r\n\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.intersect",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1043212,
            "supported_languages": null
        },
        "macro.audit_helper.compare_relations": {
            "name": "compare_relations",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relations.sql",
            "original_file_path": "macros\\compare_relations.sql",
            "unique_id": "macro.audit_helper.compare_relations",
            "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true, limit=None) %}\r\n\r\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\r\n\r\n{% set column_selection %}\r\n\r\n  {% for column_name in column_names %} \r\n    {{ adapter.quote(column_name) }} \r\n    {% if not loop.last %}\r\n      , \r\n    {% endif %} \r\n  {% endfor %}\r\n\r\n{% endset %}\r\n\r\n{% set a_query %}\r\nselect\r\n\r\n  {{ column_selection }}\r\n\r\nfrom {{ a_relation }}\r\n{% endset %}\r\n\r\n{% set b_query %}\r\nselect\r\n\r\n  {{ column_selection }}\r\n\r\nfrom {{ b_relation }}\r\n{% endset %}\r\n\r\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize, limit) }}\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_filtered_columns_in_relation",
                    "macro.audit_helper.compare_queries"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.106357,
            "supported_languages": null
        },
        "macro.audit_helper.compare_relation_columns": {
            "name": "compare_relation_columns",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.compare_relation_columns",
            "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\r\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_relation_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1073577,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_relation_columns": {
            "name": "default__compare_relation_columns",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.default__compare_relation_columns",
            "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\r\n\r\nwith a_cols as (\r\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\r\n),\r\n\r\nb_cols as (\r\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\r\n)\r\n\r\nselect\r\n    column_name,\r\n    a_cols.ordinal_position as a_ordinal_position,\r\n    b_cols.ordinal_position as b_ordinal_position,\r\n    a_cols.data_type as a_data_type,\r\n    b_cols.data_type as b_data_type,\r\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\r\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match,\r\n    a_cols.data_type is not null and b_cols.data_type is null as in_a_only,\r\n    b_cols.data_type is not null and a_cols.data_type is null as in_b_only,\r\n    b_cols.data_type is not null and a_cols.data_type is not null as in_both\r\nfrom a_cols\r\nfull outer join b_cols using (column_name)\r\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.get_columns_in_relation_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1083574,
            "supported_languages": null
        },
        "macro.audit_helper.get_columns_in_relation_sql": {
            "name": "get_columns_in_relation_sql",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.get_columns_in_relation_sql",
            "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\r\n\r\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.postgres__get_columns_in_relation_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1083574,
            "supported_languages": null
        },
        "macro.audit_helper.default__get_columns_in_relation_sql": {
            "name": "default__get_columns_in_relation_sql",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql",
            "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\r\n    \r\n  {% set columns = adapter.get_columns_in_relation(relation) %}\r\n  {% for column in columns %}\r\n    select \r\n      {{ dbt.string_literal(column.name) }} as column_name, \r\n      {{ loop.index }} as ordinal_position,\r\n      {{ dbt.string_literal(column.data_type) }} as data_type\r\n\r\n  {% if not loop.last -%}\r\n    union all \r\n  {%- endif %}\r\n  {% endfor %}\r\n\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1093576,
            "supported_languages": null
        },
        "macro.audit_helper.redshift__get_columns_in_relation_sql": {
            "name": "redshift__get_columns_in_relation_sql",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql",
            "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\r\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\r\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__get_columns_in_relation_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1093576,
            "supported_languages": null
        },
        "macro.audit_helper.snowflake__get_columns_in_relation_sql": {
            "name": "snowflake__get_columns_in_relation_sql",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql",
            "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\r\n{#-\r\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\r\nEdited to include ordinal_position\r\n-#}\r\n  select\r\n      ordinal_position,\r\n      column_name,\r\n      data_type,\r\n      character_maximum_length,\r\n      numeric_precision,\r\n      numeric_scale\r\n\r\n  from\r\n  {{ relation.information_schema('columns') }}\r\n\r\n  where table_name ilike '{{ relation.identifier }}'\r\n    {% if relation.schema %}\r\n    and table_schema ilike '{{ relation.schema }}'\r\n    {% endif %}\r\n    {% if relation.database %}\r\n    and table_catalog ilike '{{ relation.database }}'\r\n    {% endif %}\r\n  order by ordinal_position\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1103575,
            "supported_languages": null
        },
        "macro.audit_helper.postgres__get_columns_in_relation_sql": {
            "name": "postgres__get_columns_in_relation_sql",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql",
            "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\r\n{#-\r\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\r\nEdited to include ordinal_position\r\n-#}\r\n  select\r\n      ordinal_position,\r\n      column_name,\r\n      data_type,\r\n      character_maximum_length,\r\n      numeric_precision,\r\n      numeric_scale\r\n\r\n  from {{ relation.information_schema('columns') }}\r\n  where table_name = '{{ relation.identifier }}'\r\n    {% if relation.schema %}\r\n    and table_schema = '{{ relation.schema }}'\r\n    {% endif %}\r\n  order by ordinal_position\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1103575,
            "supported_languages": null
        },
        "macro.audit_helper.bigquery__get_columns_in_relation_sql": {
            "name": "bigquery__get_columns_in_relation_sql",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_relation_columns.sql",
            "original_file_path": "macros\\compare_relation_columns.sql",
            "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql",
            "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\r\n\r\n  select\r\n      ordinal_position,\r\n      column_name,\r\n      data_type\r\n\r\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\r\n  where table_name = '{{ relation.identifier }}'\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1103575,
            "supported_languages": null
        },
        "macro.audit_helper.compare_row_counts": {
            "name": "compare_row_counts",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_row_counts.sql",
            "original_file_path": "macros\\compare_row_counts.sql",
            "unique_id": "macro.audit_helper.compare_row_counts",
            "macro_sql": "{% macro compare_row_counts(a_relation, b_relation) %}\r\n  {{ return(adapter.dispatch('compare_row_counts', 'audit_helper')(a_relation, b_relation)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_row_counts"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.111358,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_row_counts": {
            "name": "default__compare_row_counts",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_row_counts.sql",
            "original_file_path": "macros\\compare_row_counts.sql",
            "unique_id": "macro.audit_helper.default__compare_row_counts",
            "macro_sql": "{% macro default__compare_row_counts(a_relation, b_relation) %}\r\n\r\n        select\r\n            '{{ a_relation }}' as relation_name,\r\n            count(*) as total_records\r\n        from {{ a_relation }}\r\n\r\n        union all\r\n\r\n        select\r\n            '{{ b_relation }}' as relation_name,\r\n            count(*) as total_records\r\n        from {{ b_relation }}\r\n  \r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.111358,
            "supported_languages": null
        },
        "macro.audit_helper.compare_which_query_columns_differ": {
            "name": "compare_which_query_columns_differ",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_which_query_columns_differ.sql",
            "original_file_path": "macros\\compare_which_query_columns_differ.sql",
            "unique_id": "macro.audit_helper.compare_which_query_columns_differ",
            "macro_sql": "{% macro compare_which_query_columns_differ(a_query, b_query, primary_key_columns=[], columns=[], event_time=None) %}\r\n    {{ return(adapter.dispatch('compare_which_query_columns_differ', 'audit_helper')(a_query, b_query, primary_key_columns, columns, event_time)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__compare_which_query_columns_differ"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1143572,
            "supported_languages": null
        },
        "macro.audit_helper.default__compare_which_query_columns_differ": {
            "name": "default__compare_which_query_columns_differ",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_which_query_columns_differ.sql",
            "original_file_path": "macros\\compare_which_query_columns_differ.sql",
            "unique_id": "macro.audit_helper.default__compare_which_query_columns_differ",
            "macro_sql": "{% macro default__compare_which_query_columns_differ(a_query, b_query, primary_key_columns, columns, event_time) %}\r\n    {% set columns = audit_helper._ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\r\n    {% if event_time %}\r\n        {% set event_time_props = audit_helper._get_comparison_bounds(event_time) %}\r\n    {% endif %}\r\n\r\n    {% set joined_cols = columns | join (\", \") %}\r\n\r\n        with a as (\r\n            select \r\n                {{ joined_cols }},\r\n                {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\r\n            from ({{ a_query }}) as a_subq\r\n            {{ audit_helper.event_time_filter(event_time_props) }}\r\n        ),\r\n        b as (\r\n            select \r\n                {{ joined_cols }},\r\n                {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\r\n            from ({{ b_query }}) as b_subq\r\n            {{ audit_helper.event_time_filter(event_time_props) }}\r\n        ),\r\n\r\n        calculated as (\r\n            select \r\n                {% for column in columns %}\r\n                    {% set quoted_column = adapter.quote(column) %}\r\n                    {% set compare_statement %}\r\n                        (\r\n                            (a.{{ quoted_column }} != b.{{ quoted_column }})\r\n                            or (a.{{ quoted_column }} is null and b.{{ quoted_column }} is not null)\r\n                            or (a.{{ quoted_column }} is not null and b.{{ quoted_column }} is null)\r\n                        )\r\n                    {% endset %}\r\n                \r\n                {{ dbt.bool_or(compare_statement) }} as {{ column | lower }}_has_difference\r\n\r\n                {%- if not loop.last %}, {% endif %}\r\n                {% endfor %}\r\n            from a\r\n            inner join b on a.dbt_audit_surrogate_key = b.dbt_audit_surrogate_key\r\n        )\r\n\r\n    {% for column in columns %}\r\n    \r\n    select \r\n        '{{ column }}' as column_name, \r\n        {{ column | lower }}_has_difference as has_difference\r\n    \r\n    from calculated\r\n\r\n    {% if not loop.last %}\r\n        \r\n    union all \r\n\r\n    {% endif %}\r\n\r\n    {% endfor %}\r\n\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._ensure_all_pks_are_in_column_set",
                    "macro.audit_helper._get_comparison_bounds",
                    "macro.audit_helper._generate_null_safe_surrogate_key",
                    "macro.audit_helper.event_time_filter",
                    "macro.dbt.bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1163578,
            "supported_languages": null
        },
        "macro.audit_helper.compare_which_relation_columns_differ": {
            "name": "compare_which_relation_columns_differ",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\compare_which_relation_columns_differ.sql",
            "original_file_path": "macros\\compare_which_relation_columns_differ.sql",
            "unique_id": "macro.audit_helper.compare_which_relation_columns_differ",
            "macro_sql": "{% macro compare_which_relation_columns_differ(a_relation, b_relation, primary_key_columns=[], columns=[], event_time=None) %}\r\n    {%- if not columns -%}\r\n        {%- set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) -%}\r\n    {%- endif -%}\r\n\r\n    {{ \r\n        audit_helper.compare_which_query_columns_differ(\r\n            \"select * from \" ~ a_relation,\r\n            \"select * from \" ~ b_relation,\r\n            primary_key_columns,\r\n            columns,\r\n            event_time\r\n        )\r\n    }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._get_intersecting_columns_from_relations",
                    "macro.audit_helper.compare_which_query_columns_differ"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1173577,
            "supported_languages": null
        },
        "macro.audit_helper.quick_are_queries_identical": {
            "name": "quick_are_queries_identical",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\quick_are_queries_identical.sql",
            "original_file_path": "macros\\quick_are_queries_identical.sql",
            "unique_id": "macro.audit_helper.quick_are_queries_identical",
            "macro_sql": "{% macro quick_are_queries_identical(query_a, query_b, columns=[], event_time=None) %}\r\n    {{ return (adapter.dispatch('quick_are_queries_identical', 'audit_helper')(query_a, query_b, columns, event_time)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default__quick_are_queries_identical"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.11936,
            "supported_languages": null
        },
        "macro.audit_helper.default__quick_are_queries_identical": {
            "name": "default__quick_are_queries_identical",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\quick_are_queries_identical.sql",
            "original_file_path": "macros\\quick_are_queries_identical.sql",
            "unique_id": "macro.audit_helper.default__quick_are_queries_identical",
            "macro_sql": "{% macro default__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\r\n    {% if execute %}\r\n        {# Need to only throw this error when the macro is actually trying to be used, not during intial parse phase #}\r\n        {# if/when unit tests get support for `enabled` config, this check can be removed as they won't be supplied for parse anyway #}\r\n        {% do exceptions.raise_compiler_error(\"quick_are_queries_identical() is not implemented for adapter '\"~ target.type ~ \"'\" ) %}\r\n    {% endif %}\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1203575,
            "supported_languages": null
        },
        "macro.audit_helper.bigquery__quick_are_queries_identical": {
            "name": "bigquery__quick_are_queries_identical",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\quick_are_queries_identical.sql",
            "original_file_path": "macros\\quick_are_queries_identical.sql",
            "unique_id": "macro.audit_helper.bigquery__quick_are_queries_identical",
            "macro_sql": "{% macro bigquery__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\r\n    {% set joined_cols = columns | join(\", \") %}\r\n    {% if event_time %}\r\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\r\n    {% endif %}\r\n\r\n    with query_a as (\r\n        select {{ joined_cols }}\r\n        from ({{ query_a }})\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ), \r\n    query_b as (\r\n        select {{ joined_cols }}\r\n        from ({{ query_b }})\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    )\r\n\r\n    select count(distinct hash_result) = 1 as are_tables_identical\r\n    from (\r\n        select bit_xor(farm_fingerprint(to_json_string(query_a))) as hash_result\r\n        from query_a\r\n\r\n        union all\r\n        \r\n        select bit_xor(farm_fingerprint(to_json_string(query_b))) as hash_result\r\n        from query_b\r\n    ) as hashes\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._get_comparison_bounds",
                    "macro.audit_helper.event_time_filter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1203575,
            "supported_languages": null
        },
        "macro.audit_helper.snowflake__quick_are_queries_identical": {
            "name": "snowflake__quick_are_queries_identical",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\quick_are_queries_identical.sql",
            "original_file_path": "macros\\quick_are_queries_identical.sql",
            "unique_id": "macro.audit_helper.snowflake__quick_are_queries_identical",
            "macro_sql": "{% macro snowflake__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\r\n    {% set joined_cols = columns | join(\", \") %}\r\n    {% if event_time %}\r\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\r\n    {% endif %}\r\n\r\n    select count(distinct hash_result) = 1 as are_tables_identical\r\n    from (\r\n        select hash_agg({{ joined_cols }}) as hash_result\r\n        from ({{ query_a }}) query_a_subq\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n\r\n        union all\r\n        \r\n        select hash_agg({{ joined_cols }}) as hash_result\r\n        from ({{ query_b }}) query_b_subq\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n\r\n    ) as hashes\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._get_comparison_bounds",
                    "macro.audit_helper.event_time_filter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1213572,
            "supported_languages": null
        },
        "macro.audit_helper.quick_are_relations_identical": {
            "name": "quick_are_relations_identical",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\quick_are_relations_identical.sql",
            "original_file_path": "macros\\quick_are_relations_identical.sql",
            "unique_id": "macro.audit_helper.quick_are_relations_identical",
            "macro_sql": "{% macro quick_are_relations_identical(a_relation, b_relation, columns=None, event_time=None) %}\r\n    {% if not columns %}\r\n        {% set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) %}\r\n    {% endif %}\r\n\r\n    {{\r\n        audit_helper.quick_are_queries_identical(\r\n            \"select * from \" ~ a_relation,\r\n            \"select * from \" ~ b_relation,\r\n            columns, \r\n            event_time\r\n        )\r\n    }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._get_intersecting_columns_from_relations",
                    "macro.audit_helper.quick_are_queries_identical"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.122327,
            "supported_languages": null
        },
        "macro.audit_helper._classify_audit_row_status": {
            "name": "_classify_audit_row_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_classify_audit_row_status.sql",
            "original_file_path": "macros\\utils\\_classify_audit_row_status.sql",
            "unique_id": "macro.audit_helper._classify_audit_row_status",
            "macro_sql": "{% macro _classify_audit_row_status() %}\r\n    {{ return(adapter.dispatch('_classify_audit_row_status', 'audit_helper')()) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default___classify_audit_row_status"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1233253,
            "supported_languages": null
        },
        "macro.audit_helper.default___classify_audit_row_status": {
            "name": "default___classify_audit_row_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_classify_audit_row_status.sql",
            "original_file_path": "macros\\utils\\_classify_audit_row_status.sql",
            "unique_id": "macro.audit_helper.default___classify_audit_row_status",
            "macro_sql": "\r\n\r\n{%- macro default___classify_audit_row_status() -%}\r\n    case \r\n        when max(dbt_audit_pk_row_num) over (partition by dbt_audit_surrogate_key) > 1 then 'nonunique_pk'\r\n        when dbt_audit_in_a and dbt_audit_in_b then 'identical'\r\n        when {{ dbt.bool_or('dbt_audit_in_a') }} over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) \r\n            and {{ dbt.bool_or('dbt_audit_in_b') }} over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num)\r\n            then 'modified'\r\n        when dbt_audit_in_a then 'removed'\r\n        when dbt_audit_in_b then 'added'\r\n    end\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1233253,
            "supported_languages": null
        },
        "macro.audit_helper.redshift___classify_audit_row_status": {
            "name": "redshift___classify_audit_row_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_classify_audit_row_status.sql",
            "original_file_path": "macros\\utils\\_classify_audit_row_status.sql",
            "unique_id": "macro.audit_helper.redshift___classify_audit_row_status",
            "macro_sql": "\r\n\r\n\r\n{%- macro redshift___classify_audit_row_status() -%}\r\n    {#- Redshift doesn't support bitwise operations (e.g. bool_or) inside of a window function :( -#}\r\n    case \r\n        when max(dbt_audit_pk_row_num) over (partition by dbt_audit_surrogate_key) > 1 then 'nonunique_pk'\r\n        when dbt_audit_in_a and dbt_audit_in_b then 'identical'\r\n        when max(case when dbt_audit_in_a then 1 else 0 end) over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) = 1\r\n            and max(case when dbt_audit_in_b then 1 else 0 end) over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) = 1\r\n            then 'modified'\r\n        when dbt_audit_in_a then 'removed'\r\n        when dbt_audit_in_b then 'added'\r\n    end{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1243415,
            "supported_languages": null
        },
        "macro.audit_helper._count_num_rows_in_status": {
            "name": "_count_num_rows_in_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_count_num_rows_in_status.sql",
            "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql",
            "unique_id": "macro.audit_helper._count_num_rows_in_status",
            "macro_sql": "{% macro _count_num_rows_in_status() %}\r\n    {{ return(adapter.dispatch('_count_num_rows_in_status', 'audit_helper')()) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.postgres___count_num_rows_in_status"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1243415,
            "supported_languages": null
        },
        "macro.audit_helper.default___count_num_rows_in_status": {
            "name": "default___count_num_rows_in_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_count_num_rows_in_status.sql",
            "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql",
            "unique_id": "macro.audit_helper.default___count_num_rows_in_status",
            "macro_sql": "\r\n\r\n{%- macro default___count_num_rows_in_status() -%}\r\n    count(distinct dbt_audit_surrogate_key, dbt_audit_pk_row_num) over (partition by dbt_audit_row_status)\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1253262,
            "supported_languages": null
        },
        "macro.audit_helper.bigquery___count_num_rows_in_status": {
            "name": "bigquery___count_num_rows_in_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_count_num_rows_in_status.sql",
            "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql",
            "unique_id": "macro.audit_helper.bigquery___count_num_rows_in_status",
            "macro_sql": "\r\n\r\n{%- macro bigquery___count_num_rows_in_status() -%}\r\n    count(distinct {{ dbt.concat([\"dbt_audit_surrogate_key\", \"dbt_audit_pk_row_num\"]) }}) over (partition by dbt_audit_row_status)\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1253262,
            "supported_languages": null
        },
        "macro.audit_helper.postgres___count_num_rows_in_status": {
            "name": "postgres___count_num_rows_in_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_count_num_rows_in_status.sql",
            "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql",
            "unique_id": "macro.audit_helper.postgres___count_num_rows_in_status",
            "macro_sql": "\r\n\r\n{%- macro postgres___count_num_rows_in_status() -%}\r\n    {{ audit_helper._count_num_rows_in_status_without_distinct_window_func() }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1253262,
            "supported_languages": null
        },
        "macro.audit_helper.databricks___count_num_rows_in_status": {
            "name": "databricks___count_num_rows_in_status",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_count_num_rows_in_status.sql",
            "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql",
            "unique_id": "macro.audit_helper.databricks___count_num_rows_in_status",
            "macro_sql": "\r\n\r\n{%- macro databricks___count_num_rows_in_status() -%}\r\n    {{ audit_helper._count_num_rows_in_status_without_distinct_window_func() }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1253262,
            "supported_languages": null
        },
        "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func": {
            "name": "_count_num_rows_in_status_without_distinct_window_func",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_count_num_rows_in_status.sql",
            "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql",
            "unique_id": "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func",
            "macro_sql": "{% macro _count_num_rows_in_status_without_distinct_window_func() %}\r\n    {#- Some platforms don't support count(distinct) inside of window functions -#}\r\n    {#- You can get the same outcome by dense_rank, assuming no nulls (we've already handled that) #}\r\n    {# https://stackoverflow.com/a/22347502 -#}\r\n    dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key, dbt_audit_pk_row_num)\r\n    + dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key desc, dbt_audit_pk_row_num desc)\r\n    - 1\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1253262,
            "supported_languages": null
        },
        "macro.audit_helper._ensure_all_pks_are_in_column_set": {
            "name": "_ensure_all_pks_are_in_column_set",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_ensure_all_pks_are_in_column_set.sql",
            "original_file_path": "macros\\utils\\_ensure_all_pks_are_in_column_set.sql",
            "unique_id": "macro.audit_helper._ensure_all_pks_are_in_column_set",
            "macro_sql": "{% macro _ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\r\n    {% set lower_cols = columns | map('lower') | list %}\r\n    {% set missing_pks = [] %}\r\n\r\n    {% for pk in primary_key_columns %}\r\n        {% if pk | lower not in lower_cols %}\r\n            {% do missing_pks.append(pk) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% if missing_pks | length > 0 %}\r\n        {% set columns = missing_pks + columns %}\r\n    {% endif %}\r\n    \r\n    {% do return (columns) %}\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1273255,
            "supported_languages": null
        },
        "macro.audit_helper._generate_null_safe_surrogate_key": {
            "name": "_generate_null_safe_surrogate_key",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_null_safe_sk.sql",
            "original_file_path": "macros\\utils\\_generate_null_safe_sk.sql",
            "unique_id": "macro.audit_helper._generate_null_safe_surrogate_key",
            "macro_sql": "\r\n\r\n{%- macro _generate_null_safe_surrogate_key(field_list) -%}\r\n    {{ return(adapter.dispatch('_generate_null_safe_surrogate_key', 'audit_helper')(field_list)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default___generate_null_safe_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1273255,
            "supported_languages": null
        },
        "macro.audit_helper.default___generate_null_safe_surrogate_key": {
            "name": "default___generate_null_safe_surrogate_key",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_null_safe_sk.sql",
            "original_file_path": "macros\\utils\\_generate_null_safe_sk.sql",
            "unique_id": "macro.audit_helper.default___generate_null_safe_surrogate_key",
            "macro_sql": "\r\n\r\n{%- macro default___generate_null_safe_surrogate_key(field_list) -%}\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list -%}\r\n\r\n    {%- do fields.append(\r\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '_dbt_audit_helper_surrogate_key_null_')\"\r\n    ) -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- do fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{{ dbt.hash(dbt.concat(fields)) }}\r\n\r\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1283264,
            "supported_languages": null
        },
        "macro.audit_helper._generate_set_results": {
            "name": "_generate_set_results",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_set_results.sql",
            "original_file_path": "macros\\utils\\_generate_set_results.sql",
            "unique_id": "macro.audit_helper._generate_set_results",
            "macro_sql": "{% macro _generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props=None) %}\r\n  {{ return(adapter.dispatch('_generate_set_results', 'audit_helper')(a_query, b_query, primary_key_columns, columns, event_time_props)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper.default___generate_set_results"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1353247,
            "supported_languages": null
        },
        "macro.audit_helper.default___generate_set_results": {
            "name": "default___generate_set_results",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_set_results.sql",
            "original_file_path": "macros\\utils\\_generate_set_results.sql",
            "unique_id": "macro.audit_helper.default___generate_set_results",
            "macro_sql": "{% macro default___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\r\n    {% set joined_cols = columns | join(\", \") %}\r\n\r\n    a_base as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\r\n        from ( {{-  a_query  -}} ) a_base_subq\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    b_base as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\r\n        from ( {{-  b_query  -}} ) b_base_subq\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    a as (\r\n        select \r\n            *, \r\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key) as dbt_audit_pk_row_num\r\n        from a_base\r\n    ),\r\n\r\n    b as (\r\n        select \r\n            *, \r\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key) as dbt_audit_pk_row_num\r\n        from b_base\r\n    ),\r\n\r\n    a_intersect_b as (\r\n\r\n        select * from a\r\n        {{ dbt.intersect() }}\r\n        select * from b\r\n\r\n    ),\r\n\r\n    a_except_b as (\r\n\r\n        select * from a\r\n        {{ dbt.except() }}\r\n        select * from b\r\n\r\n    ),\r\n\r\n    b_except_a as (\r\n\r\n        select * from b\r\n        {{ dbt.except() }}\r\n        select * from a\r\n\r\n    )\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._generate_null_safe_surrogate_key",
                    "macro.audit_helper.event_time_filter",
                    "macro.dbt.intersect",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1363258,
            "supported_languages": null
        },
        "macro.audit_helper.bigquery___generate_set_results": {
            "name": "bigquery___generate_set_results",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_set_results.sql",
            "original_file_path": "macros\\utils\\_generate_set_results.sql",
            "unique_id": "macro.audit_helper.bigquery___generate_set_results",
            "macro_sql": "{% macro bigquery___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\r\n    {% set joined_cols = columns | join(\", \") %}\r\n    {% set surrogate_key = audit_helper._generate_null_safe_surrogate_key(primary_key_columns) %}\r\n    subset_columns_a as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ surrogate_key }} as dbt_audit_surrogate_key,\r\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num\r\n        from ( {{-  a_query  -}} )\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    subset_columns_b as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ surrogate_key }} as dbt_audit_surrogate_key,\r\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num\r\n        from ( {{-  b_query  -}} )\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    a as (\r\n        select\r\n            *,\r\n            farm_fingerprint(to_json_string(subset_columns_a)) as dbt_audit_row_hash\r\n        from subset_columns_a\r\n    ), \r\n\r\n    b as (\r\n        select\r\n            *,\r\n            farm_fingerprint(to_json_string(subset_columns_b)) as dbt_audit_row_hash\r\n        from subset_columns_b\r\n    ),\r\n\r\n    a_intersect_b as (\r\n\r\n        select * from a\r\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\r\n\r\n    ),\r\n\r\n    a_except_b as (\r\n\r\n        select * from a\r\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\r\n\r\n    ),\r\n\r\n    b_except_a as (\r\n\r\n        select * from b\r\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\r\n\r\n    )\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._generate_null_safe_surrogate_key",
                    "macro.audit_helper.event_time_filter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1373262,
            "supported_languages": null
        },
        "macro.audit_helper.databricks___generate_set_results": {
            "name": "databricks___generate_set_results",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_set_results.sql",
            "original_file_path": "macros\\utils\\_generate_set_results.sql",
            "unique_id": "macro.audit_helper.databricks___generate_set_results",
            "macro_sql": "{% macro databricks___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\r\n    {% set cast_columns = [] %}\r\n    {# Map types can't be compared by default (you need to opt in to a legacy behaviour flag) #}\r\n    {# so everything needs to be cast as a string first :( #}\r\n    {% for col in columns %}\r\n        {% do cast_columns.append(dbt.cast(col, api.Column.translate_type(\"string\"))) %}\r\n    {% endfor %}\r\n    {% set joined_cols = cast_columns | join(\", \") %}\r\n    {% set surrogate_key = audit_helper._generate_null_safe_surrogate_key(primary_key_columns) %}\r\n    a as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ surrogate_key }} as dbt_audit_surrogate_key,\r\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num,\r\n            xxhash64({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\r\n        from ( {{-  a_query  -}} )\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    b as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ surrogate_key }} as dbt_audit_surrogate_key,\r\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num,\r\n            xxhash64({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\r\n        from ( {{-  b_query  -}} )\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    a_intersect_b as (\r\n\r\n        select * from a\r\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\r\n\r\n    ),\r\n\r\n    a_except_b as (\r\n\r\n        select * from a\r\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\r\n\r\n    ),\r\n\r\n    b_except_a as (\r\n\r\n        select * from b\r\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\r\n\r\n    )   \r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.cast",
                    "macro.audit_helper._generate_null_safe_surrogate_key",
                    "macro.audit_helper.event_time_filter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1383257,
            "supported_languages": null
        },
        "macro.audit_helper.snowflake___generate_set_results": {
            "name": "snowflake___generate_set_results",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_generate_set_results.sql",
            "original_file_path": "macros\\utils\\_generate_set_results.sql",
            "unique_id": "macro.audit_helper.snowflake___generate_set_results",
            "macro_sql": "{% macro snowflake___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\r\n    {% set joined_cols = columns | join(\", \") %}\r\n    a as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key,\r\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key ) as dbt_audit_pk_row_num,\r\n            hash({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\r\n        from ( {{-  a_query  -}} )\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    b as (\r\n        select \r\n            {{ joined_cols }}, \r\n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key,\r\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key ) as dbt_audit_pk_row_num,\r\n            hash({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\r\n        from ( {{-  b_query  -}} )\r\n        {{ audit_helper.event_time_filter(event_time_props) }}\r\n    ),\r\n\r\n    a_intersect_b as (\r\n\r\n        select * from a\r\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\r\n\r\n    ),\r\n\r\n    a_except_b as (\r\n\r\n        select * from a\r\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\r\n\r\n    ),\r\n\r\n    b_except_a as (\r\n\r\n        select * from b\r\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\r\n\r\n    )\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.audit_helper._generate_null_safe_surrogate_key",
                    "macro.audit_helper.event_time_filter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1393251,
            "supported_languages": null
        },
        "macro.audit_helper._get_comparison_bounds": {
            "name": "_get_comparison_bounds",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_get_comparison_bounds.sql",
            "original_file_path": "macros\\utils\\_get_comparison_bounds.sql",
            "unique_id": "macro.audit_helper._get_comparison_bounds",
            "macro_sql": "{% macro _get_comparison_bounds(a_query, b_query, event_time) %}\r\n    {% set min_max_queries %}\r\n        with min_maxes as (\r\n            select min({{ event_time }}) as min_event_time, max({{ event_time }}) as max_event_time\r\n            from ({{ a_query }}) a_subq\r\n            union all \r\n            select min({{ event_time }}) as min_event_time, max({{ event_time }}) as max_event_time\r\n            from ({{ b_query }}) b_subq\r\n        )\r\n        select max(min_event_time) as min_event_time, min(max_event_time) as max_event_time\r\n        from min_maxes\r\n    {% endset %}\r\n\r\n    {% set query_response = dbt_utils.get_query_results_as_dict(min_max_queries) %}\r\n    \r\n    {% set event_time_props = {\"event_time\": event_time} %}\r\n    \r\n    {# query_response.keys() are only `min_event_time` and `max_event_time`, but they have indeterminate capitalisation #}\r\n    {# hence the dynamic approach for what is otherwise just two well-known values #}\r\n    {% for k in query_response.keys() %}\r\n        {% do event_time_props.update({k | lower: query_response[k][0]}) %}\r\n    {% endfor %}\r\n    \r\n    {% do return(event_time_props) %}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1413255,
            "supported_languages": null
        },
        "macro.audit_helper.event_time_filter": {
            "name": "event_time_filter",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_get_comparison_bounds.sql",
            "original_file_path": "macros\\utils\\_get_comparison_bounds.sql",
            "unique_id": "macro.audit_helper.event_time_filter",
            "macro_sql": "{% macro event_time_filter(event_time_props) %}\r\n    {% if event_time_props %}\r\n        where {{ event_time_props[\"event_time\"] }} >= '{{ event_time_props[\"min_event_time\"] }}'\r\n        and {{ event_time_props[\"event_time\"] }} <= '{{ event_time_props[\"max_event_time\"] }}'\r\n    {% endif %}\r\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.142326,
            "supported_languages": null
        },
        "macro.audit_helper._get_intersecting_columns_from_relations": {
            "name": "_get_intersecting_columns_from_relations",
            "resource_type": "macro",
            "package_name": "audit_helper",
            "path": "macros\\utils\\_get_intersecting_columns_from_relations.sql",
            "original_file_path": "macros\\utils\\_get_intersecting_columns_from_relations.sql",
            "unique_id": "macro.audit_helper._get_intersecting_columns_from_relations",
            "macro_sql": "{% macro _get_intersecting_columns_from_relations(a_relation, b_relation) %}        \r\n    {%- set a_cols = dbt_utils.get_filtered_columns_in_relation(a_relation) -%}\r\n    {%- set b_cols = dbt_utils.get_filtered_columns_in_relation(b_relation) -%}\r\n    \r\n    {%- set intersection = [] -%}\r\n    {%- for col in a_cols -%}\r\n        {%- if col in b_cols -%}\r\n            {%- do intersection.append(col) -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {% do return(intersection) %}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1433258,
            "supported_languages": null
        },
        "macro.dbt_date.get_base_dates": {
            "name": "get_base_dates",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "unique_id": "macro.dbt_date.get_base_dates",
            "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_base_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.145329,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_base_dates": {
            "name": "default__get_base_dates",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "unique_id": "macro.dbt_date.default__get_base_dates",
            "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1473598,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__get_base_dates": {
            "name": "bigquery__get_base_dates",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "unique_id": "macro.dbt_date.bigquery__get_base_dates",
            "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.date_spine",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1483576,
            "supported_languages": null
        },
        "macro.dbt_date.trino__get_base_dates": {
            "name": "trino__get_base_dates",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_base_dates.sql",
            "original_file_path": "macros\\get_base_dates.sql",
            "unique_id": "macro.dbt_date.trino__get_base_dates",
            "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.now",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.149355,
            "supported_languages": null
        },
        "macro.dbt_date.get_date_dimension": {
            "name": "get_date_dimension",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_date_dimension.sql",
            "original_file_path": "macros\\get_date_dimension.sql",
            "unique_id": "macro.dbt_date.get_date_dimension",
            "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__get_date_dimension"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1603277,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_date_dimension": {
            "name": "default__get_date_dimension",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_date_dimension.sql",
            "original_file_path": "macros\\get_date_dimension.sql",
            "unique_id": "macro.dbt_date.default__get_date_dimension",
            "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt.date_trunc",
                    "macro.dbt.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1643577,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__get_date_dimension": {
            "name": "postgres__get_date_dimension",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\get_date_dimension.sql",
            "original_file_path": "macros\\get_date_dimension.sql",
            "unique_id": "macro.dbt_date.postgres__get_date_dimension",
            "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt.date_trunc",
                    "macro.dbt.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1683576,
            "supported_languages": null
        },
        "macro.dbt_date.convert_timezone": {
            "name": "convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.convert_timezone",
            "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1693583,
            "supported_languages": null
        },
        "macro.dbt_date.default__convert_timezone": {
            "name": "default__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.default__convert_timezone",
            "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.170358,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__convert_timezone": {
            "name": "bigquery__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.bigquery__convert_timezone",
            "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.170358,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__convert_timezone": {
            "name": "postgres__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.postgres__convert_timezone",
            "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.170358,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__convert_timezone": {
            "name": "redshift__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.redshift__convert_timezone",
            "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.171358,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__convert_timezone": {
            "name": "duckdb__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.duckdb__convert_timezone",
            "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.171358,
            "supported_languages": null
        },
        "macro.dbt_date.spark__convert_timezone": {
            "name": "spark__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.spark__convert_timezone",
            "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.171358,
            "supported_languages": null
        },
        "macro.dbt_date.trino__convert_timezone": {
            "name": "trino__convert_timezone",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\convert_timezone.sql",
            "original_file_path": "macros\\calendar_date\\convert_timezone.sql",
            "unique_id": "macro.dbt_date.trino__convert_timezone",
            "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.172357,
            "supported_languages": null
        },
        "macro.dbt_date.date_part": {
            "name": "date_part",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "unique_id": "macro.dbt_date.date_part",
            "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.172357,
            "supported_languages": null
        },
        "macro.dbt_date.default__date_part": {
            "name": "default__date_part",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "unique_id": "macro.dbt_date.default__date_part",
            "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.172357,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__date_part": {
            "name": "bigquery__date_part",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "unique_id": "macro.dbt_date.bigquery__date_part",
            "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1733258,
            "supported_languages": null
        },
        "macro.dbt_date.trino__date_part": {
            "name": "trino__date_part",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\date_part.sql",
            "original_file_path": "macros\\calendar_date\\date_part.sql",
            "unique_id": "macro.dbt_date.trino__date_part",
            "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1733258,
            "supported_languages": null
        },
        "macro.dbt_date.day_name": {
            "name": "day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.day_name",
            "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__day_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.174357,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_name": {
            "name": "default__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.default__day_name",
            "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.174357,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_name": {
            "name": "snowflake__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.snowflake__day_name",
            "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1753285,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_name": {
            "name": "bigquery__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.bigquery__day_name",
            "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1753285,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_name": {
            "name": "postgres__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.postgres__day_name",
            "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1753285,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__day_name": {
            "name": "duckdb__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.duckdb__day_name",
            "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1763532,
            "supported_languages": null
        },
        "macro.dbt_date.spark__day_name": {
            "name": "spark__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.spark__day_name",
            "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1763532,
            "supported_languages": null
        },
        "macro.dbt_date.trino__day_name": {
            "name": "trino__day_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_name.sql",
            "original_file_path": "macros\\calendar_date\\day_name.sql",
            "unique_id": "macro.dbt_date.trino__day_name",
            "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1763532,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_month": {
            "name": "day_of_month",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_month.sql",
            "original_file_path": "macros\\calendar_date\\day_of_month.sql",
            "unique_id": "macro.dbt_date.day_of_month",
            "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1773586,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_month": {
            "name": "redshift__day_of_month",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_month.sql",
            "original_file_path": "macros\\calendar_date\\day_of_month.sql",
            "unique_id": "macro.dbt_date.redshift__day_of_month",
            "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1773586,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_week": {
            "name": "day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.day_of_week",
            "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__day_of_week"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1813524,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_week": {
            "name": "default__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.default__day_of_week",
            "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1813524,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_of_week": {
            "name": "snowflake__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.snowflake__day_of_week",
            "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1823578,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_of_week": {
            "name": "bigquery__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.bigquery__day_of_week",
            "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1823578,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_week": {
            "name": "postgres__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.postgres__day_of_week",
            "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.18336,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_week": {
            "name": "redshift__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.redshift__day_of_week",
            "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1843271,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__day_of_week": {
            "name": "duckdb__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.duckdb__day_of_week",
            "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__day_of_week"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1843271,
            "supported_languages": null
        },
        "macro.dbt_date.spark__day_of_week": {
            "name": "spark__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.spark__day_of_week",
            "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.185369,
            "supported_languages": null
        },
        "macro.dbt_date.trino__day_of_week": {
            "name": "trino__day_of_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_week.sql",
            "original_file_path": "macros\\calendar_date\\day_of_week.sql",
            "unique_id": "macro.dbt_date.trino__day_of_week",
            "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.185369,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_year": {
            "name": "day_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "unique_id": "macro.dbt_date.day_of_year",
            "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__day_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1863575,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_year": {
            "name": "default__day_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "unique_id": "macro.dbt_date.default__day_of_year",
            "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1863575,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_year": {
            "name": "postgres__day_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "unique_id": "macro.dbt_date.postgres__day_of_year",
            "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1863575,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_year": {
            "name": "redshift__day_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "unique_id": "macro.dbt_date.redshift__day_of_year",
            "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1873531,
            "supported_languages": null
        },
        "macro.dbt_date.spark__day_of_year": {
            "name": "spark__day_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "unique_id": "macro.dbt_date.spark__day_of_year",
            "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1873531,
            "supported_languages": null
        },
        "macro.dbt_date.trino__day_of_year": {
            "name": "trino__day_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\day_of_year.sql",
            "original_file_path": "macros\\calendar_date\\day_of_year.sql",
            "unique_id": "macro.dbt_date.trino__day_of_year",
            "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1873531,
            "supported_languages": null
        },
        "macro.dbt_date.from_unixtimestamp": {
            "name": "from_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.from_unixtimestamp",
            "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__from_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.190393,
            "supported_languages": null
        },
        "macro.dbt_date.default__from_unixtimestamp": {
            "name": "default__from_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.default__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.190393,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__from_unixtimestamp": {
            "name": "postgres__from_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1913931,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__from_unixtimestamp": {
            "name": "snowflake__from_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1923933,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__from_unixtimestamp": {
            "name": "bigquery__from_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1923933,
            "supported_languages": null
        },
        "macro.dbt_date.trino__from_unixtimestamp": {
            "name": "trino__from_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.trino__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1933968,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_end": {
            "name": "iso_week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "unique_id": "macro.dbt_date.iso_week_end",
            "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.194369,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_end": {
            "name": "_iso_week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "unique_id": "macro.dbt_date._iso_week_end",
            "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.194369,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_end": {
            "name": "default__iso_week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "unique_id": "macro.dbt_date.default__iso_week_end",
            "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.195362,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_end": {
            "name": "snowflake__iso_week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_end.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_end.sql",
            "unique_id": "macro.dbt_date.snowflake__iso_week_end",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.195362,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_of_year": {
            "name": "iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.iso_week_of_year",
            "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.postgres__iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1963618,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_of_year": {
            "name": "_iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date._iso_week_of_year",
            "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1963618,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_of_year": {
            "name": "default__iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.default__iso_week_of_year",
            "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1963618,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_of_year": {
            "name": "snowflake__iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1973615,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_of_year": {
            "name": "postgres__iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
            "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1973615,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__iso_week_of_year": {
            "name": "duckdb__iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.duckdb__iso_week_of_year",
            "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1973615,
            "supported_languages": null
        },
        "macro.dbt_date.spark__iso_week_of_year": {
            "name": "spark__iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.spark__iso_week_of_year",
            "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1983619,
            "supported_languages": null
        },
        "macro.dbt_date.trino__iso_week_of_year": {
            "name": "trino__iso_week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql",
            "unique_id": "macro.dbt_date.trino__iso_week_of_year",
            "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1983619,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_start": {
            "name": "iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.iso_week_start",
            "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.postgres__iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1993616,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_start": {
            "name": "_iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date._iso_week_start",
            "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1993616,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_start": {
            "name": "default__iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.default__iso_week_start",
            "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.1993616,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_start": {
            "name": "snowflake__iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.snowflake__iso_week_start",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2003937,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_start": {
            "name": "postgres__iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.postgres__iso_week_start",
            "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2003937,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__iso_week_start": {
            "name": "duckdb__iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.duckdb__iso_week_start",
            "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2003937,
            "supported_languages": null
        },
        "macro.dbt_date.spark__iso_week_start": {
            "name": "spark__iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.spark__iso_week_start",
            "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2003937,
            "supported_languages": null
        },
        "macro.dbt_date.trino__iso_week_start": {
            "name": "trino__iso_week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\iso_week_start.sql",
            "original_file_path": "macros\\calendar_date\\iso_week_start.sql",
            "unique_id": "macro.dbt_date.trino__iso_week_start",
            "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.201393,
            "supported_languages": null
        },
        "macro.dbt_date.last_month": {
            "name": "last_month",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\last_month.sql",
            "original_file_path": "macros\\calendar_date\\last_month.sql",
            "unique_id": "macro.dbt_date.last_month",
            "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.201393,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_name": {
            "name": "last_month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\last_month_name.sql",
            "original_file_path": "macros\\calendar_date\\last_month_name.sql",
            "unique_id": "macro.dbt_date.last_month_name",
            "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.201393,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_number": {
            "name": "last_month_number",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\last_month_number.sql",
            "original_file_path": "macros\\calendar_date\\last_month_number.sql",
            "unique_id": "macro.dbt_date.last_month_number",
            "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2023947,
            "supported_languages": null
        },
        "macro.dbt_date.last_week": {
            "name": "last_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\last_week.sql",
            "original_file_path": "macros\\calendar_date\\last_week.sql",
            "unique_id": "macro.dbt_date.last_week",
            "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2023947,
            "supported_languages": null
        },
        "macro.dbt_date.month_name": {
            "name": "month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.month_name",
            "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__month_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2033944,
            "supported_languages": null
        },
        "macro.dbt_date.default__month_name": {
            "name": "default__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.default__month_name",
            "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2033944,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__month_name": {
            "name": "bigquery__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.bigquery__month_name",
            "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2043934,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__month_name": {
            "name": "snowflake__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.snowflake__month_name",
            "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2043934,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__month_name": {
            "name": "postgres__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.postgres__month_name",
            "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2049313,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__month_name": {
            "name": "duckdb__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.duckdb__month_name",
            "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2049313,
            "supported_languages": null
        },
        "macro.dbt_date.spark__month_name": {
            "name": "spark__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.spark__month_name",
            "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'LLL' if short else 'LLLL' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2049313,
            "supported_languages": null
        },
        "macro.dbt_date.trino__month_name": {
            "name": "trino__month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\month_name.sql",
            "original_file_path": "macros\\calendar_date\\month_name.sql",
            "unique_id": "macro.dbt_date.trino__month_name",
            "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2059643,
            "supported_languages": null
        },
        "macro.dbt_date.next_month": {
            "name": "next_month",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\next_month.sql",
            "original_file_path": "macros\\calendar_date\\next_month.sql",
            "unique_id": "macro.dbt_date.next_month",
            "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2059643,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_name": {
            "name": "next_month_name",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\next_month_name.sql",
            "original_file_path": "macros\\calendar_date\\next_month_name.sql",
            "unique_id": "macro.dbt_date.next_month_name",
            "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2059643,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_number": {
            "name": "next_month_number",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\next_month_number.sql",
            "original_file_path": "macros\\calendar_date\\next_month_number.sql",
            "unique_id": "macro.dbt_date.next_month_number",
            "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2069633,
            "supported_languages": null
        },
        "macro.dbt_date.next_week": {
            "name": "next_week",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\next_week.sql",
            "original_file_path": "macros\\calendar_date\\next_week.sql",
            "unique_id": "macro.dbt_date.next_week",
            "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2069633,
            "supported_languages": null
        },
        "macro.dbt_date.now": {
            "name": "now",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\now.sql",
            "original_file_path": "macros\\calendar_date\\now.sql",
            "unique_id": "macro.dbt_date.now",
            "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.convert_timezone",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2079675,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_ago": {
            "name": "n_days_ago",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\n_days_ago.sql",
            "original_file_path": "macros\\calendar_date\\n_days_ago.sql",
            "unique_id": "macro.dbt_date.n_days_ago",
            "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2079675,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_away": {
            "name": "n_days_away",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\n_days_away.sql",
            "original_file_path": "macros\\calendar_date\\n_days_away.sql",
            "unique_id": "macro.dbt_date.n_days_away",
            "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.208975,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_ago": {
            "name": "n_months_ago",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\n_months_ago.sql",
            "original_file_path": "macros\\calendar_date\\n_months_ago.sql",
            "unique_id": "macro.dbt_date.n_months_ago",
            "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.208975,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_away": {
            "name": "n_months_away",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\n_months_away.sql",
            "original_file_path": "macros\\calendar_date\\n_months_away.sql",
            "unique_id": "macro.dbt_date.n_months_away",
            "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2099361,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_ago": {
            "name": "n_weeks_ago",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\n_weeks_ago.sql",
            "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql",
            "unique_id": "macro.dbt_date.n_weeks_ago",
            "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2109544,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_away": {
            "name": "n_weeks_away",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\n_weeks_away.sql",
            "original_file_path": "macros\\calendar_date\\n_weeks_away.sql",
            "unique_id": "macro.dbt_date.n_weeks_away",
            "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2109544,
            "supported_languages": null
        },
        "macro.dbt_date.periods_since": {
            "name": "periods_since",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\periods_since.sql",
            "original_file_path": "macros\\calendar_date\\periods_since.sql",
            "unique_id": "macro.dbt_date.periods_since",
            "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.datediff",
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2119648,
            "supported_languages": null
        },
        "macro.dbt_date.round_timestamp": {
            "name": "round_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\round_timestamp.sql",
            "original_file_path": "macros\\calendar_date\\round_timestamp.sql",
            "unique_id": "macro.dbt_date.round_timestamp",
            "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2119648,
            "supported_languages": null
        },
        "macro.dbt_date.today": {
            "name": "today",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\today.sql",
            "original_file_path": "macros\\calendar_date\\today.sql",
            "unique_id": "macro.dbt_date.today",
            "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2119648,
            "supported_languages": null
        },
        "macro.dbt_date.tomorrow": {
            "name": "tomorrow",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\tomorrow.sql",
            "original_file_path": "macros\\calendar_date\\tomorrow.sql",
            "unique_id": "macro.dbt_date.tomorrow",
            "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.21297,
            "supported_languages": null
        },
        "macro.dbt_date.to_unixtimestamp": {
            "name": "to_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.to_unixtimestamp",
            "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__to_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.21297,
            "supported_languages": null
        },
        "macro.dbt_date.default__to_unixtimestamp": {
            "name": "default__to_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.default__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2139647,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__to_unixtimestamp": {
            "name": "snowflake__to_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2139647,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__to_unixtimestamp": {
            "name": "bigquery__to_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2139647,
            "supported_languages": null
        },
        "macro.dbt_date.spark__to_unixtimestamp": {
            "name": "spark__to_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.spark__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2139647,
            "supported_languages": null
        },
        "macro.dbt_date.trino__to_unixtimestamp": {
            "name": "trino__to_unixtimestamp",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql",
            "unique_id": "macro.dbt_date.trino__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2149677,
            "supported_languages": null
        },
        "macro.dbt_date.week_end": {
            "name": "week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "unique_id": "macro.dbt_date.week_end",
            "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.postgres__week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2149677,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_end": {
            "name": "default__week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "unique_id": "macro.dbt_date.default__week_end",
            "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2159705,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_end": {
            "name": "snowflake__week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "unique_id": "macro.dbt_date.snowflake__week_end",
            "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2159705,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_end": {
            "name": "postgres__week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "unique_id": "macro.dbt_date.postgres__week_end",
            "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2159705,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__week_end": {
            "name": "duckdb__week_end",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_end.sql",
            "original_file_path": "macros\\calendar_date\\week_end.sql",
            "unique_id": "macro.dbt_date.duckdb__week_end",
            "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2169707,
            "supported_languages": null
        },
        "macro.dbt_date.week_of_year": {
            "name": "week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "unique_id": "macro.dbt_date.week_of_year",
            "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.postgres__week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2169707,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_of_year": {
            "name": "default__week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "unique_id": "macro.dbt_date.default__week_of_year",
            "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2179627,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_of_year": {
            "name": "postgres__week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "unique_id": "macro.dbt_date.postgres__week_of_year",
            "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2179627,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__week_of_year": {
            "name": "duckdb__week_of_year",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_of_year.sql",
            "original_file_path": "macros\\calendar_date\\week_of_year.sql",
            "unique_id": "macro.dbt_date.duckdb__week_of_year",
            "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2179627,
            "supported_languages": null
        },
        "macro.dbt_date.week_start": {
            "name": "week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "unique_id": "macro.dbt_date.week_start",
            "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.postgres__week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2189689,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_start": {
            "name": "default__week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "unique_id": "macro.dbt_date.default__week_start",
            "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2189689,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_start": {
            "name": "snowflake__week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "unique_id": "macro.dbt_date.snowflake__week_start",
            "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.day_of_week",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2199664,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_start": {
            "name": "postgres__week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "unique_id": "macro.dbt_date.postgres__week_start",
            "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2199664,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__week_start": {
            "name": "duckdb__week_start",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\week_start.sql",
            "original_file_path": "macros\\calendar_date\\week_start.sql",
            "unique_id": "macro.dbt_date.duckdb__week_start",
            "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2199664,
            "supported_languages": null
        },
        "macro.dbt_date.yesterday": {
            "name": "yesterday",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\calendar_date\\yesterday.sql",
            "original_file_path": "macros\\calendar_date\\yesterday.sql",
            "unique_id": "macro.dbt_date.yesterday",
            "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2209675,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_periods": {
            "name": "get_fiscal_periods",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\fiscal_date\\get_fiscal_periods.sql",
            "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql",
            "unique_id": "macro.dbt_date.get_fiscal_periods",
            "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_fiscal_year_dates",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.221969,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_year_dates": {
            "name": "get_fiscal_year_dates",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "unique_id": "macro.dbt_date.get_fiscal_year_dates",
            "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_fiscal_year_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2239695,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_fiscal_year_dates": {
            "name": "default__get_fiscal_year_dates",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql",
            "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
            "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.22497,
            "supported_languages": null
        },
        "macro.dbt_date.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\date_spine.sql",
            "original_file_path": "macros\\_utils\\date_spine.sql",
            "unique_id": "macro.dbt_date.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2259676,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\date_spine.sql",
            "original_file_path": "macros\\_utils\\date_spine.sql",
            "unique_id": "macro.dbt_date.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2269704,
            "supported_languages": null
        },
        "macro.dbt_date.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\date_spine.sql",
            "original_file_path": "macros\\_utils\\date_spine.sql",
            "unique_id": "macro.dbt_date.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2269704,
            "supported_languages": null
        },
        "macro.dbt_date.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\date_spine.sql",
            "original_file_path": "macros\\_utils\\date_spine.sql",
            "unique_id": "macro.dbt_date.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.generate_series",
                    "macro.dbt_date.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.227969,
            "supported_languages": null
        },
        "macro.dbt_date.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\generate_series.sql",
            "original_file_path": "macros\\_utils\\generate_series.sql",
            "unique_id": "macro.dbt_date.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2289689,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\generate_series.sql",
            "original_file_path": "macros\\_utils\\generate_series.sql",
            "unique_id": "macro.dbt_date.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2299678,
            "supported_languages": null
        },
        "macro.dbt_date.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\generate_series.sql",
            "original_file_path": "macros\\_utils\\generate_series.sql",
            "unique_id": "macro.dbt_date.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2299678,
            "supported_languages": null
        },
        "macro.dbt_date.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\generate_series.sql",
            "original_file_path": "macros\\_utils\\generate_series.sql",
            "unique_id": "macro.dbt_date.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2309687,
            "supported_languages": null
        },
        "macro.dbt_date.date": {
            "name": "date",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\modules_datetime.sql",
            "original_file_path": "macros\\_utils\\modules_datetime.sql",
            "unique_id": "macro.dbt_date.date",
            "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2319646,
            "supported_languages": null
        },
        "macro.dbt_date.datetime": {
            "name": "datetime",
            "resource_type": "macro",
            "package_name": "dbt_date",
            "path": "macros\\_utils\\modules_datetime.sql",
            "original_file_path": "macros\\_utils\\modules_datetime.sql",
            "unique_id": "macro.dbt_date.datetime",
            "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2329655,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "name": "test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2329655,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "name": "default__test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.233973,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "name": "test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2349675,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "name": "default__test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2369692,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "name": "test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2369692,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "name": "default__test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.237973,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "name": "test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "unique_id": "macro.dbt_utils.test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2389693,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "name": "default__test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "unique_id": "macro.dbt_utils.default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.24097,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "name": "test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2419677,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "name": "default__test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2439675,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "name": "test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2439675,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "name": "default__test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2449632,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "name": "test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2469676,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "name": "default__test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.247969,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "name": "test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2529676,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "name": "default__test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2549694,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "name": "test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2559679,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "name": "default__test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.256968,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "name": "test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "unique_id": "macro.dbt_utils.test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2579691,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "name": "default__test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2579691,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_empty_string": {
            "name": "test_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_empty_string.sql",
            "original_file_path": "macros\\generic_tests\\not_empty_string.sql",
            "unique_id": "macro.dbt_utils.test_not_empty_string",
            "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2589703,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_empty_string": {
            "name": "default__test_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_empty_string.sql",
            "original_file_path": "macros\\generic_tests\\not_empty_string.sql",
            "unique_id": "macro.dbt_utils.default__test_not_empty_string",
            "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2599702,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "name": "test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2609582,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "name": "default__test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2619371,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "name": "test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "unique_id": "macro.dbt_utils.test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2629645,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "name": "default__test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "unique_id": "macro.dbt_utils.default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.current_timestamp",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2649374,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "name": "test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2659733,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "name": "default__test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2659733,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "name": "test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.26697,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "name": "default__test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2689354,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "name": "test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2699356,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "name": "default__test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2709353,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "name": "log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "unique_id": "macro.dbt_utils.log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2719376,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "name": "default__log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "unique_id": "macro.dbt_utils.default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2719376,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "name": "pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2719376,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "name": "default__pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2729766,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "name": "pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "unique_id": "macro.dbt_utils.pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2729766,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "name": "default__pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2739377,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "name": "slugify",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\slugify.sql",
            "original_file_path": "macros\\jinja_helpers\\slugify.sql",
            "unique_id": "macro.dbt_utils.slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2739377,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "name": "_is_ephemeral",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\_is_ephemeral.sql",
            "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql",
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2759671,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "name": "_is_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\jinja_helpers\\_is_relation.sql",
            "original_file_path": "macros\\jinja_helpers\\_is_relation.sql",
            "unique_id": "macro.dbt_utils._is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2769675,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.277964,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2789645,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "unique_id": "macro.dbt_utils.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2789645,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "unique_id": "macro.dbt_utils.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2799382,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "name": "deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "unique_id": "macro.dbt_utils.deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2809641,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "name": "default__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2809641,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "name": "redshift__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.281968,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "name": "postgres__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.281968,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "name": "snowflake__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.281968,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "name": "bigquery__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2829645,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2839675,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2839675,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "unique_id": "macro.dbt_utils.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.284963,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "unique_id": "macro.dbt_utils.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.285963,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_surrogate_key": {
            "name": "generate_surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\generate_surrogate_key.sql",
            "original_file_path": "macros\\sql\\generate_surrogate_key.sql",
            "unique_id": "macro.dbt_utils.generate_surrogate_key",
            "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.285963,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_surrogate_key": {
            "name": "default__generate_surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\generate_surrogate_key.sql",
            "original_file_path": "macros\\sql\\generate_surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
            "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2879388,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "name": "get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "unique_id": "macro.dbt_utils.get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.28897,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "name": "default__get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2910087,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "name": "get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2920015,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "name": "default__get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.293975,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "name": "get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.293975,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "name": "default__get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2949774,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "name": "get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.2969744,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "name": "default__get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.298007,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "name": "get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.299001,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "name": "default__get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3000014,
            "supported_languages": null
        },
        "macro.dbt_utils.get_single_value": {
            "name": "get_single_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_single_value.sql",
            "original_file_path": "macros\\sql\\get_single_value.sql",
            "unique_id": "macro.dbt_utils.get_single_value",
            "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_single_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3010027,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_single_value": {
            "name": "default__get_single_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_single_value.sql",
            "original_file_path": "macros\\sql\\get_single_value.sql",
            "unique_id": "macro.dbt_utils.default__get_single_value",
            "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.301978,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "name": "get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3045387,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "name": "default__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3055701,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "name": "bigquery__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3065703,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "name": "_bigquery__get_matching_schemata",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3075712,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "name": "get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3075712,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "name": "default__get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3085706,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "name": "get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.309573,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "name": "default__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.309573,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "name": "postgres__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.309573,
            "supported_languages": null
        },
        "macro.dbt_utils.databricks__get_table_types_sql": {
            "name": "databricks__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.databricks__get_table_types_sql",
            "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.310573,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "name": "group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "unique_id": "macro.dbt_utils.group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.310573,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "name": "default__group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "unique_id": "macro.dbt_utils.default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3115444,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "name": "degrees_to_radians",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3125498,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "name": "haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "unique_id": "macro.dbt_utils.haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.313571,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "name": "default__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.314571,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "name": "bigquery__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3155704,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "name": "nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "unique_id": "macro.dbt_utils.nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.31657,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "name": "default__nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.31657,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "name": "nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3175702,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "name": "default__nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3175702,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "name": "pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "unique_id": "macro.dbt_utils.pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3195705,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "name": "default__pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "unique_id": "macro.dbt_utils.default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3205702,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "name": "safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "unique_id": "macro.dbt_utils.safe_add",
            "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3215704,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "name": "default__safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "unique_id": "macro.dbt_utils.default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3225708,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_divide": {
            "name": "safe_divide",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\safe_divide.sql",
            "original_file_path": "macros\\sql\\safe_divide.sql",
            "unique_id": "macro.dbt_utils.safe_divide",
            "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_divide"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3225708,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_divide": {
            "name": "default__safe_divide",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\safe_divide.sql",
            "original_file_path": "macros\\sql\\safe_divide.sql",
            "unique_id": "macro.dbt_utils.default__safe_divide",
            "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3225708,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_subtract": {
            "name": "safe_subtract",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\safe_subtract.sql",
            "original_file_path": "macros\\sql\\safe_subtract.sql",
            "unique_id": "macro.dbt_utils.safe_subtract",
            "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_subtract"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.323571,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_subtract": {
            "name": "default__safe_subtract",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\safe_subtract.sql",
            "original_file_path": "macros\\sql\\safe_subtract.sql",
            "unique_id": "macro.dbt_utils.default__safe_subtract",
            "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3245752,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "name": "star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "unique_id": "macro.dbt_utils.star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.326575,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "name": "default__star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "unique_id": "macro.dbt_utils.default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3285701,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "name": "surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "unique_id": "macro.dbt_utils.surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.32957,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "name": "default__surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.32957,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "name": "union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "unique_id": "macro.dbt_utils.union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.33357,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "name": "default__union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "unique_id": "macro.dbt_utils.default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.string_literal",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3395705,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "name": "unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "unique_id": "macro.dbt_utils.unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3415725,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "name": "default__unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "unique_id": "macro.dbt_utils.default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_string",
                    "macro.dbt.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3445432,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "name": "width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "unique_id": "macro.dbt_utils.width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.34557,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "name": "default__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.34657,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "name": "snowflake__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.34657,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "name": "get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "unique_id": "macro.dbt_utils.get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.347544,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "name": "default__get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part",
                    "macro.dbt.replace",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.347544,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "name": "get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3485703,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "name": "default__get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3485703,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "name": "get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "unique_id": "macro.dbt_utils.get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3495703,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "name": "default__get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.position",
                    "macro.dbt.split_part",
                    "macro.dbt.right",
                    "macro.dbt.length",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1722131665.3505704,
            "supported_languages": null
        }
    },
    "docs": {
        "doc.dbt.__overview__": {
            "name": "__overview__",
            "resource_type": "doc",
            "package_name": "dbt",
            "path": "overview.md",
            "original_file_path": "docs\\overview.md",
            "unique_id": "doc.dbt.__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {
        "metric.jaffle_shop.lifetime_spend_pretax": {
            "name": "lifetime_spend_pretax",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\customers.yml",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "metric.jaffle_shop.lifetime_spend_pretax",
            "fqn": [
                "jaffle_shop",
                "marts",
                "lifetime_spend_pretax"
            ],
            "description": "Customer's lifetime spend before tax",
            "label": "LTV Pre-tax",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "lifetime_spend_pretax",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "lifetime_spend_pretax",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.customers"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.623115,
            "group": null
        },
        "metric.jaffle_shop.count_lifetime_orders": {
            "name": "count_lifetime_orders",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\customers.yml",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "metric.jaffle_shop.count_lifetime_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "count_lifetime_orders"
            ],
            "description": "Count of lifetime orders",
            "label": "Count Lifetime Orders",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "count_lifetime_orders",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "count_lifetime_orders",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.customers"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.623115,
            "group": null
        },
        "metric.jaffle_shop.average_order_value": {
            "name": "average_order_value",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\customers.yml",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "metric.jaffle_shop.average_order_value",
            "fqn": [
                "jaffle_shop",
                "marts",
                "average_order_value"
            ],
            "description": "LTV pre-tax / number of orders",
            "label": "Average Order Value",
            "type": "derived",
            "type_params": {
                "measure": null,
                "input_measures": [
                    {
                        "name": "count_lifetime_orders",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    },
                    {
                        "name": "lifetime_spend_pretax",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": "lifetime_spend_pretax / count_lifetime_orders",
                "window": null,
                "grain_to_date": null,
                "metrics": [
                    {
                        "name": "count_lifetime_orders",
                        "filter": null,
                        "alias": null,
                        "offset_window": null,
                        "offset_to_grain": null
                    },
                    {
                        "name": "lifetime_spend_pretax",
                        "filter": null,
                        "alias": null,
                        "offset_window": null,
                        "offset_to_grain": null
                    }
                ],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.count_lifetime_orders",
                    "metric.jaffle_shop.lifetime_spend_pretax"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.6271157,
            "group": null
        },
        "metric.jaffle_shop.order_total": {
            "name": "order_total",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "metric.jaffle_shop.order_total",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_total"
            ],
            "description": "Sum of total order amonunt. Includes tax + revenue.",
            "label": "Order Total",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_total",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_total",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7336347,
            "group": null
        },
        "metric.jaffle_shop.new_customer_orders": {
            "name": "new_customer_orders",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "metric.jaffle_shop.new_customer_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "new_customer_orders"
            ],
            "description": "New customer's first order count",
            "label": "New Customers",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_count",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_count",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": {
                "where_filters": [
                    {
                        "where_sql_template": "{{ Dimension('order_id__customer_order_number') }} = 1\n"
                    }
                ]
            },
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7346356,
            "group": null
        },
        "metric.jaffle_shop.large_orders": {
            "name": "large_orders",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "metric.jaffle_shop.large_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "large_orders"
            ],
            "description": "Count of orders with order total over 20.",
            "label": "Large Orders",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_count",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_count",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": {
                "where_filters": [
                    {
                        "where_sql_template": "{{ Dimension('order_id__order_total_dim') }} >= 20\n"
                    }
                ]
            },
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7356353,
            "group": null
        },
        "metric.jaffle_shop.orders": {
            "name": "orders",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "metric.jaffle_shop.orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "orders"
            ],
            "description": "Count of orders.",
            "label": "Orders",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_count",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_count",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7366357,
            "group": null
        },
        "metric.jaffle_shop.food_orders": {
            "name": "food_orders",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "metric.jaffle_shop.food_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "food_orders"
            ],
            "description": "Count of orders that contain food order items",
            "label": "Food Orders",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_count",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_count",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": {
                "where_filters": [
                    {
                        "where_sql_template": "{{ Dimension('order_id__is_food_order') }} = true\n"
                    }
                ]
            },
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7376356,
            "group": null
        },
        "metric.jaffle_shop.drink_orders": {
            "name": "drink_orders",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "metric.jaffle_shop.drink_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "drink_orders"
            ],
            "description": "Count of orders that contain drink order items",
            "label": "Drink Orders",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_count",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_count",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": {
                "where_filters": [
                    {
                        "where_sql_template": "{{ Dimension('order_id__is_drink_order') }} = true\n"
                    }
                ]
            },
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.73863,
            "group": null
        },
        "metric.jaffle_shop.revenue": {
            "name": "revenue",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.revenue",
            "fqn": [
                "jaffle_shop",
                "marts",
                "revenue"
            ],
            "description": "Sum of the product revenue for each order item. Excludes tax.",
            "label": "Revenue",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "revenue",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.order_item"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7796347,
            "group": null
        },
        "metric.jaffle_shop.order_cost": {
            "name": "order_cost",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.order_cost",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_cost"
            ],
            "description": "Sum of cost for each order item.",
            "label": "Order Cost",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "order_cost",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "order_cost",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.orders"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7806349,
            "group": null
        },
        "metric.jaffle_shop.median_revenue": {
            "name": "median_revenue",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.median_revenue",
            "fqn": [
                "jaffle_shop",
                "marts",
                "median_revenue"
            ],
            "description": "The median revenue for each order item. Excludes tax.",
            "label": "Median Revenue",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "median_revenue",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "median_revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.order_item"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.781635,
            "group": null
        },
        "metric.jaffle_shop.food_revenue": {
            "name": "food_revenue",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.food_revenue",
            "fqn": [
                "jaffle_shop",
                "marts",
                "food_revenue"
            ],
            "description": "The revenue from food in each order",
            "label": "Food Revenue",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "food_revenue",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "food_revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.order_item"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.782635,
            "group": null
        },
        "metric.jaffle_shop.drink_revenue": {
            "name": "drink_revenue",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.drink_revenue",
            "fqn": [
                "jaffle_shop",
                "marts",
                "drink_revenue"
            ],
            "description": "The revenue from drinks in each order",
            "label": "Drink Revenue",
            "type": "simple",
            "type_params": {
                "measure": {
                    "name": "drink_revenue",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "drink_revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.order_item"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7836385,
            "group": null
        },
        "metric.jaffle_shop.food_revenue_pct": {
            "name": "food_revenue_pct",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.food_revenue_pct",
            "fqn": [
                "jaffle_shop",
                "marts",
                "food_revenue_pct"
            ],
            "description": "The % of order revenue from food.",
            "label": "Food Revenue %",
            "type": "ratio",
            "type_params": {
                "measure": null,
                "input_measures": [
                    {
                        "name": "food_revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    },
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": {
                    "name": "food_revenue",
                    "filter": null,
                    "alias": null,
                    "offset_window": null,
                    "offset_to_grain": null
                },
                "denominator": {
                    "name": "revenue",
                    "filter": null,
                    "alias": null,
                    "offset_window": null,
                    "offset_to_grain": null
                },
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.food_revenue",
                    "metric.jaffle_shop.revenue"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7846406,
            "group": null
        },
        "metric.jaffle_shop.drink_revenue_pct": {
            "name": "drink_revenue_pct",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.drink_revenue_pct",
            "fqn": [
                "jaffle_shop",
                "marts",
                "drink_revenue_pct"
            ],
            "description": "The % of order revenue from drinks.",
            "label": "Drink Revenue %",
            "type": "ratio",
            "type_params": {
                "measure": null,
                "input_measures": [
                    {
                        "name": "drink_revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    },
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": {
                    "name": "drink_revenue",
                    "filter": null,
                    "alias": null,
                    "offset_window": null,
                    "offset_to_grain": null
                },
                "denominator": {
                    "name": "revenue",
                    "filter": null,
                    "alias": null,
                    "offset_window": null,
                    "offset_to_grain": null
                },
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.drink_revenue",
                    "metric.jaffle_shop.revenue"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7856348,
            "group": null
        },
        "metric.jaffle_shop.revenue_growth_mom": {
            "name": "revenue_growth_mom",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.revenue_growth_mom",
            "fqn": [
                "jaffle_shop",
                "marts",
                "revenue_growth_mom"
            ],
            "description": "Percentage growth of revenue compared to 1 month ago. Excluded tax",
            "label": "Revenue Growth % M/M",
            "type": "derived",
            "type_params": {
                "measure": null,
                "input_measures": [
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": "(current_revenue - revenue_prev_month)*100/revenue_prev_month",
                "window": null,
                "grain_to_date": null,
                "metrics": [
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": "current_revenue",
                        "offset_window": null,
                        "offset_to_grain": null
                    },
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": "revenue_prev_month",
                        "offset_window": {
                            "count": 1,
                            "granularity": "month"
                        },
                        "offset_to_grain": null
                    }
                ],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.revenue"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7876348,
            "group": null
        },
        "metric.jaffle_shop.order_gross_profit": {
            "name": "order_gross_profit",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.order_gross_profit",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_gross_profit"
            ],
            "description": "Gross profit from each order.",
            "label": "Order Gross Profit",
            "type": "derived",
            "type_params": {
                "measure": null,
                "input_measures": [
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    },
                    {
                        "name": "order_cost",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": "revenue - cost",
                "window": null,
                "grain_to_date": null,
                "metrics": [
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "offset_window": null,
                        "offset_to_grain": null
                    },
                    {
                        "name": "order_cost",
                        "filter": null,
                        "alias": "cost",
                        "offset_window": null,
                        "offset_to_grain": null
                    }
                ],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.revenue",
                    "metric.jaffle_shop.order_cost"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.789604,
            "group": null
        },
        "metric.jaffle_shop.cumulative_revenue": {
            "name": "cumulative_revenue",
            "resource_type": "metric",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "metric.jaffle_shop.cumulative_revenue",
            "fqn": [
                "jaffle_shop",
                "marts",
                "cumulative_revenue"
            ],
            "description": "The cumulative revenue for all orders.",
            "label": "Cumulative Revenue (All Time)",
            "type": "cumulative",
            "type_params": {
                "measure": {
                    "name": "revenue",
                    "filter": null,
                    "alias": null,
                    "join_to_timespine": false,
                    "fill_nulls_with": null
                },
                "input_measures": [
                    {
                        "name": "revenue",
                        "filter": null,
                        "alias": null,
                        "join_to_timespine": false,
                        "fill_nulls_with": null
                    }
                ],
                "numerator": null,
                "denominator": null,
                "expr": null,
                "window": null,
                "grain_to_date": null,
                "metrics": [],
                "conversion_type_params": null
            },
            "filter": null,
            "metadata": null,
            "meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "sources": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "semantic_model.jaffle_shop.order_item"
                ]
            },
            "refs": [],
            "metrics": [],
            "created_at": 1722131666.7906046,
            "group": null
        }
    },
    "groups": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.jaffle_shop.customers": [
            "model.jaffle_shop.orders",
            "model.jaffle_shop.stg_customers"
        ],
        "model.jaffle_shop.locations": [
            "model.jaffle_shop.stg_locations"
        ],
        "model.jaffle_shop.metricflow_time_spine": [],
        "model.jaffle_shop.orders": [
            "model.jaffle_shop.order_items",
            "model.jaffle_shop.stg_orders"
        ],
        "model.jaffle_shop.order_items": [
            "model.jaffle_shop.stg_order_items",
            "model.jaffle_shop.stg_orders",
            "model.jaffle_shop.stg_products",
            "model.jaffle_shop.stg_supplies"
        ],
        "model.jaffle_shop.products": [
            "model.jaffle_shop.stg_products"
        ],
        "model.jaffle_shop.supplies": [
            "model.jaffle_shop.stg_supplies"
        ],
        "model.jaffle_shop.stg_customers": [
            "source.jaffle_shop.ecom.raw_customers"
        ],
        "model.jaffle_shop.stg_locations": [
            "source.jaffle_shop.ecom.raw_stores"
        ],
        "model.jaffle_shop.stg_orders": [
            "source.jaffle_shop.ecom.raw_orders"
        ],
        "model.jaffle_shop.stg_order_items": [
            "source.jaffle_shop.ecom.raw_items"
        ],
        "model.jaffle_shop.stg_products": [
            "source.jaffle_shop.ecom.raw_products"
        ],
        "model.jaffle_shop.stg_supplies": [
            "source.jaffle_shop.ecom.raw_supplies"
        ],
        "seed.jaffle_shop.raw_customers": [],
        "seed.jaffle_shop.raw_items": [],
        "seed.jaffle_shop.raw_orders": [],
        "seed.jaffle_shop.raw_products": [],
        "seed.jaffle_shop.raw_stores": [],
        "seed.jaffle_shop.raw_supplies": [],
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [
            "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [
            "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.accepted_values_customers_customer_type__new__returning.d12f0947c8": [
            "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend.ad37c989b6": [
            "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_stg_customers_.918495ce16": [
            "model.jaffle_shop.orders",
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal.b1416e07ec": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid.2aba85df92": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_order_items_order_item_id.c6fda366bd": [
            "model.jaffle_shop.order_items"
        ],
        "test.jaffle_shop.unique_order_items_order_item_id.7d0a7e900a": [
            "model.jaffle_shop.order_items"
        ],
        "test.jaffle_shop.relationships_order_items_order_id__order_id__ref_orders_.a799023ee8": [
            "model.jaffle_shop.order_items",
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.not_null_stg_locations_location_id.3d237927d2": [
            "model.jaffle_shop.stg_locations"
        ],
        "test.jaffle_shop.unique_stg_locations_location_id.2e2fc58ecc": [
            "model.jaffle_shop.stg_locations"
        ],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal.bfb885d7fc": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.not_null_stg_order_items_order_item_id.26a7e2bc35": [
            "model.jaffle_shop.stg_order_items"
        ],
        "test.jaffle_shop.unique_stg_order_items_order_item_id.90e333a108": [
            "model.jaffle_shop.stg_order_items"
        ],
        "test.jaffle_shop.not_null_stg_order_items_order_id.2063801f96": [
            "model.jaffle_shop.stg_order_items"
        ],
        "test.jaffle_shop.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54": [
            "model.jaffle_shop.stg_order_items",
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.not_null_stg_products_product_id.6373b0acf3": [
            "model.jaffle_shop.stg_products"
        ],
        "test.jaffle_shop.unique_stg_products_product_id.7d950a1467": [
            "model.jaffle_shop.stg_products"
        ],
        "test.jaffle_shop.not_null_stg_supplies_supply_uuid.515c6eda6d": [
            "model.jaffle_shop.stg_supplies"
        ],
        "test.jaffle_shop.unique_stg_supplies_supply_uuid.c9e3edcfed": [
            "model.jaffle_shop.stg_supplies"
        ],
        "source.jaffle_shop.ecom.raw_customers": [],
        "source.jaffle_shop.ecom.raw_orders": [],
        "source.jaffle_shop.ecom.raw_items": [],
        "source.jaffle_shop.ecom.raw_stores": [],
        "source.jaffle_shop.ecom.raw_products": [],
        "source.jaffle_shop.ecom.raw_supplies": [],
        "metric.jaffle_shop.lifetime_spend_pretax": [
            "semantic_model.jaffle_shop.customers"
        ],
        "metric.jaffle_shop.count_lifetime_orders": [
            "semantic_model.jaffle_shop.customers"
        ],
        "metric.jaffle_shop.average_order_value": [
            "metric.jaffle_shop.count_lifetime_orders",
            "metric.jaffle_shop.lifetime_spend_pretax"
        ],
        "metric.jaffle_shop.order_total": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.new_customer_orders": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.large_orders": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.orders": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.food_orders": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.drink_orders": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.revenue": [
            "semantic_model.jaffle_shop.order_item"
        ],
        "metric.jaffle_shop.order_cost": [
            "semantic_model.jaffle_shop.orders"
        ],
        "metric.jaffle_shop.median_revenue": [
            "semantic_model.jaffle_shop.order_item"
        ],
        "metric.jaffle_shop.food_revenue": [
            "semantic_model.jaffle_shop.order_item"
        ],
        "metric.jaffle_shop.drink_revenue": [
            "semantic_model.jaffle_shop.order_item"
        ],
        "metric.jaffle_shop.food_revenue_pct": [
            "metric.jaffle_shop.food_revenue",
            "metric.jaffle_shop.revenue"
        ],
        "metric.jaffle_shop.drink_revenue_pct": [
            "metric.jaffle_shop.drink_revenue",
            "metric.jaffle_shop.revenue"
        ],
        "metric.jaffle_shop.revenue_growth_mom": [
            "metric.jaffle_shop.revenue"
        ],
        "metric.jaffle_shop.order_gross_profit": [
            "metric.jaffle_shop.order_cost",
            "metric.jaffle_shop.revenue"
        ],
        "metric.jaffle_shop.cumulative_revenue": [
            "semantic_model.jaffle_shop.order_item"
        ],
        "semantic_model.jaffle_shop.customers": [
            "model.jaffle_shop.customers"
        ],
        "semantic_model.jaffle_shop.locations": [
            "model.jaffle_shop.locations"
        ],
        "semantic_model.jaffle_shop.orders": [
            "model.jaffle_shop.orders"
        ],
        "semantic_model.jaffle_shop.order_item": [
            "model.jaffle_shop.order_items"
        ],
        "semantic_model.jaffle_shop.products": [
            "model.jaffle_shop.products"
        ],
        "semantic_model.jaffle_shop.supplies": [
            "model.jaffle_shop.supplies"
        ],
        "saved_query.jaffle_shop.customer_order_metrics": [
            "metric.jaffle_shop.average_order_value",
            "metric.jaffle_shop.count_lifetime_orders",
            "metric.jaffle_shop.lifetime_spend_pretax"
        ],
        "saved_query.jaffle_shop.order_metrics": [
            "metric.jaffle_shop.drink_orders",
            "metric.jaffle_shop.food_orders",
            "metric.jaffle_shop.new_customer_orders",
            "metric.jaffle_shop.order_total",
            "metric.jaffle_shop.orders"
        ],
        "saved_query.jaffle_shop.revenue_metrics": [
            "metric.jaffle_shop.drink_revenue",
            "metric.jaffle_shop.food_revenue",
            "metric.jaffle_shop.revenue"
        ],
        "unit_test.jaffle_shop.orders.test_order_items_compute_to_bools_correctly": [
            "model.jaffle_shop.orders"
        ],
        "unit_test.jaffle_shop.order_items.test_supply_costs_sum_correctly": [
            "model.jaffle_shop.order_items"
        ],
        "unit_test.jaffle_shop.stg_locations.test_does_location_opened_at_trunc_to_date": [
            "model.jaffle_shop.stg_locations"
        ]
    },
    "child_map": {
        "model.jaffle_shop.customers": [
            "semantic_model.jaffle_shop.customers",
            "test.jaffle_shop.accepted_values_customers_customer_type__new__returning.d12f0947c8",
            "test.jaffle_shop.dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend.ad37c989b6",
            "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d",
            "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"
        ],
        "model.jaffle_shop.locations": [
            "semantic_model.jaffle_shop.locations"
        ],
        "model.jaffle_shop.metricflow_time_spine": [],
        "model.jaffle_shop.orders": [
            "model.jaffle_shop.customers",
            "semantic_model.jaffle_shop.orders",
            "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal.b1416e07ec",
            "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid.2aba85df92",
            "test.jaffle_shop.not_null_orders_order_id.cf6c17daed",
            "test.jaffle_shop.relationships_order_items_order_id__order_id__ref_orders_.a799023ee8",
            "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_stg_customers_.918495ce16",
            "test.jaffle_shop.unique_orders_order_id.fed79b3a6e",
            "unit_test.jaffle_shop.orders.test_order_items_compute_to_bools_correctly"
        ],
        "model.jaffle_shop.order_items": [
            "model.jaffle_shop.orders",
            "semantic_model.jaffle_shop.order_item",
            "test.jaffle_shop.not_null_order_items_order_item_id.c6fda366bd",
            "test.jaffle_shop.relationships_order_items_order_id__order_id__ref_orders_.a799023ee8",
            "test.jaffle_shop.unique_order_items_order_item_id.7d0a7e900a",
            "unit_test.jaffle_shop.order_items.test_supply_costs_sum_correctly"
        ],
        "model.jaffle_shop.products": [
            "semantic_model.jaffle_shop.products"
        ],
        "model.jaffle_shop.supplies": [
            "semantic_model.jaffle_shop.supplies"
        ],
        "model.jaffle_shop.stg_customers": [
            "model.jaffle_shop.customers",
            "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
            "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_stg_customers_.918495ce16",
            "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"
        ],
        "model.jaffle_shop.stg_locations": [
            "model.jaffle_shop.locations",
            "test.jaffle_shop.not_null_stg_locations_location_id.3d237927d2",
            "test.jaffle_shop.unique_stg_locations_location_id.2e2fc58ecc",
            "unit_test.jaffle_shop.stg_locations.test_does_location_opened_at_trunc_to_date"
        ],
        "model.jaffle_shop.stg_orders": [
            "model.jaffle_shop.order_items",
            "model.jaffle_shop.orders",
            "test.jaffle_shop.dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal.bfb885d7fc",
            "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
            "test.jaffle_shop.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54",
            "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"
        ],
        "model.jaffle_shop.stg_order_items": [
            "model.jaffle_shop.order_items",
            "test.jaffle_shop.not_null_stg_order_items_order_id.2063801f96",
            "test.jaffle_shop.not_null_stg_order_items_order_item_id.26a7e2bc35",
            "test.jaffle_shop.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54",
            "test.jaffle_shop.unique_stg_order_items_order_item_id.90e333a108"
        ],
        "model.jaffle_shop.stg_products": [
            "model.jaffle_shop.order_items",
            "model.jaffle_shop.products",
            "test.jaffle_shop.not_null_stg_products_product_id.6373b0acf3",
            "test.jaffle_shop.unique_stg_products_product_id.7d950a1467"
        ],
        "model.jaffle_shop.stg_supplies": [
            "model.jaffle_shop.order_items",
            "model.jaffle_shop.supplies",
            "test.jaffle_shop.not_null_stg_supplies_supply_uuid.515c6eda6d",
            "test.jaffle_shop.unique_stg_supplies_supply_uuid.c9e3edcfed"
        ],
        "seed.jaffle_shop.raw_customers": [],
        "seed.jaffle_shop.raw_items": [],
        "seed.jaffle_shop.raw_orders": [],
        "seed.jaffle_shop.raw_products": [],
        "seed.jaffle_shop.raw_stores": [],
        "seed.jaffle_shop.raw_supplies": [],
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [],
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [],
        "test.jaffle_shop.accepted_values_customers_customer_type__new__returning.d12f0947c8": [],
        "test.jaffle_shop.dbt_utils_expression_is_true_customers_lifetime_spend_pretax_lifetime_tax_paid_lifetime_spend.ad37c989b6": [],
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [],
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [],
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_stg_customers_.918495ce16": [],
        "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_items_subtotal_subtotal.b1416e07ec": [],
        "test.jaffle_shop.dbt_utils_expression_is_true_orders_order_total_subtotal_tax_paid.2aba85df92": [],
        "test.jaffle_shop.not_null_order_items_order_item_id.c6fda366bd": [],
        "test.jaffle_shop.unique_order_items_order_item_id.7d0a7e900a": [],
        "test.jaffle_shop.relationships_order_items_order_id__order_id__ref_orders_.a799023ee8": [],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [],
        "test.jaffle_shop.not_null_stg_locations_location_id.3d237927d2": [],
        "test.jaffle_shop.unique_stg_locations_location_id.2e2fc58ecc": [],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [],
        "test.jaffle_shop.dbt_utils_expression_is_true_stg_orders_order_total_tax_paid_subtotal.bfb885d7fc": [],
        "test.jaffle_shop.not_null_stg_order_items_order_item_id.26a7e2bc35": [],
        "test.jaffle_shop.unique_stg_order_items_order_item_id.90e333a108": [],
        "test.jaffle_shop.not_null_stg_order_items_order_id.2063801f96": [],
        "test.jaffle_shop.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54": [],
        "test.jaffle_shop.not_null_stg_products_product_id.6373b0acf3": [],
        "test.jaffle_shop.unique_stg_products_product_id.7d950a1467": [],
        "test.jaffle_shop.not_null_stg_supplies_supply_uuid.515c6eda6d": [],
        "test.jaffle_shop.unique_stg_supplies_supply_uuid.c9e3edcfed": [],
        "source.jaffle_shop.ecom.raw_customers": [
            "model.jaffle_shop.stg_customers"
        ],
        "source.jaffle_shop.ecom.raw_orders": [
            "model.jaffle_shop.stg_orders"
        ],
        "source.jaffle_shop.ecom.raw_items": [
            "model.jaffle_shop.stg_order_items"
        ],
        "source.jaffle_shop.ecom.raw_stores": [
            "model.jaffle_shop.stg_locations"
        ],
        "source.jaffle_shop.ecom.raw_products": [
            "model.jaffle_shop.stg_products"
        ],
        "source.jaffle_shop.ecom.raw_supplies": [
            "model.jaffle_shop.stg_supplies"
        ],
        "metric.jaffle_shop.lifetime_spend_pretax": [
            "metric.jaffle_shop.average_order_value",
            "saved_query.jaffle_shop.customer_order_metrics"
        ],
        "metric.jaffle_shop.count_lifetime_orders": [
            "metric.jaffle_shop.average_order_value",
            "saved_query.jaffle_shop.customer_order_metrics"
        ],
        "metric.jaffle_shop.average_order_value": [
            "saved_query.jaffle_shop.customer_order_metrics"
        ],
        "metric.jaffle_shop.order_total": [
            "saved_query.jaffle_shop.order_metrics"
        ],
        "metric.jaffle_shop.new_customer_orders": [
            "saved_query.jaffle_shop.order_metrics"
        ],
        "metric.jaffle_shop.large_orders": [],
        "metric.jaffle_shop.orders": [
            "saved_query.jaffle_shop.order_metrics"
        ],
        "metric.jaffle_shop.food_orders": [
            "saved_query.jaffle_shop.order_metrics"
        ],
        "metric.jaffle_shop.drink_orders": [
            "saved_query.jaffle_shop.order_metrics"
        ],
        "metric.jaffle_shop.revenue": [
            "metric.jaffle_shop.drink_revenue_pct",
            "metric.jaffle_shop.food_revenue_pct",
            "metric.jaffle_shop.order_gross_profit",
            "metric.jaffle_shop.revenue_growth_mom",
            "saved_query.jaffle_shop.revenue_metrics"
        ],
        "metric.jaffle_shop.order_cost": [
            "metric.jaffle_shop.order_gross_profit"
        ],
        "metric.jaffle_shop.median_revenue": [],
        "metric.jaffle_shop.food_revenue": [
            "metric.jaffle_shop.food_revenue_pct",
            "saved_query.jaffle_shop.revenue_metrics"
        ],
        "metric.jaffle_shop.drink_revenue": [
            "metric.jaffle_shop.drink_revenue_pct",
            "saved_query.jaffle_shop.revenue_metrics"
        ],
        "metric.jaffle_shop.food_revenue_pct": [],
        "metric.jaffle_shop.drink_revenue_pct": [],
        "metric.jaffle_shop.revenue_growth_mom": [],
        "metric.jaffle_shop.order_gross_profit": [],
        "metric.jaffle_shop.cumulative_revenue": [],
        "semantic_model.jaffle_shop.customers": [
            "metric.jaffle_shop.count_lifetime_orders",
            "metric.jaffle_shop.lifetime_spend_pretax"
        ],
        "semantic_model.jaffle_shop.locations": [],
        "semantic_model.jaffle_shop.orders": [
            "metric.jaffle_shop.drink_orders",
            "metric.jaffle_shop.food_orders",
            "metric.jaffle_shop.large_orders",
            "metric.jaffle_shop.new_customer_orders",
            "metric.jaffle_shop.order_cost",
            "metric.jaffle_shop.order_total",
            "metric.jaffle_shop.orders"
        ],
        "semantic_model.jaffle_shop.order_item": [
            "metric.jaffle_shop.cumulative_revenue",
            "metric.jaffle_shop.drink_revenue",
            "metric.jaffle_shop.food_revenue",
            "metric.jaffle_shop.median_revenue",
            "metric.jaffle_shop.revenue"
        ],
        "semantic_model.jaffle_shop.products": [],
        "semantic_model.jaffle_shop.supplies": [],
        "saved_query.jaffle_shop.customer_order_metrics": [],
        "saved_query.jaffle_shop.order_metrics": [],
        "saved_query.jaffle_shop.revenue_metrics": [],
        "unit_test.jaffle_shop.orders.test_order_items_compute_to_bools_correctly": [],
        "unit_test.jaffle_shop.order_items.test_supply_costs_sum_correctly": [],
        "unit_test.jaffle_shop.stg_locations.test_does_location_opened_at_trunc_to_date": []
    },
    "group_map": {},
    "saved_queries": {
        "saved_query.jaffle_shop.customer_order_metrics": {
            "name": "customer_order_metrics",
            "resource_type": "saved_query",
            "package_name": "jaffle_shop",
            "path": "marts\\customers.yml",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "saved_query.jaffle_shop.customer_order_metrics",
            "fqn": [
                "jaffle_shop",
                "marts",
                "customer_order_metrics"
            ],
            "query_params": {
                "metrics": [
                    "count_lifetime_orders",
                    "lifetime_spend_pretax",
                    "average_order_value"
                ],
                "group_by": [
                    "Entity('customer')"
                ],
                "where": null
            },
            "exports": [
                {
                    "name": "customer_order_metrics",
                    "config": {
                        "export_as": "table",
                        "schema_name": "public",
                        "alias": "customer_order_metrics",
                        "database": "demo"
                    }
                }
            ],
            "description": null,
            "label": null,
            "metadata": null,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {},
                "export_as": null,
                "schema": null,
                "cache": {
                    "enabled": false
                }
            },
            "unrendered_config": {},
            "group": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.count_lifetime_orders",
                    "metric.jaffle_shop.lifetime_spend_pretax",
                    "metric.jaffle_shop.average_order_value"
                ]
            },
            "created_at": 1722131666.7040932,
            "refs": []
        },
        "saved_query.jaffle_shop.order_metrics": {
            "name": "order_metrics",
            "resource_type": "saved_query",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "saved_query.jaffle_shop.order_metrics",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_metrics"
            ],
            "query_params": {
                "metrics": [
                    "orders",
                    "new_customer_orders",
                    "order_total",
                    "food_orders",
                    "drink_orders"
                ],
                "group_by": [
                    "TimeDimension('metric_time', 'day')"
                ],
                "where": null
            },
            "exports": [
                {
                    "name": "order_metrics",
                    "config": {
                        "export_as": "table",
                        "schema_name": "public",
                        "alias": "order_metrics",
                        "database": "demo"
                    }
                }
            ],
            "description": null,
            "label": null,
            "metadata": null,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {},
                "export_as": null,
                "schema": null,
                "cache": {
                    "enabled": false
                }
            },
            "unrendered_config": {},
            "group": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.orders",
                    "metric.jaffle_shop.new_customer_orders",
                    "metric.jaffle_shop.order_total",
                    "metric.jaffle_shop.food_orders",
                    "metric.jaffle_shop.drink_orders"
                ]
            },
            "created_at": 1722131666.770635,
            "refs": []
        },
        "saved_query.jaffle_shop.revenue_metrics": {
            "name": "revenue_metrics",
            "resource_type": "saved_query",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "saved_query.jaffle_shop.revenue_metrics",
            "fqn": [
                "jaffle_shop",
                "marts",
                "revenue_metrics"
            ],
            "query_params": {
                "metrics": [
                    "revenue",
                    "food_revenue",
                    "drink_revenue"
                ],
                "group_by": [
                    "TimeDimension('metric_time', 'day')"
                ],
                "where": null
            },
            "exports": [
                {
                    "name": "revenue_metrics",
                    "config": {
                        "export_as": "table",
                        "schema_name": "public",
                        "alias": "revenue_metrics",
                        "database": "demo"
                    }
                }
            ],
            "description": null,
            "label": null,
            "metadata": null,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {},
                "export_as": null,
                "schema": null,
                "cache": {
                    "enabled": false
                }
            },
            "unrendered_config": {},
            "group": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "metric.jaffle_shop.revenue",
                    "metric.jaffle_shop.food_revenue",
                    "metric.jaffle_shop.drink_revenue"
                ]
            },
            "created_at": 1722131666.798642,
            "refs": []
        }
    },
    "semantic_models": {
        "semantic_model.jaffle_shop.customers": {
            "name": "customers",
            "resource_type": "semantic_model",
            "package_name": "jaffle_shop",
            "path": "marts\\customers.yml",
            "original_file_path": "models\\marts\\customers.yml",
            "unique_id": "semantic_model.jaffle_shop.customers",
            "fqn": [
                "jaffle_shop",
                "marts",
                "customers"
            ],
            "model": "ref('customers')",
            "node_relation": {
                "alias": "customers",
                "schema_name": "public",
                "database": "demo",
                "relation_name": "\"demo\".\"public\".\"customers\""
            },
            "description": "Customer grain mart.\n",
            "label": null,
            "defaults": {
                "agg_time_dimension": "first_ordered_at"
            },
            "entities": [
                {
                    "name": "customer",
                    "type": "primary",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "customer_id"
                }
            ],
            "measures": [
                {
                    "name": "customers",
                    "agg": "count_distinct",
                    "description": "Count of unique customers",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "count_lifetime_orders",
                    "agg": "sum",
                    "description": "Total count of orders per customer.",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "lifetime_spend_pretax",
                    "agg": "sum",
                    "description": "Customer lifetime spend before taxes.",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "lifetime_spend",
                    "agg": "sum",
                    "description": "Gross customer lifetime spend inclusive of taxes.",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                }
            ],
            "dimensions": [
                {
                    "name": "customer_name",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "customer_type",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "first_ordered_at",
                    "type": "time",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": {
                        "time_granularity": "day",
                        "validity_params": null
                    },
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "last_ordered_at",
                    "type": "time",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": {
                        "time_granularity": "day",
                        "validity_params": null
                    },
                    "expr": null,
                    "metadata": null
                }
            ],
            "metadata": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "created_at": 1722131666.6800878,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "primary_entity": null,
            "group": null
        },
        "semantic_model.jaffle_shop.locations": {
            "name": "locations",
            "resource_type": "semantic_model",
            "package_name": "jaffle_shop",
            "path": "marts\\locations.yml",
            "original_file_path": "models\\marts\\locations.yml",
            "unique_id": "semantic_model.jaffle_shop.locations",
            "fqn": [
                "jaffle_shop",
                "marts",
                "locations"
            ],
            "model": "ref('locations')",
            "node_relation": {
                "alias": "locations",
                "schema_name": "public",
                "database": "demo",
                "relation_name": "\"demo\".\"public\".\"locations\""
            },
            "description": "Location dimension table. The grain of the table is one row per location.\n",
            "label": null,
            "defaults": {
                "agg_time_dimension": "opened_at"
            },
            "entities": [
                {
                    "name": "location",
                    "type": "primary",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "location_id"
                }
            ],
            "measures": [
                {
                    "name": "average_tax_rate",
                    "agg": "average",
                    "description": "Average tax rate.",
                    "label": null,
                    "create_metric": false,
                    "expr": "tax_rate",
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                }
            ],
            "dimensions": [
                {
                    "name": "location_name",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "opened_at",
                    "type": "time",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": {
                        "time_granularity": "day",
                        "validity_params": null
                    },
                    "expr": "opened_at",
                    "metadata": null
                }
            ],
            "metadata": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.locations"
                ]
            },
            "refs": [
                {
                    "name": "locations",
                    "package": null,
                    "version": null
                }
            ],
            "created_at": 1722131666.7106035,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "primary_entity": null,
            "group": null
        },
        "semantic_model.jaffle_shop.orders": {
            "name": "orders",
            "resource_type": "semantic_model",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "semantic_model.jaffle_shop.orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "orders"
            ],
            "model": "ref('orders')",
            "node_relation": {
                "alias": "orders",
                "schema_name": "public",
                "database": "demo",
                "relation_name": "\"demo\".\"public\".\"orders\""
            },
            "description": "Order fact table. This table is at the order grain with one row per order.\n",
            "label": null,
            "defaults": {
                "agg_time_dimension": "ordered_at"
            },
            "entities": [
                {
                    "name": "order_id",
                    "type": "primary",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": null
                },
                {
                    "name": "location",
                    "type": "foreign",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "location_id"
                },
                {
                    "name": "customer",
                    "type": "foreign",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "customer_id"
                }
            ],
            "measures": [
                {
                    "name": "order_total",
                    "agg": "sum",
                    "description": "The total amount for each order including taxes.",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "order_count",
                    "agg": "sum",
                    "description": null,
                    "label": null,
                    "create_metric": false,
                    "expr": "1",
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "tax_paid",
                    "agg": "sum",
                    "description": "The total tax paid on each order.",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "order_cost",
                    "agg": "sum",
                    "description": "The cost for each order item. Cost is calculated as a sum of the supply cost for each order item.",
                    "label": null,
                    "create_metric": false,
                    "expr": null,
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                }
            ],
            "dimensions": [
                {
                    "name": "ordered_at",
                    "type": "time",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": {
                        "time_granularity": "day",
                        "validity_params": null
                    },
                    "expr": "ordered_at",
                    "metadata": null
                },
                {
                    "name": "order_total_dim",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": "order_total",
                    "metadata": null
                },
                {
                    "name": "is_food_order",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "is_drink_order",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "customer_order_number",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                }
            ],
            "metadata": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "created_at": 1722131666.740635,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "primary_entity": null,
            "group": null
        },
        "semantic_model.jaffle_shop.order_item": {
            "name": "order_item",
            "resource_type": "semantic_model",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "semantic_model.jaffle_shop.order_item",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_item"
            ],
            "model": "ref('order_items')",
            "node_relation": {
                "alias": "order_items",
                "schema_name": "public",
                "database": "demo",
                "relation_name": "\"demo\".\"public\".\"order_items\""
            },
            "description": "Items contatined in each order. The grain of the table is one row per order item.\n",
            "label": null,
            "defaults": {
                "agg_time_dimension": "ordered_at"
            },
            "entities": [
                {
                    "name": "order_item",
                    "type": "primary",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "order_item_id"
                },
                {
                    "name": "order_id",
                    "type": "foreign",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "order_id"
                },
                {
                    "name": "product",
                    "type": "foreign",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "product_id"
                }
            ],
            "measures": [
                {
                    "name": "revenue",
                    "agg": "sum",
                    "description": "The revenue generated for each order item. Revenue is calculated as a sum of revenue associated with each product in an order.",
                    "label": null,
                    "create_metric": false,
                    "expr": "product_price",
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "food_revenue",
                    "agg": "sum",
                    "description": "The revenue generated for each order item. Revenue is calculated as a sum of revenue associated with each product in an order.",
                    "label": null,
                    "create_metric": false,
                    "expr": "case when is_food_item = 1 then product_price else 0 end",
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "drink_revenue",
                    "agg": "sum",
                    "description": "The revenue generated for each order item. Revenue is calculated as a sum of revenue associated with each product in an order.",
                    "label": null,
                    "create_metric": false,
                    "expr": "case when is_drink_item = 1 then product_price else 0 end",
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                },
                {
                    "name": "median_revenue",
                    "agg": "median",
                    "description": "The median revenue generated for each order item.",
                    "label": null,
                    "create_metric": false,
                    "expr": "product_price",
                    "agg_params": null,
                    "non_additive_dimension": null,
                    "agg_time_dimension": null
                }
            ],
            "dimensions": [
                {
                    "name": "ordered_at",
                    "type": "time",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": {
                        "time_granularity": "day",
                        "validity_params": null
                    },
                    "expr": "ordered_at",
                    "metadata": null
                },
                {
                    "name": "is_food_item",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "is_drink_item",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                }
            ],
            "metadata": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.order_items"
                ]
            },
            "refs": [
                {
                    "name": "order_items",
                    "package": null,
                    "version": null
                }
            ],
            "created_at": 1722131666.7946115,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "primary_entity": null,
            "group": null
        },
        "semantic_model.jaffle_shop.products": {
            "name": "products",
            "resource_type": "semantic_model",
            "package_name": "jaffle_shop",
            "path": "marts\\products.yml",
            "original_file_path": "models\\marts\\products.yml",
            "unique_id": "semantic_model.jaffle_shop.products",
            "fqn": [
                "jaffle_shop",
                "marts",
                "products"
            ],
            "model": "ref('products')",
            "node_relation": {
                "alias": "products",
                "schema_name": "public",
                "database": "demo",
                "relation_name": "\"demo\".\"public\".\"products\""
            },
            "description": "Product dimension table. The grain of the table is one row per product.\n",
            "label": null,
            "defaults": null,
            "entities": [
                {
                    "name": "product",
                    "type": "primary",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "product_id"
                }
            ],
            "measures": [],
            "dimensions": [
                {
                    "name": "product_name",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "product_type",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "product_description",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "is_food_item",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "is_drink_item",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "product_price",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                }
            ],
            "metadata": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.products"
                ]
            },
            "refs": [
                {
                    "name": "products",
                    "package": null,
                    "version": null
                }
            ],
            "created_at": 1722131666.8006415,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "primary_entity": null,
            "group": null
        },
        "semantic_model.jaffle_shop.supplies": {
            "name": "supplies",
            "resource_type": "semantic_model",
            "package_name": "jaffle_shop",
            "path": "marts\\supplies.yml",
            "original_file_path": "models\\marts\\supplies.yml",
            "unique_id": "semantic_model.jaffle_shop.supplies",
            "fqn": [
                "jaffle_shop",
                "marts",
                "supplies"
            ],
            "model": "ref('supplies')",
            "node_relation": {
                "alias": "supplies",
                "schema_name": "public",
                "database": "demo",
                "relation_name": "\"demo\".\"public\".\"supplies\""
            },
            "description": "Supplies dimension table. The grain of the table is one row per supply and product combination.\n",
            "label": null,
            "defaults": null,
            "entities": [
                {
                    "name": "supply",
                    "type": "primary",
                    "description": null,
                    "label": null,
                    "role": null,
                    "expr": "supply_uuid"
                }
            ],
            "measures": [],
            "dimensions": [
                {
                    "name": "supply_id",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "product_id",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "supply_name",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "supply_cost",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                },
                {
                    "name": "is_perishable_supply",
                    "type": "categorical",
                    "description": null,
                    "label": null,
                    "is_partition": false,
                    "type_params": null,
                    "expr": null,
                    "metadata": null
                }
            ],
            "metadata": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.supplies"
                ]
            },
            "refs": [
                {
                    "name": "supplies",
                    "package": null,
                    "version": null
                }
            ],
            "created_at": 1722131666.804644,
            "config": {
                "enabled": true,
                "group": null,
                "meta": {}
            },
            "unrendered_config": {},
            "primary_entity": null,
            "group": null
        }
    },
    "unit_tests": {
        "unit_test.jaffle_shop.orders.test_order_items_compute_to_bools_correctly": {
            "model": "orders",
            "given": [
                {
                    "input": "ref('order_items')",
                    "rows": [
                        {
                            "order_id": 1,
                            "order_item_id": 1,
                            "is_drink_item": false,
                            "is_food_item": true
                        },
                        {
                            "order_id": 1,
                            "order_item_id": 2,
                            "is_drink_item": true,
                            "is_food_item": false
                        },
                        {
                            "order_id": 2,
                            "order_item_id": 3,
                            "is_drink_item": false,
                            "is_food_item": true
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                },
                {
                    "input": "ref('stg_orders')",
                    "rows": [
                        {
                            "order_id": 1
                        },
                        {
                            "order_id": 2
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                }
            ],
            "expect": {
                "rows": [
                    {
                        "order_id": 1,
                        "count_food_items": 1,
                        "count_drink_items": 1,
                        "is_drink_order": true,
                        "is_food_order": true
                    },
                    {
                        "order_id": 2,
                        "count_food_items": 1,
                        "count_drink_items": 0,
                        "is_drink_order": false,
                        "is_food_order": true
                    }
                ],
                "format": "dict",
                "fixture": null
            },
            "name": "test_order_items_compute_to_bools_correctly",
            "resource_type": "unit_test",
            "package_name": "jaffle_shop",
            "path": "marts\\orders.yml",
            "original_file_path": "models\\marts\\orders.yml",
            "unique_id": "unit_test.jaffle_shop.orders.test_order_items_compute_to_bools_correctly",
            "fqn": [
                "jaffle_shop",
                "marts",
                "orders",
                "test_order_items_compute_to_bools_correctly"
            ],
            "description": "Test that the counts of drinks and food orders convert to booleans properly.",
            "overrides": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "config": {
                "tags": [],
                "meta": {}
            },
            "checksum": "4b05ead68182902b7f34979d6f804bf6d2b1da4796df95effb9b74c18a011b1c",
            "schema": "public",
            "created_at": 1722131666.7686331,
            "versions": null,
            "version": null
        },
        "unit_test.jaffle_shop.order_items.test_supply_costs_sum_correctly": {
            "model": "order_items",
            "given": [
                {
                    "input": "ref('stg_supplies')",
                    "rows": [
                        {
                            "product_id": 1,
                            "supply_cost": 4.5
                        },
                        {
                            "product_id": 2,
                            "supply_cost": 3.5
                        },
                        {
                            "product_id": 2,
                            "supply_cost": 5
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                },
                {
                    "input": "ref('stg_products')",
                    "rows": [
                        {
                            "product_id": 1
                        },
                        {
                            "product_id": 2
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                },
                {
                    "input": "ref('stg_order_items')",
                    "rows": [
                        {
                            "order_id": 1,
                            "product_id": 1
                        },
                        {
                            "order_id": 2,
                            "product_id": 2
                        },
                        {
                            "order_id": 2,
                            "product_id": 2
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                },
                {
                    "input": "ref('stg_orders')",
                    "rows": [
                        {
                            "order_id": 1
                        },
                        {
                            "order_id": 2
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                }
            ],
            "expect": {
                "rows": [
                    {
                        "order_id": 1,
                        "product_id": 1,
                        "supply_cost": 4.5
                    },
                    {
                        "order_id": 2,
                        "product_id": 2,
                        "supply_cost": 8.5
                    },
                    {
                        "order_id": 2,
                        "product_id": 2,
                        "supply_cost": 8.5
                    }
                ],
                "format": "dict",
                "fixture": null
            },
            "name": "test_supply_costs_sum_correctly",
            "resource_type": "unit_test",
            "package_name": "jaffle_shop",
            "path": "marts\\order_items.yml",
            "original_file_path": "models\\marts\\order_items.yml",
            "unique_id": "unit_test.jaffle_shop.order_items.test_supply_costs_sum_correctly",
            "fqn": [
                "jaffle_shop",
                "marts",
                "order_items",
                "test_supply_costs_sum_correctly"
            ],
            "description": "Test that the counts of drinks and food orders convert to booleans properly.",
            "overrides": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.order_items"
                ]
            },
            "config": {
                "tags": [],
                "meta": {}
            },
            "checksum": "11b603006f08f59e2a422e0444c2e89a0d0ddad733b59570b711be1ab31c78a5",
            "schema": "public",
            "created_at": 1722131666.7976375,
            "versions": null,
            "version": null
        },
        "unit_test.jaffle_shop.stg_locations.test_does_location_opened_at_trunc_to_date": {
            "model": "stg_locations",
            "given": [
                {
                    "input": "source('ecom', 'raw_stores')",
                    "rows": [
                        {
                            "id": 1,
                            "name": "Vice City",
                            "tax_rate": 0.2,
                            "opened_at": "2016-09-01T00:00:00"
                        },
                        {
                            "id": 2,
                            "name": "San Andreas",
                            "tax_rate": 0.1,
                            "opened_at": "2079-10-27T23:59:59.9999"
                        }
                    ],
                    "format": "dict",
                    "fixture": null
                }
            ],
            "expect": {
                "rows": [
                    {
                        "location_id": 1,
                        "location_name": "Vice City",
                        "tax_rate": 0.2,
                        "opened_date": "2016-09-01"
                    },
                    {
                        "location_id": 2,
                        "location_name": "San Andreas",
                        "tax_rate": 0.1,
                        "opened_date": "2079-10-27"
                    }
                ],
                "format": "dict",
                "fixture": null
            },
            "name": "test_does_location_opened_at_trunc_to_date",
            "resource_type": "unit_test",
            "package_name": "jaffle_shop",
            "path": "staging\\stg_locations.yml",
            "original_file_path": "models\\staging\\stg_locations.yml",
            "unique_id": "unit_test.jaffle_shop.stg_locations.test_does_location_opened_at_trunc_to_date",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_locations",
                "test_does_location_opened_at_trunc_to_date"
            ],
            "description": "Check that opened_at timestamp is properly truncated to a date.",
            "overrides": null,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_locations"
                ]
            },
            "config": {
                "tags": [],
                "meta": {}
            },
            "checksum": "dcd85ada76629bf46437f0041f76303dd744a67bdd99440f70b520b3f094c9b6",
            "schema": "public",
            "created_at": 1722131666.81522,
            "versions": null,
            "version": null
        }
    }
}
