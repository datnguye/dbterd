import json
from dataclasses import dataclass
from unittest import mock

import pytest

from dbterd.adapters.meta import Column, Ref, Table
from dbterd.adapters.targets import drawdb as engine


@dataclass
class DummyManifestMetadata:
    generated_at: str


@dataclass
class DummyManifest:
    metadata: DummyManifestMetadata


class TestDbmlTestRelationship:
    @pytest.mark.parametrize(
        "tables, relationships, select, exclude, resource_type, omit_entity_name_quotes, expected",
        [
            (
                [
                    Table(
                        name="model.dbt_resto.table1",
                        node_name="model.dbt_resto.table1",
                        database="--database--",
                        schema="--schema--",
                        columns=[
                            Column(
                                name="name1",
                                data_type="--name1-type--",
                                description="column name 1",
                            )
                        ],
                        raw_sql="--irrelevant--",
                    ),
                ],
                [],
                [],
                [],
                ["model"],
                False,
                json.dumps(
                    dict(
                        author="dbterd",
                        title="Generated by dbterd",
                        date="dummy",
                        tables=[
                            dict(
                                id=0,
                                name="model.dbt_resto.table1",
                                x=0,
                                y=0,
                                comment="",
                                indices=[],
                                color="#175e7a",
                                fields=[
                                    dict(
                                        id=0,
                                        name="name1",
                                        type="--name1-type--",
                                        default="",
                                        check="",
                                        primary=False,
                                        unique=False,
                                        notNull=False,
                                        increment=False,
                                        comment="column name 1",
                                    ),
                                ],
                            )
                        ],
                        relationships=[],
                        notes=[],
                        subjectAreas=[],
                        database="generic",
                        types=[],
                    )
                ),
            ),
            (
                [
                    Table(
                        name="model.dbt_resto.table1",
                        node_name="model.dbt_resto.table1",
                        database="--database--",
                        schema="--schema--",
                        columns=[Column(name="name1", data_type="--name1-type--")],
                        raw_sql="--irrelevant--",
                    ),
                    Table(
                        name="model.dbt_resto.table2",
                        node_name="model.dbt_resto.table2",
                        database="--database2--",
                        schema="--schema2--",
                        columns=[Column(name="name2", data_type="--name2-type2--")],
                        raw_sql="--irrelevant--",
                    ),
                ],
                [
                    Ref(
                        name="test.dbt_resto.relationships_table1",
                        table_map=["model.dbt_resto.table2", "model.dbt_resto.table1"],
                        column_map=["name2", "name1"],
                    )
                ],
                [],
                [],
                ["model", "source"],
                False,
                json.dumps(
                    dict(
                        author="dbterd",
                        title="Generated by dbterd",
                        date="dummy",
                        tables=[
                            dict(
                                id=0,
                                name="model.dbt_resto.table1",
                                x=0,
                                y=0,
                                comment="",
                                indices=[],
                                color="#175e7a",
                                fields=[
                                    dict(
                                        id=0,
                                        name="name1",
                                        type="--name1-type--",
                                        default="",
                                        check="",
                                        primary=False,
                                        unique=False,
                                        notNull=False,
                                        increment=False,
                                        comment="",
                                    )
                                ],
                            ),
                            dict(
                                id=1,
                                name="model.dbt_resto.table2",
                                x=500,
                                y=0,
                                comment="",
                                indices=[],
                                color="#175e7a",
                                fields=[
                                    dict(
                                        id=0,
                                        name="name2",
                                        type="--name2-type2--",
                                        default="",
                                        check="",
                                        primary=False,
                                        unique=False,
                                        notNull=False,
                                        increment=False,
                                        comment="",
                                    )
                                ],
                            ),
                        ],
                        relationships=[
                            dict(
                                id=0,
                                name="fk__model.dbt_resto.table1_model.dbt_resto.table2__name1",
                                cardinality="Many to one",
                                startTableId=0,
                                endTableId=1,
                                startFieldId=0,
                                endFieldId=0,
                                updateConstraint="No action",
                                deleteConstraint="No action",
                            )
                        ],
                        notes=[],
                        subjectAreas=[],
                        database="generic",
                        types=[],
                    )
                ),
            ),
        ],
    )
    def test_parse(
        self,
        tables,
        relationships,
        select,
        exclude,
        resource_type,
        omit_entity_name_quotes,
        expected,
    ):
        with mock.patch(
            "dbterd.adapters.algos.base.get_tables",
            return_value=tables,
        ) as mock_get_tables:
            with mock.patch(
                "dbterd.adapters.algos.base.get_relationships",
                return_value=relationships,
            ) as mock_get_relationships:
                drawdb = engine.parse(
                    manifest=DummyManifest(
                        metadata=DummyManifestMetadata(generated_at="dummy")
                    ),
                    catalog="--catalog--",
                    select=select,
                    exclude=exclude,
                    resource_type=resource_type,
                    algo="test_relationship",
                    omit_entity_name_quotes=omit_entity_name_quotes,
                )
                assert drawdb.replace(" ", "").replace("\n", "") == str(
                    expected
                ).replace(" ", "").replace("\n", "")
                mock_get_tables.assert_called_once()
                mock_get_relationships.assert_called_once()

    @pytest.mark.parametrize(
        "relationship_type, symbol",
        [
            ("0n", "One to many"),
            ("1n", "One to many"),
            ("01", "One to one"),
            ("11", "One to one"),
            ("nn", "Many to many"),
            ("n1", "Many to one"),
            ("--irrelevant--", "Many to one"),
        ],
    )
    def test_get_rel_symbol(self, relationship_type, symbol):
        assert engine.get_rel_symbol(relationship_type=relationship_type) == symbol

    def test_get_y(self):
        tables = [
            Table(
                name="model.dbt_resto.table1",
                node_name="--irrelevant--",
                database="--database--",
                schema="--schema--",
                columns=[Column(name="name1", data_type="--name1-type--")],
                raw_sql="--irrelevant--",
            ),
            Table(
                name="model.dbt_resto.table2",
                node_name="--irrelevant--",
                database="--irrelevant--",
                schema="--irrelevant--",
                columns=[Column(name="--irrelevant--", data_type="--irrelevant--")],
                raw_sql="--irrelevant--",
            ),
            Table(
                name="model.dbt_resto.table3",
                node_name="--irrelevant--",
                database="--irrelevant--",
                schema="--irrelevant--",
                columns=[Column(name="--irrelevant--", data_type="--irrelevant--")],
                raw_sql="--irrelevant--",
            ),
            Table(
                name="model.dbt_resto.table4",
                node_name="--irrelevant--",
                database="--irrelevant--",
                schema="--irrelevant--",
                columns=[Column(name="--irrelevant--", data_type="--irrelevant--")],
                raw_sql="--irrelevant--",
            ),
            Table(
                name="model.dbt_resto.table5",
                node_name="--irrelevant--",
                database="--irrelevant--",
                schema="--irrelevant--",
                columns=[Column(name="--irrelevant--", data_type="--irrelevant--")],
                raw_sql="--irrelevant--",
            ),
        ]
        assert 0 == engine.get_y(tables, 0, dict())
        assert 0 == engine.get_y(tables, 1, dict())
        assert 0 == engine.get_y(tables, 2, dict())
        assert 0 == engine.get_y(tables, 3, dict())
        assert 100 == engine.get_y(tables, 4, {"model.dbt_resto.table1": {"y": 0}})
        assert 100 + 5 == engine.get_y(tables, 4, {"model.dbt_resto.table1": {"y": 5}})

    def test_run(self):
        with mock.patch(
            "dbterd.adapters.targets.drawdb.parse",
            return_value="dummy",
        ) as mock_parse:
            assert ("xyz", "dummy") == engine.run(
                manifest="irr", catalog="irr", output_file_name="xyz"
            )
            assert ("output.ddb", "dummy") == engine.run(manifest="irr", catalog="irr")
            assert mock_parse.call_count == 2
